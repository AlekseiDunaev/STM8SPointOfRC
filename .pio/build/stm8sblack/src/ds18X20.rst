                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module ds18X20
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _delay_ms
                                     12 	.globl _delay_us
                                     13 	.globl _GPIO_ReadInputPin
                                     14 	.globl _GPIO_WriteLow
                                     15 	.globl _GPIO_WriteHigh
                                     16 	.globl _GPIO_Init
                                     17 	.globl _GPIO_DeInit
                                     18 	.globl _DS18X20_Reset
                                     19 	.globl _DS18X20_Write_Byte
                                     20 	.globl _DS18X20_Read_Byte
                                     21 	.globl _DS18X20_Read_ID
                                     22 	.globl _DS18X20_Skip_ID
                                     23 	.globl _DS18X20_Get_Temperature
                                     24 	.globl _DS18X20_Setup
                                     25 ;--------------------------------------------------------
                                     26 ; ram data
                                     27 ;--------------------------------------------------------
                                     28 	.area DATA
                                     29 ;--------------------------------------------------------
                                     30 ; ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area INITIALIZED
                                     33 ;--------------------------------------------------------
                                     34 ; absolute external ram data
                                     35 ;--------------------------------------------------------
                                     36 	.area DABS (ABS)
                                     37 
                                     38 ; default segment ordering for linker
                                     39 	.area HOME
                                     40 	.area GSINIT
                                     41 	.area GSFINAL
                                     42 	.area CONST
                                     43 	.area INITIALIZER
                                     44 	.area CODE
                                     45 
                                     46 ;--------------------------------------------------------
                                     47 ; global & static initialisations
                                     48 ;--------------------------------------------------------
                                     49 	.area HOME
                                     50 	.area GSINIT
                                     51 	.area GSFINAL
                                     52 	.area GSINIT
                                     53 ;--------------------------------------------------------
                                     54 ; Home
                                     55 ;--------------------------------------------------------
                                     56 	.area HOME
                                     57 	.area HOME
                                     58 ;--------------------------------------------------------
                                     59 ; code
                                     60 ;--------------------------------------------------------
                                     61 	.area CODE
                                     62 ;	src\ds18X20.c: 3: bool DS18X20_Reset(void) {
                                     63 ;	-----------------------------------------
                                     64 ;	 function DS18X20_Reset
                                     65 ;	-----------------------------------------
      00A591                         66 _DS18X20_Reset:
                                     67 ;	src\ds18X20.c: 6: OW_LOW();
      00A591 A6 08            [ 1]   68 	ld	a, #0x08
      00A593 AE 50 0A         [ 2]   69 	ldw	x, #0x500a
      00A596 CD 8A D2         [ 4]   70 	call	_GPIO_WriteLow
                                     71 ;	src\ds18X20.c: 8: delay_us(900);
      00A599 AE 03 84         [ 2]   72 	ldw	x, #0x0384
      00A59C CD A5 6F         [ 4]   73 	call	_delay_us
                                     74 ;	src\ds18X20.c: 9: OW_HIGH();
      00A59F A6 08            [ 1]   75 	ld	a, #0x08
      00A5A1 AE 50 0A         [ 2]   76 	ldw	x, #0x500a
      00A5A4 CD 8A C9         [ 4]   77 	call	_GPIO_WriteHigh
                                     78 ;	src\ds18X20.c: 11: delay_us(120);
      00A5A7 AE 00 78         [ 2]   79 	ldw	x, #0x0078
      00A5AA CD A5 6F         [ 4]   80 	call	_delay_us
                                     81 ;	src\ds18X20.c: 13: if(!OW_READ()) {
      00A5AD A6 08            [ 1]   82 	ld	a, #0x08
      00A5AF AE 50 0A         [ 2]   83 	ldw	x, #0x500a
      00A5B2 CD 8A EC         [ 4]   84 	call	_GPIO_ReadInputPin
      00A5B5 4D               [ 1]   85 	tnz	a
      00A5B6 26 1A            [ 1]   86 	jrne	00104$
                                     87 ;	src\ds18X20.c: 14: delay_us(480);
      00A5B8 AE 01 E0         [ 2]   88 	ldw	x, #0x01e0
      00A5BB CD A5 6F         [ 4]   89 	call	_delay_us
                                     90 ;	src\ds18X20.c: 15: if(OW_READ()) {
      00A5BE A6 08            [ 1]   91 	ld	a, #0x08
      00A5C0 AE 50 0A         [ 2]   92 	ldw	x, #0x500a
      00A5C3 CD 8A EC         [ 4]   93 	call	_GPIO_ReadInputPin
      00A5C6 4D               [ 1]   94 	tnz	a
      00A5C7 27 0F            [ 1]   95 	jreq	00105$
                                     96 ;	src\ds18X20.c: 16: delay_us(360);
      00A5C9 AE 01 68         [ 2]   97 	ldw	x, #0x0168
      00A5CC CD A5 6F         [ 4]   98 	call	_delay_us
                                     99 ;	src\ds18X20.c: 17: return TRUE;
      00A5CF A6 01            [ 1]  100 	ld	a, #0x01
      00A5D1 81               [ 4]  101 	ret
      00A5D2                        102 00104$:
                                    103 ;	src\ds18X20.c: 20: delay_us(900);
      00A5D2 AE 03 84         [ 2]  104 	ldw	x, #0x0384
      00A5D5 CD A5 6F         [ 4]  105 	call	_delay_us
      00A5D8                        106 00105$:
                                    107 ;	src\ds18X20.c: 23: return FALSE;
      00A5D8 4F               [ 1]  108 	clr	a
                                    109 ;	src\ds18X20.c: 25: }
      00A5D9 81               [ 4]  110 	ret
                                    111 ;	src\ds18X20.c: 27: void DS18X20_Write_Byte(uint8_t data) {
                                    112 ;	-----------------------------------------
                                    113 ;	 function DS18X20_Write_Byte
                                    114 ;	-----------------------------------------
      00A5DA                        115 _DS18X20_Write_Byte:
      00A5DA 89               [ 2]  116 	pushw	x
      00A5DB 6B 01            [ 1]  117 	ld	(0x01, sp), a
                                    118 ;	src\ds18X20.c: 28: for(uint8_t i = 0; i < 8; i++)
      00A5DD 0F 02            [ 1]  119 	clr	(0x02, sp)
      00A5DF                        120 00106$:
      00A5DF 7B 02            [ 1]  121 	ld	a, (0x02, sp)
      00A5E1 A1 08            [ 1]  122 	cp	a, #0x08
      00A5E3 24 47            [ 1]  123 	jrnc	00108$
                                    124 ;	src\ds18X20.c: 30: if(data & 0x01)
      00A5E5 7B 01            [ 1]  125 	ld	a, (0x01, sp)
      00A5E7 44               [ 1]  126 	srl	a
      00A5E8 24 1F            [ 1]  127 	jrnc	00102$
                                    128 ;	src\ds18X20.c: 32: OW_LOW();               /* master - drive bus low */
      00A5EA A6 08            [ 1]  129 	ld	a, #0x08
      00A5EC AE 50 0A         [ 2]  130 	ldw	x, #0x500a
      00A5EF CD 8A D2         [ 4]  131 	call	_GPIO_WriteLow
                                    132 ;	src\ds18X20.c: 34: __asm__ ("nop");
      00A5F2 9D               [ 1]  133 	nop
                                    134 ;	src\ds18X20.c: 35: __asm__ ("nop");
      00A5F3 9D               [ 1]  135 	nop
                                    136 ;	src\ds18X20.c: 36: __asm__ ("nop");
      00A5F4 9D               [ 1]  137 	nop
                                    138 ;	src\ds18X20.c: 37: __asm__ ("nop");
      00A5F5 9D               [ 1]  139 	nop
                                    140 ;	src\ds18X20.c: 38: __asm__ ("nop");
      00A5F6 9D               [ 1]  141 	nop
                                    142 ;	src\ds18X20.c: 39: __asm__ ("nop");
      00A5F7 9D               [ 1]  143 	nop
                                    144 ;	src\ds18X20.c: 40: __asm__ ("nop");
      00A5F8 9D               [ 1]  145 	nop
                                    146 ;	src\ds18X20.c: 41: OW_HIGH();              /* master - release bus */
      00A5F9 A6 08            [ 1]  147 	ld	a, #0x08
      00A5FB AE 50 0A         [ 2]  148 	ldw	x, #0x500a
      00A5FE CD 8A C9         [ 4]  149 	call	_GPIO_WriteHigh
                                    150 ;	src\ds18X20.c: 43: delay_us(50);   /* master - wait 64us (B-59,64,N/A) */
      00A601 AE 00 32         [ 2]  151 	ldw	x, #0x0032
      00A604 CD A5 6F         [ 4]  152 	call	_delay_us
      00A607 20 1D            [ 2]  153 	jra	00103$
      00A609                        154 00102$:
                                    155 ;	src\ds18X20.c: 47: OW_LOW();                /* master - drive bus low */
      00A609 A6 08            [ 1]  156 	ld	a, #0x08
      00A60B AE 50 0A         [ 2]  157 	ldw	x, #0x500a
      00A60E CD 8A D2         [ 4]  158 	call	_GPIO_WriteLow
                                    159 ;	src\ds18X20.c: 48: delay_us(50);    /* master - wait 60us (C-60,60,120) */
      00A611 AE 00 32         [ 2]  160 	ldw	x, #0x0032
      00A614 CD A5 6F         [ 4]  161 	call	_delay_us
                                    162 ;	src\ds18X20.c: 49: OW_HIGH();               /* master - release bus */
      00A617 A6 08            [ 1]  163 	ld	a, #0x08
      00A619 AE 50 0A         [ 2]  164 	ldw	x, #0x500a
      00A61C CD 8A C9         [ 4]  165 	call	_GPIO_WriteHigh
                                    166 ;	src\ds18X20.c: 51: __asm__ ("nop");
      00A61F 9D               [ 1]  167 	nop
                                    168 ;	src\ds18X20.c: 52: __asm__ ("nop");
      00A620 9D               [ 1]  169 	nop
                                    170 ;	src\ds18X20.c: 53: __asm__ ("nop");
      00A621 9D               [ 1]  171 	nop
                                    172 ;	src\ds18X20.c: 54: __asm__ ("nop");
      00A622 9D               [ 1]  173 	nop
                                    174 ;	src\ds18X20.c: 55: __asm__ ("nop");
      00A623 9D               [ 1]  175 	nop
                                    176 ;	src\ds18X20.c: 56: __asm__ ("nop");
      00A624 9D               [ 1]  177 	nop
                                    178 ;	src\ds18X20.c: 57: __asm__ ("nop");
      00A625 9D               [ 1]  179 	nop
      00A626                        180 00103$:
                                    181 ;	src\ds18X20.c: 59: data >>= 1;
      00A626 04 01            [ 1]  182 	srl	(0x01, sp)
                                    183 ;	src\ds18X20.c: 28: for(uint8_t i = 0; i < 8; i++)
      00A628 0C 02            [ 1]  184 	inc	(0x02, sp)
      00A62A 20 B3            [ 2]  185 	jra	00106$
      00A62C                        186 00108$:
                                    187 ;	src\ds18X20.c: 61: }
      00A62C 85               [ 2]  188 	popw	x
      00A62D 81               [ 4]  189 	ret
                                    190 ;	src\ds18X20.c: 63: uint8_t DS18X20_Read_Byte(void) {
                                    191 ;	-----------------------------------------
                                    192 ;	 function DS18X20_Read_Byte
                                    193 ;	-----------------------------------------
      00A62E                        194 _DS18X20_Read_Byte:
      00A62E 89               [ 2]  195 	pushw	x
                                    196 ;	src\ds18X20.c: 64: uint8_t result = 0;
      00A62F 0F 01            [ 1]  197 	clr	(0x01, sp)
                                    198 ;	src\ds18X20.c: 66: for(uint8_t i = 0; i < 8; i++)
      00A631 0F 02            [ 1]  199 	clr	(0x02, sp)
      00A633                        200 00105$:
      00A633 7B 02            [ 1]  201 	ld	a, (0x02, sp)
      00A635 A1 08            [ 1]  202 	cp	a, #0x08
      00A637 24 40            [ 1]  203 	jrnc	00103$
                                    204 ;	src\ds18X20.c: 68: result >>= 1;
      00A639 04 01            [ 1]  205 	srl	(0x01, sp)
                                    206 ;	src\ds18X20.c: 69: OW_LOW();                 /* master - drive bus low */
      00A63B A6 08            [ 1]  207 	ld	a, #0x08
      00A63D AE 50 0A         [ 2]  208 	ldw	x, #0x500a
      00A640 CD 8A D2         [ 4]  209 	call	_GPIO_WriteLow
                                    210 ;	src\ds18X20.c: 71: __asm__ ("nop");
      00A643 9D               [ 1]  211 	nop
                                    212 ;	src\ds18X20.c: 72: __asm__ ("nop");
      00A644 9D               [ 1]  213 	nop
                                    214 ;	src\ds18X20.c: 73: __asm__ ("nop");
      00A645 9D               [ 1]  215 	nop
                                    216 ;	src\ds18X20.c: 74: __asm__ ("nop");
      00A646 9D               [ 1]  217 	nop
                                    218 ;	src\ds18X20.c: 75: __asm__ ("nop");
      00A647 9D               [ 1]  219 	nop
                                    220 ;	src\ds18X20.c: 76: __asm__ ("nop");
      00A648 9D               [ 1]  221 	nop
                                    222 ;	src\ds18X20.c: 77: __asm__ ("nop");
      00A649 9D               [ 1]  223 	nop
                                    224 ;	src\ds18X20.c: 78: OW_HIGH();                /* master - release bus */
      00A64A A6 08            [ 1]  225 	ld	a, #0x08
      00A64C AE 50 0A         [ 2]  226 	ldw	x, #0x500a
      00A64F CD 8A C9         [ 4]  227 	call	_GPIO_WriteHigh
                                    228 ;	src\ds18X20.c: 80: __asm__ ("nop");
      00A652 9D               [ 1]  229 	nop
                                    230 ;	src\ds18X20.c: 81: __asm__ ("nop");
      00A653 9D               [ 1]  231 	nop
                                    232 ;	src\ds18X20.c: 82: __asm__ ("nop");
      00A654 9D               [ 1]  233 	nop
                                    234 ;	src\ds18X20.c: 83: __asm__ ("nop");
      00A655 9D               [ 1]  235 	nop
                                    236 ;	src\ds18X20.c: 84: __asm__ ("nop");
      00A656 9D               [ 1]  237 	nop
                                    238 ;	src\ds18X20.c: 85: __asm__ ("nop");
      00A657 9D               [ 1]  239 	nop
                                    240 ;	src\ds18X20.c: 86: __asm__ ("nop");
      00A658 9D               [ 1]  241 	nop
                                    242 ;	src\ds18X20.c: 87: __asm__ ("nop");
      00A659 9D               [ 1]  243 	nop
                                    244 ;	src\ds18X20.c: 88: __asm__ ("nop");
      00A65A 9D               [ 1]  245 	nop
                                    246 ;	src\ds18X20.c: 89: __asm__ ("nop");
      00A65B 9D               [ 1]  247 	nop
                                    248 ;	src\ds18X20.c: 90: __asm__ ("nop");
      00A65C 9D               [ 1]  249 	nop
                                    250 ;	src\ds18X20.c: 91: __asm__ ("nop");
      00A65D 9D               [ 1]  251 	nop
                                    252 ;	src\ds18X20.c: 92: __asm__ ("nop");
      00A65E 9D               [ 1]  253 	nop
                                    254 ;	src\ds18X20.c: 94: if(OW_READ())  result |= 0x80;
      00A65F A6 08            [ 1]  255 	ld	a, #0x08
      00A661 AE 50 0A         [ 2]  256 	ldw	x, #0x500a
      00A664 CD 8A EC         [ 4]  257 	call	_GPIO_ReadInputPin
      00A667 4D               [ 1]  258 	tnz	a
      00A668 27 05            [ 1]  259 	jreq	00102$
      00A66A 08 01            [ 1]  260 	sll	(0x01, sp)
      00A66C 99               [ 1]  261 	scf
      00A66D 06 01            [ 1]  262 	rrc	(0x01, sp)
      00A66F                        263 00102$:
                                    264 ;	src\ds18X20.c: 95: delay_us(55);     /* master - wait 55us (F-50,55,N/A) */
      00A66F AE 00 37         [ 2]  265 	ldw	x, #0x0037
      00A672 CD A5 6F         [ 4]  266 	call	_delay_us
                                    267 ;	src\ds18X20.c: 66: for(uint8_t i = 0; i < 8; i++)
      00A675 0C 02            [ 1]  268 	inc	(0x02, sp)
      00A677 20 BA            [ 2]  269 	jra	00105$
      00A679                        270 00103$:
                                    271 ;	src\ds18X20.c: 97: return (result);
      00A679 7B 01            [ 1]  272 	ld	a, (0x01, sp)
                                    273 ;	src\ds18X20.c: 98: }
      00A67B 85               [ 2]  274 	popw	x
      00A67C 81               [ 4]  275 	ret
                                    276 ;	src\ds18X20.c: 100: bool DS18X20_Read_ID(u8 *ROM_ID) {
                                    277 ;	-----------------------------------------
                                    278 ;	 function DS18X20_Read_ID
                                    279 ;	-----------------------------------------
      00A67D                        280 _DS18X20_Read_ID:
      00A67D 52 03            [ 2]  281 	sub	sp, #3
      00A67F 1F 01            [ 2]  282 	ldw	(0x01, sp), x
                                    283 ;	src\ds18X20.c: 101: if(!DS18X20_Reset()) return FALSE;
      00A681 CD A5 91         [ 4]  284 	call	_DS18X20_Reset
      00A684 4D               [ 1]  285 	tnz	a
      00A685 26 03            [ 1]  286 	jrne	00102$
      00A687 4F               [ 1]  287 	clr	a
      00A688 20 26            [ 2]  288 	jra	00107$
      00A68A                        289 00102$:
                                    290 ;	src\ds18X20.c: 102: DS18X20_Write_Byte(READ_ROM);
      00A68A A6 33            [ 1]  291 	ld	a, #0x33
      00A68C CD A5 DA         [ 4]  292 	call	_DS18X20_Write_Byte
                                    293 ;	src\ds18X20.c: 103: delay_us(100);
      00A68F AE 00 64         [ 2]  294 	ldw	x, #0x0064
      00A692 CD A5 6F         [ 4]  295 	call	_delay_us
                                    296 ;	src\ds18X20.c: 104: for(uint8_t i = 0; i < 8; i++)
      00A695 0F 03            [ 1]  297 	clr	(0x03, sp)
      00A697                        298 00105$:
      00A697 7B 03            [ 1]  299 	ld	a, (0x03, sp)
      00A699 A1 08            [ 1]  300 	cp	a, #0x08
      00A69B 24 11            [ 1]  301 	jrnc	00103$
                                    302 ;	src\ds18X20.c: 106: ROM_ID[i] = DS18X20_Read_Byte();
      00A69D 5F               [ 1]  303 	clrw	x
      00A69E 7B 03            [ 1]  304 	ld	a, (0x03, sp)
      00A6A0 97               [ 1]  305 	ld	xl, a
      00A6A1 72 FB 01         [ 2]  306 	addw	x, (0x01, sp)
      00A6A4 89               [ 2]  307 	pushw	x
      00A6A5 CD A6 2E         [ 4]  308 	call	_DS18X20_Read_Byte
      00A6A8 85               [ 2]  309 	popw	x
      00A6A9 F7               [ 1]  310 	ld	(x), a
                                    311 ;	src\ds18X20.c: 104: for(uint8_t i = 0; i < 8; i++)
      00A6AA 0C 03            [ 1]  312 	inc	(0x03, sp)
      00A6AC 20 E9            [ 2]  313 	jra	00105$
      00A6AE                        314 00103$:
                                    315 ;	src\ds18X20.c: 108: return TRUE;
      00A6AE A6 01            [ 1]  316 	ld	a, #0x01
      00A6B0                        317 00107$:
                                    318 ;	src\ds18X20.c: 109: }
      00A6B0 5B 03            [ 2]  319 	addw	sp, #3
      00A6B2 81               [ 4]  320 	ret
                                    321 ;	src\ds18X20.c: 111: bool DS18X20_Skip_ID() {
                                    322 ;	-----------------------------------------
                                    323 ;	 function DS18X20_Skip_ID
                                    324 ;	-----------------------------------------
      00A6B3                        325 _DS18X20_Skip_ID:
                                    326 ;	src\ds18X20.c: 112: if(!DS18X20_Reset()) return FALSE;
      00A6B3 CD A5 91         [ 4]  327 	call	_DS18X20_Reset
      00A6B6 4D               [ 1]  328 	tnz	a
      00A6B7 26 02            [ 1]  329 	jrne	00102$
      00A6B9 4F               [ 1]  330 	clr	a
      00A6BA 81               [ 4]  331 	ret
      00A6BB                        332 00102$:
                                    333 ;	src\ds18X20.c: 113: DS18X20_Write_Byte(SKIP_ROM);
      00A6BB A6 CC            [ 1]  334 	ld	a, #0xcc
      00A6BD CD A5 DA         [ 4]  335 	call	_DS18X20_Write_Byte
                                    336 ;	src\ds18X20.c: 114: delay_us(100);
      00A6C0 AE 00 64         [ 2]  337 	ldw	x, #0x0064
      00A6C3 CD A5 6F         [ 4]  338 	call	_delay_us
                                    339 ;	src\ds18X20.c: 115: return TRUE;
      00A6C6 A6 01            [ 1]  340 	ld	a, #0x01
                                    341 ;	src\ds18X20.c: 116: }
      00A6C8 81               [ 4]  342 	ret
                                    343 ;	src\ds18X20.c: 118: float DS18X20_Get_Temperature() {
                                    344 ;	-----------------------------------------
                                    345 ;	 function DS18X20_Get_Temperature
                                    346 ;	-----------------------------------------
      00A6C9                        347 _DS18X20_Get_Temperature:
      00A6C9 52 05            [ 2]  348 	sub	sp, #5
                                    349 ;	src\ds18X20.c: 123: int8_t sign = 1;
      00A6CB A6 01            [ 1]  350 	ld	a, #0x01
      00A6CD 6B 01            [ 1]  351 	ld	(0x01, sp), a
                                    352 ;	src\ds18X20.c: 125: DS18X20_Skip_ID();
      00A6CF CD A6 B3         [ 4]  353 	call	_DS18X20_Skip_ID
                                    354 ;	src\ds18X20.c: 126: if (!DS18X20_Skip_ID()) {
      00A6D2 CD A6 B3         [ 4]  355 	call	_DS18X20_Skip_ID
      00A6D5 4D               [ 1]  356 	tnz	a
      00A6D6 26 07            [ 1]  357 	jrne	00102$
                                    358 ;	src\ds18X20.c: 127: return temperature;
      00A6D8 5F               [ 1]  359 	clrw	x
      00A6D9 90 AE C2 C8      [ 2]  360 	ldw	y, #0xc2c8
      00A6DD 20 6C            [ 2]  361 	jra	00107$
      00A6DF                        362 00102$:
                                    363 ;	src\ds18X20.c: 129: DS18X20_Write_Byte(CONVERT_T);
      00A6DF A6 44            [ 1]  364 	ld	a, #0x44
      00A6E1 CD A5 DA         [ 4]  365 	call	_DS18X20_Write_Byte
                                    366 ;	src\ds18X20.c: 130: delay_ms(4000);
      00A6E4 AE 0F A0         [ 2]  367 	ldw	x, #0x0fa0
      00A6E7 CD A5 81         [ 4]  368 	call	_delay_ms
                                    369 ;	src\ds18X20.c: 131: DS18X20_Skip_ID();
      00A6EA CD A6 B3         [ 4]  370 	call	_DS18X20_Skip_ID
                                    371 ;	src\ds18X20.c: 132: if (!DS18X20_Skip_ID()) {
      00A6ED CD A6 B3         [ 4]  372 	call	_DS18X20_Skip_ID
      00A6F0 4D               [ 1]  373 	tnz	a
      00A6F1 26 07            [ 1]  374 	jrne	00104$
                                    375 ;	src\ds18X20.c: 133: return temperature;
      00A6F3 5F               [ 1]  376 	clrw	x
      00A6F4 90 AE C2 C8      [ 2]  377 	ldw	y, #0xc2c8
      00A6F8 20 51            [ 2]  378 	jra	00107$
      00A6FA                        379 00104$:
                                    380 ;	src\ds18X20.c: 135: DS18X20_Write_Byte(READ_SCRATCHPAD);
      00A6FA A6 BE            [ 1]  381 	ld	a, #0xbe
      00A6FC CD A5 DA         [ 4]  382 	call	_DS18X20_Write_Byte
                                    383 ;	src\ds18X20.c: 136: lsb = DS18X20_Read_Byte();
      00A6FF CD A6 2E         [ 4]  384 	call	_DS18X20_Read_Byte
      00A702 6B 05            [ 1]  385 	ld	(0x05, sp), a
                                    386 ;	src\ds18X20.c: 137: msb = DS18X20_Read_Byte();
      00A704 CD A6 2E         [ 4]  387 	call	_DS18X20_Read_Byte
                                    388 ;	src\ds18X20.c: 138: if (msb >> 7) {
      00A707 95               [ 1]  389 	ld	xh, a
      00A708 4E               [ 1]  390 	swap	a
      00A709 A4 0F            [ 1]  391 	and	a, #0x0f
      00A70B 44               [ 1]  392 	srl	a
      00A70C 44               [ 1]  393 	srl	a
      00A70D 44               [ 1]  394 	srl	a
      00A70E 4D               [ 1]  395 	tnz	a
      00A70F 27 09            [ 1]  396 	jreq	00106$
                                    397 ;	src\ds18X20.c: 139: msb = ~msb;
      00A711 9E               [ 1]  398 	ld	a, xh
      00A712 43               [ 1]  399 	cpl	a
      00A713 95               [ 1]  400 	ld	xh, a
                                    401 ;	src\ds18X20.c: 140: lsb = ~lsb;
      00A714 03 05            [ 1]  402 	cpl	(0x05, sp)
                                    403 ;	src\ds18X20.c: 141: sign = -1;
      00A716 A6 FF            [ 1]  404 	ld	a, #0xff
      00A718 6B 01            [ 1]  405 	ld	(0x01, sp), a
      00A71A                        406 00106$:
                                    407 ;	src\ds18X20.c: 143: temp = msb;
                                    408 ;	src\ds18X20.c: 144: temp = temp << 8;
      00A71A 0F 03            [ 1]  409 	clr	(0x03, sp)
                                    410 ;	src\ds18X20.c: 145: temp |= lsb;
      00A71C 7B 05            [ 1]  411 	ld	a, (0x05, sp)
      00A71E 0F 04            [ 1]  412 	clr	(0x04, sp)
      00A720 1A 03            [ 1]  413 	or	a, (0x03, sp)
      00A722 02               [ 1]  414 	rlwa	x
      00A723 1A 04            [ 1]  415 	or	a, (0x04, sp)
                                    416 ;	src\ds18X20.c: 146: temp += 1;
      00A725 95               [ 1]  417 	ld	xh, a
      00A726 5C               [ 1]  418 	incw	x
                                    419 ;	src\ds18X20.c: 168: return temperature = temp * 0.0625 * sign;
      00A727 CD B8 19         [ 4]  420 	call	___sint2fs
      00A72A 89               [ 2]  421 	pushw	x
      00A72B 90 89            [ 2]  422 	pushw	y
      00A72D 5F               [ 1]  423 	clrw	x
      00A72E 89               [ 2]  424 	pushw	x
      00A72F 4B 80            [ 1]  425 	push	#0x80
      00A731 4B 3D            [ 1]  426 	push	#0x3d
      00A733 CD B1 34         [ 4]  427 	call	___fsmul
      00A736 1F 04            [ 2]  428 	ldw	(0x04, sp), x
      00A738 17 02            [ 2]  429 	ldw	(0x02, sp), y
      00A73A 7B 01            [ 1]  430 	ld	a, (0x01, sp)
      00A73C CD B9 29         [ 4]  431 	call	___schar2fs
      00A73F 89               [ 2]  432 	pushw	x
      00A740 90 89            [ 2]  433 	pushw	y
      00A742 1E 08            [ 2]  434 	ldw	x, (0x08, sp)
      00A744 89               [ 2]  435 	pushw	x
      00A745 1E 08            [ 2]  436 	ldw	x, (0x08, sp)
      00A747 89               [ 2]  437 	pushw	x
      00A748 CD B1 34         [ 4]  438 	call	___fsmul
      00A74B                        439 00107$:
                                    440 ;	src\ds18X20.c: 169: }
      00A74B 5B 05            [ 2]  441 	addw	sp, #5
      00A74D 81               [ 4]  442 	ret
                                    443 ;	src\ds18X20.c: 171: void DS18X20_Setup(void) {
                                    444 ;	-----------------------------------------
                                    445 ;	 function DS18X20_Setup
                                    446 ;	-----------------------------------------
      00A74E                        447 _DS18X20_Setup:
                                    448 ;	src\ds18X20.c: 172: OW_OUTPUT();
      00A74E AE 50 0A         [ 2]  449 	ldw	x, #0x500a
      00A751 CD 89 DF         [ 4]  450 	call	_GPIO_DeInit
      00A754 4B F0            [ 1]  451 	push	#0xf0
      00A756 A6 08            [ 1]  452 	ld	a, #0x08
      00A758 AE 50 0A         [ 2]  453 	ldw	x, #0x500a
      00A75B CD 89 ED         [ 4]  454 	call	_GPIO_Init
                                    455 ;	src\ds18X20.c: 173: }
      00A75E 81               [ 4]  456 	ret
                                    457 	.area CODE
                                    458 	.area CONST
                                    459 	.area INITIALIZER
                                    460 	.area CABS (ABS)
