                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module i2c
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _I2C_GetFlagStatus
                                     12 	.globl _I2C_CheckEvent
                                     13 	.globl _I2C_SendData
                                     14 	.globl _I2C_Send7bitAddress
                                     15 	.globl _I2C_ReceiveData
                                     16 	.globl _I2C_AcknowledgeConfig
                                     17 	.globl _I2C_GenerateSTOP
                                     18 	.globl _I2C_GenerateSTART
                                     19 	.globl _I2C_Cmd
                                     20 	.globl _I2C_Init
                                     21 	.globl _I2C_DeInit
                                     22 	.globl _I2C_Setup
                                     23 	.globl _I2C_Send_Bytes
                                     24 	.globl _I2C_Read_Byte
                                     25 	.globl _I2C_Read_Bytes
                                     26 ;--------------------------------------------------------
                                     27 ; ram data
                                     28 ;--------------------------------------------------------
                                     29 	.area DATA
                                     30 ;--------------------------------------------------------
                                     31 ; ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area INITIALIZED
                                     34 ;--------------------------------------------------------
                                     35 ; absolute external ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area DABS (ABS)
                                     38 
                                     39 ; default segment ordering for linker
                                     40 	.area HOME
                                     41 	.area GSINIT
                                     42 	.area GSFINAL
                                     43 	.area CONST
                                     44 	.area INITIALIZER
                                     45 	.area CODE
                                     46 
                                     47 ;--------------------------------------------------------
                                     48 ; global & static initialisations
                                     49 ;--------------------------------------------------------
                                     50 	.area HOME
                                     51 	.area GSINIT
                                     52 	.area GSFINAL
                                     53 	.area GSINIT
                                     54 ;--------------------------------------------------------
                                     55 ; Home
                                     56 ;--------------------------------------------------------
                                     57 	.area HOME
                                     58 	.area HOME
                                     59 ;--------------------------------------------------------
                                     60 ; code
                                     61 ;--------------------------------------------------------
                                     62 	.area CODE
                                     63 ;	src\i2c.c: 8: void I2C_Setup(void) {
                                     64 ;	-----------------------------------------
                                     65 ;	 function I2C_Setup
                                     66 ;	-----------------------------------------
      000000                         67 _I2C_Setup:
                                     68 ;	src\i2c.c: 9: I2C_DeInit();
      000000 CDr00r00         [ 4]   69 	call	_I2C_DeInit
                                     70 ;	src\i2c.c: 12: I2C_Init(I2C_MAX_STANDARD_FREQ, I2C_ID_ADDRESS, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, I2C_MAX_INPUT_FREQ);
      000003 4B 10            [ 1]   71 	push	#0x10
      000005 4B 00            [ 1]   72 	push	#0x00
      000007 4B 01            [ 1]   73 	push	#0x01
      000009 4B 00            [ 1]   74 	push	#0x00
      00000B 4B EE            [ 1]   75 	push	#0xee
      00000D 4B 00            [ 1]   76 	push	#0x00
      00000F 4B A0            [ 1]   77 	push	#0xa0
      000011 4B 86            [ 1]   78 	push	#0x86
      000013 4B 01            [ 1]   79 	push	#0x01
      000015 4B 00            [ 1]   80 	push	#0x00
      000017 CDr00r00         [ 4]   81 	call	_I2C_Init
                                     82 ;	src\i2c.c: 13: I2C_Cmd(ENABLE);
      00001A A6 01            [ 1]   83 	ld	a, #0x01
                                     84 ;	src\i2c.c: 14: }
      00001C CCr00r00         [ 2]   85 	jp	_I2C_Cmd
                                     86 ;	src\i2c.c: 16: void I2C_Send_Bytes(uint8_t Addr, uint16_t countData, uint8_t* dataBuffer) {
                                     87 ;	-----------------------------------------
                                     88 ;	 function I2C_Send_Bytes
                                     89 ;	-----------------------------------------
      00001F                         90 _I2C_Send_Bytes:
      00001F 52 0F            [ 2]   91 	sub	sp, #15
      000021 6B 07            [ 1]   92 	ld	(0x07, sp), a
      000023 1F 05            [ 2]   93 	ldw	(0x05, sp), x
                                     94 ;	src\i2c.c: 18: while((I2C_GetFlagStatus(I2C_FLAG_BUSBUSY)) && (time_out--));//Проверяем занятость линии I2C.
      000025 AE 03 E8         [ 2]   95 	ldw	x, #0x03e8
      000028 1F 0E            [ 2]   96 	ldw	(0x0e, sp), x
      00002A 5F               [ 1]   97 	clrw	x
      00002B 1F 0C            [ 2]   98 	ldw	(0x0c, sp), x
      00002D                         99 00102$:
      00002D AE 03 02         [ 2]  100 	ldw	x, #0x0302
      000030 CDr00r00         [ 4]  101 	call	_I2C_GetFlagStatus
      000033 4D               [ 1]  102 	tnz	a
      000034 27 1E            [ 1]  103 	jreq	00104$
      000036 16 0E            [ 2]  104 	ldw	y, (0x0e, sp)
      000038 17 0A            [ 2]  105 	ldw	(0x0a, sp), y
      00003A 16 0C            [ 2]  106 	ldw	y, (0x0c, sp)
      00003C 17 08            [ 2]  107 	ldw	(0x08, sp), y
      00003E 1E 0E            [ 2]  108 	ldw	x, (0x0e, sp)
      000040 1D 00 01         [ 2]  109 	subw	x, #0x0001
      000043 1F 0E            [ 2]  110 	ldw	(0x0e, sp), x
      000045 1E 0C            [ 2]  111 	ldw	x, (0x0c, sp)
      000047 24 01            [ 1]  112 	jrnc	00208$
      000049 5A               [ 2]  113 	decw	x
      00004A                        114 00208$:
      00004A 1F 0C            [ 2]  115 	ldw	(0x0c, sp), x
      00004C 1E 0A            [ 2]  116 	ldw	x, (0x0a, sp)
      00004E 26 DD            [ 1]  117 	jrne	00102$
      000050 1E 08            [ 2]  118 	ldw	x, (0x08, sp)
      000052 26 D9            [ 1]  119 	jrne	00102$
      000054                        120 00104$:
                                    121 ;	src\i2c.c: 19: I2C_GenerateSTART(ENABLE);//Запуск I2C для передачи данных.
      000054 A6 01            [ 1]  122 	ld	a, #0x01
      000056 CDr00r00         [ 4]  123 	call	_I2C_GenerateSTART
                                    124 ;	src\i2c.c: 21: while((!I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT)) && (time_out--));//Ждём установки бита MASTER.
      000059 AE 03 E8         [ 2]  125 	ldw	x, #0x03e8
      00005C 1F 0E            [ 2]  126 	ldw	(0x0e, sp), x
      00005E 5F               [ 1]  127 	clrw	x
      00005F                        128 00106$:
      00005F 89               [ 2]  129 	pushw	x
      000060 AE 03 01         [ 2]  130 	ldw	x, #0x0301
      000063 CDr00r00         [ 4]  131 	call	_I2C_CheckEvent
      000066 85               [ 2]  132 	popw	x
      000067 4D               [ 1]  133 	tnz	a
      000068 26 19            [ 1]  134 	jrne	00108$
      00006A 1F 08            [ 2]  135 	ldw	(0x08, sp), x
      00006C 16 0E            [ 2]  136 	ldw	y, (0x0e, sp)
      00006E 17 0A            [ 2]  137 	ldw	(0x0a, sp), y
      000070 16 0E            [ 2]  138 	ldw	y, (0x0e, sp)
      000072 72 A2 00 01      [ 2]  139 	subw	y, #0x0001
      000076 17 0E            [ 2]  140 	ldw	(0x0e, sp), y
      000078 24 01            [ 1]  141 	jrnc	00212$
      00007A 5A               [ 2]  142 	decw	x
      00007B                        143 00212$:
      00007B 16 0A            [ 2]  144 	ldw	y, (0x0a, sp)
      00007D 26 E0            [ 1]  145 	jrne	00106$
      00007F 16 08            [ 2]  146 	ldw	y, (0x08, sp)
      000081 26 DC            [ 1]  147 	jrne	00106$
      000083                        148 00108$:
                                    149 ;	src\i2c.c: 22: I2C_Send7bitAddress((uint8_t)Addr, I2C_DIRECTION_TX);//Отсылаем адрес вызываемого устройства.
      000083 4B 00            [ 1]  150 	push	#0x00
      000085 7B 08            [ 1]  151 	ld	a, (0x08, sp)
      000087 CDr00r00         [ 4]  152 	call	_I2C_Send7bitAddress
                                    153 ;	src\i2c.c: 24: while((!I2C_GetFlagStatus(I2C_FLAG_ADDRESSSENTMATCHED)) && (time_out--));//Ждём когда нужное устройство подтвердит.
      00008A AE 03 E8         [ 2]  154 	ldw	x, #0x03e8
      00008D 1F 0E            [ 2]  155 	ldw	(0x0e, sp), x
      00008F 5F               [ 1]  156 	clrw	x
      000090                        157 00110$:
      000090 89               [ 2]  158 	pushw	x
      000091 AE 01 02         [ 2]  159 	ldw	x, #0x0102
      000094 CDr00r00         [ 4]  160 	call	_I2C_GetFlagStatus
      000097 85               [ 2]  161 	popw	x
      000098 4D               [ 1]  162 	tnz	a
      000099 26 19            [ 1]  163 	jrne	00112$
      00009B 1F 08            [ 2]  164 	ldw	(0x08, sp), x
      00009D 16 0E            [ 2]  165 	ldw	y, (0x0e, sp)
      00009F 17 0A            [ 2]  166 	ldw	(0x0a, sp), y
      0000A1 16 0E            [ 2]  167 	ldw	y, (0x0e, sp)
      0000A3 72 A2 00 01      [ 2]  168 	subw	y, #0x0001
      0000A7 17 0E            [ 2]  169 	ldw	(0x0e, sp), y
      0000A9 24 01            [ 1]  170 	jrnc	00216$
      0000AB 5A               [ 2]  171 	decw	x
      0000AC                        172 00216$:
      0000AC 16 0A            [ 2]  173 	ldw	y, (0x0a, sp)
      0000AE 26 E0            [ 1]  174 	jrne	00110$
      0000B0 16 08            [ 2]  175 	ldw	y, (0x08, sp)
      0000B2 26 DC            [ 1]  176 	jrne	00110$
      0000B4                        177 00112$:
                                    178 ;	src\i2c.c: 25: (void)I2C->SR1; (void)I2C->SR3;//Комбинация для сброса ADDR.
      0000B4 C6 52 17         [ 1]  179 	ld	a, 0x5217
      0000B7 C6 52 19         [ 1]  180 	ld	a, 0x5219
                                    181 ;	src\i2c.c: 26: while(countData) {//Повторяем пока не отправятся все данные.
      0000BA 16 12            [ 2]  182 	ldw	y, (0x12, sp)
      0000BC 17 08            [ 2]  183 	ldw	(0x08, sp), y
      0000BE 16 05            [ 2]  184 	ldw	y, (0x05, sp)
      0000C0 17 0A            [ 2]  185 	ldw	(0x0a, sp), y
      0000C2                        186 00117$:
      0000C2 1E 0A            [ 2]  187 	ldw	x, (0x0a, sp)
      0000C4 27 36            [ 1]  188 	jreq	00119$
                                    189 ;	src\i2c.c: 28: while(!(I2C->SR1 & 128) && (time_out--));//Ждём когда буфер передающего регистра будет пуст.
      0000C6 AE 03 E8         [ 2]  190 	ldw	x, #0x03e8
      0000C9 1F 0E            [ 2]  191 	ldw	(0x0e, sp), x
      0000CB 5F               [ 1]  192 	clrw	x
      0000CC                        193 00114$:
      0000CC C6 52 17         [ 1]  194 	ld	a, 0x5217
      0000CF 2B 19            [ 1]  195 	jrmi	00116$
      0000D1 1F 01            [ 2]  196 	ldw	(0x01, sp), x
      0000D3 16 0E            [ 2]  197 	ldw	y, (0x0e, sp)
      0000D5 17 03            [ 2]  198 	ldw	(0x03, sp), y
      0000D7 16 0E            [ 2]  199 	ldw	y, (0x0e, sp)
      0000D9 72 A2 00 01      [ 2]  200 	subw	y, #0x0001
      0000DD 17 0E            [ 2]  201 	ldw	(0x0e, sp), y
      0000DF 24 01            [ 1]  202 	jrnc	00221$
      0000E1 5A               [ 2]  203 	decw	x
      0000E2                        204 00221$:
      0000E2 16 03            [ 2]  205 	ldw	y, (0x03, sp)
      0000E4 26 E6            [ 1]  206 	jrne	00114$
      0000E6 16 01            [ 2]  207 	ldw	y, (0x01, sp)
      0000E8 26 E2            [ 1]  208 	jrne	00114$
      0000EA                        209 00116$:
                                    210 ;	src\i2c.c: 29: I2C_SendData(*dataBuffer);
      0000EA 1E 08            [ 2]  211 	ldw	x, (0x08, sp)
      0000EC F6               [ 1]  212 	ld	a, (x)
      0000ED CDr00r00         [ 4]  213 	call	_I2C_SendData
                                    214 ;	src\i2c.c: 30: *dataBuffer++;
      0000F0 1E 08            [ 2]  215 	ldw	x, (0x08, sp)
      0000F2 5C               [ 1]  216 	incw	x
      0000F3 1F 08            [ 2]  217 	ldw	(0x08, sp), x
                                    218 ;	src\i2c.c: 31: countData--;
      0000F5 1E 0A            [ 2]  219 	ldw	x, (0x0a, sp)
      0000F7 5A               [ 2]  220 	decw	x
      0000F8 1F 0A            [ 2]  221 	ldw	(0x0a, sp), x
      0000FA 20 C6            [ 2]  222 	jra	00117$
      0000FC                        223 00119$:
                                    224 ;	src\i2c.c: 34: while((!I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED)) && (time_out--));//Ждём окончания отправки данных.
      0000FC AE 03 E8         [ 2]  225 	ldw	x, #0x03e8
      0000FF 1F 0E            [ 2]  226 	ldw	(0x0e, sp), x
      000101 5F               [ 1]  227 	clrw	x
      000102                        228 00121$:
      000102 89               [ 2]  229 	pushw	x
      000103 AE 07 84         [ 2]  230 	ldw	x, #0x0784
      000106 CDr00r00         [ 4]  231 	call	_I2C_CheckEvent
      000109 85               [ 2]  232 	popw	x
      00010A 4D               [ 1]  233 	tnz	a
      00010B 26 1E            [ 1]  234 	jrne	00123$
      00010D 1F 08            [ 2]  235 	ldw	(0x08, sp), x
      00010F 7B 0E            [ 1]  236 	ld	a, (0x0e, sp)
      000111 6B 0A            [ 1]  237 	ld	(0x0a, sp), a
      000113 7B 0F            [ 1]  238 	ld	a, (0x0f, sp)
      000115 16 0E            [ 2]  239 	ldw	y, (0x0e, sp)
      000117 72 A2 00 01      [ 2]  240 	subw	y, #0x0001
      00011B 17 0E            [ 2]  241 	ldw	(0x0e, sp), y
      00011D 24 01            [ 1]  242 	jrnc	00226$
      00011F 5A               [ 2]  243 	decw	x
      000120                        244 00226$:
      000120 4D               [ 1]  245 	tnz	a
      000121 26 DF            [ 1]  246 	jrne	00121$
      000123 16 09            [ 2]  247 	ldw	y, (0x09, sp)
      000125 26 DB            [ 1]  248 	jrne	00121$
      000127 0D 08            [ 1]  249 	tnz	(0x08, sp)
      000129 26 D7            [ 1]  250 	jrne	00121$
      00012B                        251 00123$:
                                    252 ;	src\i2c.c: 35: I2C_GenerateSTOP(ENABLE);//Установка STOP бита на линии.
      00012B A6 01            [ 1]  253 	ld	a, #0x01
      00012D CDr00r00         [ 4]  254 	call	_I2C_GenerateSTOP
                                    255 ;	src\i2c.c: 37: while((I2C->CR2 & I2C_CR2_STOP) && (time_out--));//Ждём остановки передачи и STOP на линии.
      000130 AE 03 E8         [ 2]  256 	ldw	x, #0x03e8
      000133 1F 0E            [ 2]  257 	ldw	(0x0e, sp), x
      000135 5F               [ 1]  258 	clrw	x
      000136                        259 00125$:
      000136 C6 52 11         [ 1]  260 	ld	a, 0x5211
      000139 A5 02            [ 1]  261 	bcp	a, #0x02
      00013B 27 1E            [ 1]  262 	jreq	00128$
      00013D 1F 08            [ 2]  263 	ldw	(0x08, sp), x
      00013F 7B 0E            [ 1]  264 	ld	a, (0x0e, sp)
      000141 6B 0A            [ 1]  265 	ld	(0x0a, sp), a
      000143 7B 0F            [ 1]  266 	ld	a, (0x0f, sp)
      000145 16 0E            [ 2]  267 	ldw	y, (0x0e, sp)
      000147 72 A2 00 01      [ 2]  268 	subw	y, #0x0001
      00014B 17 0E            [ 2]  269 	ldw	(0x0e, sp), y
      00014D 24 01            [ 1]  270 	jrnc	00230$
      00014F 5A               [ 2]  271 	decw	x
      000150                        272 00230$:
      000150 4D               [ 1]  273 	tnz	a
      000151 26 E3            [ 1]  274 	jrne	00125$
      000153 16 09            [ 2]  275 	ldw	y, (0x09, sp)
      000155 26 DF            [ 1]  276 	jrne	00125$
      000157 0D 08            [ 1]  277 	tnz	(0x08, sp)
      000159 26 DB            [ 1]  278 	jrne	00125$
      00015B                        279 00128$:
                                    280 ;	src\i2c.c: 38: }
      00015B 1E 10            [ 2]  281 	ldw	x, (16, sp)
      00015D 5B 13            [ 2]  282 	addw	sp, #19
      00015F FC               [ 2]  283 	jp	(x)
                                    284 ;	src\i2c.c: 40: uint8_t I2C_Read_Byte(uint8_t Addr) {
                                    285 ;	-----------------------------------------
                                    286 ;	 function I2C_Read_Byte
                                    287 ;	-----------------------------------------
      000160                        288 _I2C_Read_Byte:
      000160 52 0A            [ 2]  289 	sub	sp, #10
      000162 6B 06            [ 1]  290 	ld	(0x06, sp), a
                                    291 ;	src\i2c.c: 42: while((I2C_GetFlagStatus(I2C_FLAG_BUSBUSY)) && (time_out--));//Проверяем занятость линии I2C.
      000164 AE 03 E8         [ 2]  292 	ldw	x, #0x03e8
      000167 1F 09            [ 2]  293 	ldw	(0x09, sp), x
      000169 5F               [ 1]  294 	clrw	x
      00016A 1F 07            [ 2]  295 	ldw	(0x07, sp), x
      00016C                        296 00102$:
      00016C AE 03 02         [ 2]  297 	ldw	x, #0x0302
      00016F CDr00r00         [ 4]  298 	call	_I2C_GetFlagStatus
      000172 4D               [ 1]  299 	tnz	a
      000173 27 1E            [ 1]  300 	jreq	00104$
      000175 16 09            [ 2]  301 	ldw	y, (0x09, sp)
      000177 17 04            [ 2]  302 	ldw	(0x04, sp), y
      000179 16 07            [ 2]  303 	ldw	y, (0x07, sp)
      00017B 17 02            [ 2]  304 	ldw	(0x02, sp), y
      00017D 1E 09            [ 2]  305 	ldw	x, (0x09, sp)
      00017F 1D 00 01         [ 2]  306 	subw	x, #0x0001
      000182 1F 09            [ 2]  307 	ldw	(0x09, sp), x
      000184 1E 07            [ 2]  308 	ldw	x, (0x07, sp)
      000186 24 01            [ 1]  309 	jrnc	00179$
      000188 5A               [ 2]  310 	decw	x
      000189                        311 00179$:
      000189 1F 07            [ 2]  312 	ldw	(0x07, sp), x
      00018B 1E 04            [ 2]  313 	ldw	x, (0x04, sp)
      00018D 26 DD            [ 1]  314 	jrne	00102$
      00018F 1E 02            [ 2]  315 	ldw	x, (0x02, sp)
      000191 26 D9            [ 1]  316 	jrne	00102$
      000193                        317 00104$:
                                    318 ;	src\i2c.c: 43: I2C_GenerateSTART(ENABLE);//Запуск I2C для передачи данных.
      000193 A6 01            [ 1]  319 	ld	a, #0x01
      000195 CDr00r00         [ 4]  320 	call	_I2C_GenerateSTART
                                    321 ;	src\i2c.c: 45: while((!I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT)) && (time_out--));//Ждём установки бита MASTER.
      000198 AE 03 E8         [ 2]  322 	ldw	x, #0x03e8
      00019B 1F 09            [ 2]  323 	ldw	(0x09, sp), x
      00019D 5F               [ 1]  324 	clrw	x
      00019E                        325 00106$:
      00019E 89               [ 2]  326 	pushw	x
      00019F AE 03 01         [ 2]  327 	ldw	x, #0x0301
      0001A2 CDr00r00         [ 4]  328 	call	_I2C_CheckEvent
      0001A5 85               [ 2]  329 	popw	x
      0001A6 4D               [ 1]  330 	tnz	a
      0001A7 26 19            [ 1]  331 	jrne	00108$
      0001A9 1F 02            [ 2]  332 	ldw	(0x02, sp), x
      0001AB 16 09            [ 2]  333 	ldw	y, (0x09, sp)
      0001AD 17 04            [ 2]  334 	ldw	(0x04, sp), y
      0001AF 16 09            [ 2]  335 	ldw	y, (0x09, sp)
      0001B1 72 A2 00 01      [ 2]  336 	subw	y, #0x0001
      0001B5 17 09            [ 2]  337 	ldw	(0x09, sp), y
      0001B7 24 01            [ 1]  338 	jrnc	00183$
      0001B9 5A               [ 2]  339 	decw	x
      0001BA                        340 00183$:
      0001BA 16 04            [ 2]  341 	ldw	y, (0x04, sp)
      0001BC 26 E0            [ 1]  342 	jrne	00106$
      0001BE 16 02            [ 2]  343 	ldw	y, (0x02, sp)
      0001C0 26 DC            [ 1]  344 	jrne	00106$
      0001C2                        345 00108$:
                                    346 ;	src\i2c.c: 46: I2C_Send7bitAddress((uint8_t)Addr, I2C_DIRECTION_RX);//Отсылаем адрес вызываемого устройства и бит приёма данных.
      0001C2 4B 01            [ 1]  347 	push	#0x01
      0001C4 7B 07            [ 1]  348 	ld	a, (0x07, sp)
      0001C6 CDr00r00         [ 4]  349 	call	_I2C_Send7bitAddress
                                    350 ;	src\i2c.c: 48: while((!I2C_GetFlagStatus(I2C_FLAG_ADDRESSSENTMATCHED)) && (time_out--));//Ждём когда нужное устройство подтвердит.
      0001C9 AE 03 E8         [ 2]  351 	ldw	x, #0x03e8
      0001CC 1F 09            [ 2]  352 	ldw	(0x09, sp), x
      0001CE 5F               [ 1]  353 	clrw	x
      0001CF                        354 00110$:
      0001CF 89               [ 2]  355 	pushw	x
      0001D0 AE 01 02         [ 2]  356 	ldw	x, #0x0102
      0001D3 CDr00r00         [ 4]  357 	call	_I2C_GetFlagStatus
      0001D6 85               [ 2]  358 	popw	x
      0001D7 4D               [ 1]  359 	tnz	a
      0001D8 26 19            [ 1]  360 	jrne	00112$
      0001DA 1F 02            [ 2]  361 	ldw	(0x02, sp), x
      0001DC 16 09            [ 2]  362 	ldw	y, (0x09, sp)
      0001DE 17 04            [ 2]  363 	ldw	(0x04, sp), y
      0001E0 16 09            [ 2]  364 	ldw	y, (0x09, sp)
      0001E2 72 A2 00 01      [ 2]  365 	subw	y, #0x0001
      0001E6 17 09            [ 2]  366 	ldw	(0x09, sp), y
      0001E8 24 01            [ 1]  367 	jrnc	00187$
      0001EA 5A               [ 2]  368 	decw	x
      0001EB                        369 00187$:
      0001EB 16 04            [ 2]  370 	ldw	y, (0x04, sp)
      0001ED 26 E0            [ 1]  371 	jrne	00110$
      0001EF 16 02            [ 2]  372 	ldw	y, (0x02, sp)
      0001F1 26 DC            [ 1]  373 	jrne	00110$
      0001F3                        374 00112$:
                                    375 ;	src\i2c.c: 51: I2C_AcknowledgeConfig(I2C_ACK_NONE);//Отключаем ACK после приёма последнего байта, что бы не отправлялись данные.
      0001F3 4F               [ 1]  376 	clr	a
      0001F4 CDr00r00         [ 4]  377 	call	_I2C_AcknowledgeConfig
                                    378 ;	src\i2c.c: 53: (void)I2C->SR1; (void)I2C->SR3;//Комбинация для сброса ADDR.
      0001F7 C6 52 17         [ 1]  379 	ld	a, 0x5217
      0001FA C6 52 19         [ 1]  380 	ld	a, 0x5219
                                    381 ;	src\i2c.c: 55: I2C_GenerateSTOP(ENABLE);//Установка STOP бита на линии.
      0001FD A6 01            [ 1]  382 	ld	a, #0x01
      0001FF CDr00r00         [ 4]  383 	call	_I2C_GenerateSTOP
                                    384 ;	src\i2c.c: 58: while((!I2C_GetFlagStatus(I2C_FLAG_RXNOTEMPTY)) && (time_out--));//Ждём когда придут данные.
      000202 AE 03 E8         [ 2]  385 	ldw	x, #0x03e8
      000205 1F 09            [ 2]  386 	ldw	(0x09, sp), x
      000207 5F               [ 1]  387 	clrw	x
      000208                        388 00114$:
      000208 89               [ 2]  389 	pushw	x
      000209 AE 01 40         [ 2]  390 	ldw	x, #0x0140
      00020C CDr00r00         [ 4]  391 	call	_I2C_GetFlagStatus
      00020F 85               [ 2]  392 	popw	x
      000210 4D               [ 1]  393 	tnz	a
      000211 26 19            [ 1]  394 	jrne	00116$
      000213 1F 02            [ 2]  395 	ldw	(0x02, sp), x
      000215 16 09            [ 2]  396 	ldw	y, (0x09, sp)
      000217 17 04            [ 2]  397 	ldw	(0x04, sp), y
      000219 16 09            [ 2]  398 	ldw	y, (0x09, sp)
      00021B 72 A2 00 01      [ 2]  399 	subw	y, #0x0001
      00021F 17 09            [ 2]  400 	ldw	(0x09, sp), y
      000221 24 01            [ 1]  401 	jrnc	00191$
      000223 5A               [ 2]  402 	decw	x
      000224                        403 00191$:
      000224 16 04            [ 2]  404 	ldw	y, (0x04, sp)
      000226 26 E0            [ 1]  405 	jrne	00114$
      000228 16 02            [ 2]  406 	ldw	y, (0x02, sp)
      00022A 26 DC            [ 1]  407 	jrne	00114$
      00022C                        408 00116$:
                                    409 ;	src\i2c.c: 60: uint8_t read_byte = I2C_ReceiveData();//Читаем данные.
      00022C CDr00r00         [ 4]  410 	call	_I2C_ReceiveData
      00022F 6B 01            [ 1]  411 	ld	(0x01, sp), a
                                    412 ;	src\i2c.c: 63: while((I2C->CR2 & I2C_CR2_STOP)&& (time_out--));//Ждём остановки передачи и STOP на линии.
      000231 AE 03 E8         [ 2]  413 	ldw	x, #0x03e8
      000234 1F 09            [ 2]  414 	ldw	(0x09, sp), x
      000236 5F               [ 1]  415 	clrw	x
      000237                        416 00118$:
      000237 72 03 52 11 19   [ 2]  417 	btjf	0x5211, #1, 00120$
      00023C 1F 02            [ 2]  418 	ldw	(0x02, sp), x
      00023E 16 09            [ 2]  419 	ldw	y, (0x09, sp)
      000240 17 04            [ 2]  420 	ldw	(0x04, sp), y
      000242 16 09            [ 2]  421 	ldw	y, (0x09, sp)
      000244 72 A2 00 01      [ 2]  422 	subw	y, #0x0001
      000248 17 09            [ 2]  423 	ldw	(0x09, sp), y
      00024A 24 01            [ 1]  424 	jrnc	00195$
      00024C 5A               [ 2]  425 	decw	x
      00024D                        426 00195$:
      00024D 16 04            [ 2]  427 	ldw	y, (0x04, sp)
      00024F 26 E6            [ 1]  428 	jrne	00118$
      000251 16 02            [ 2]  429 	ldw	y, (0x02, sp)
      000253 26 E2            [ 1]  430 	jrne	00118$
      000255                        431 00120$:
                                    432 ;	src\i2c.c: 64: I2C_AcknowledgeConfig(I2C_ACK_CURR);//Устанавливаем контроль бита ACK.
      000255 A6 01            [ 1]  433 	ld	a, #0x01
      000257 CDr00r00         [ 4]  434 	call	_I2C_AcknowledgeConfig
                                    435 ;	src\i2c.c: 65: return read_byte;
      00025A 7B 01            [ 1]  436 	ld	a, (0x01, sp)
                                    437 ;	src\i2c.c: 66: }
      00025C 5B 0A            [ 2]  438 	addw	sp, #10
      00025E 81               [ 4]  439 	ret
                                    440 ;	src\i2c.c: 69: void I2C_Read_Bytes(uint8_t Addr, uint16_t countData, uint8_t* dataBuffer) {
                                    441 ;	-----------------------------------------
                                    442 ;	 function I2C_Read_Bytes
                                    443 ;	-----------------------------------------
      00025F                        444 _I2C_Read_Bytes:
      00025F 52 0F            [ 2]  445 	sub	sp, #15
      000261 6B 07            [ 1]  446 	ld	(0x07, sp), a
      000263 1F 05            [ 2]  447 	ldw	(0x05, sp), x
                                    448 ;	src\i2c.c: 71: while((I2C_GetFlagStatus(I2C_FLAG_BUSBUSY)) && (time_out--));//Проверяем занятость линии I2C.
      000265 AE 03 E8         [ 2]  449 	ldw	x, #0x03e8
      000268 1F 0E            [ 2]  450 	ldw	(0x0e, sp), x
      00026A 5F               [ 1]  451 	clrw	x
      00026B 1F 0C            [ 2]  452 	ldw	(0x0c, sp), x
      00026D                        453 00102$:
      00026D AE 03 02         [ 2]  454 	ldw	x, #0x0302
      000270 CDr00r00         [ 4]  455 	call	_I2C_GetFlagStatus
      000273 4D               [ 1]  456 	tnz	a
      000274 27 1E            [ 1]  457 	jreq	00104$
      000276 16 0E            [ 2]  458 	ldw	y, (0x0e, sp)
      000278 17 0A            [ 2]  459 	ldw	(0x0a, sp), y
      00027A 16 0C            [ 2]  460 	ldw	y, (0x0c, sp)
      00027C 17 08            [ 2]  461 	ldw	(0x08, sp), y
      00027E 1E 0E            [ 2]  462 	ldw	x, (0x0e, sp)
      000280 1D 00 01         [ 2]  463 	subw	x, #0x0001
      000283 1F 0E            [ 2]  464 	ldw	(0x0e, sp), x
      000285 1E 0C            [ 2]  465 	ldw	x, (0x0c, sp)
      000287 24 01            [ 1]  466 	jrnc	00229$
      000289 5A               [ 2]  467 	decw	x
      00028A                        468 00229$:
      00028A 1F 0C            [ 2]  469 	ldw	(0x0c, sp), x
      00028C 1E 0A            [ 2]  470 	ldw	x, (0x0a, sp)
      00028E 26 DD            [ 1]  471 	jrne	00102$
      000290 1E 08            [ 2]  472 	ldw	x, (0x08, sp)
      000292 26 D9            [ 1]  473 	jrne	00102$
      000294                        474 00104$:
                                    475 ;	src\i2c.c: 72: I2C_GenerateSTART(ENABLE);//Запуск I2C для передачи данных.
      000294 A6 01            [ 1]  476 	ld	a, #0x01
      000296 CDr00r00         [ 4]  477 	call	_I2C_GenerateSTART
                                    478 ;	src\i2c.c: 74: while((!I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT)) && (time_out--));//Ждём установки бита MASTER.
      000299 AE 03 E8         [ 2]  479 	ldw	x, #0x03e8
      00029C 1F 0E            [ 2]  480 	ldw	(0x0e, sp), x
      00029E 5F               [ 1]  481 	clrw	x
      00029F                        482 00106$:
      00029F 89               [ 2]  483 	pushw	x
      0002A0 AE 03 01         [ 2]  484 	ldw	x, #0x0301
      0002A3 CDr00r00         [ 4]  485 	call	_I2C_CheckEvent
      0002A6 85               [ 2]  486 	popw	x
      0002A7 4D               [ 1]  487 	tnz	a
      0002A8 26 19            [ 1]  488 	jrne	00108$
      0002AA 1F 08            [ 2]  489 	ldw	(0x08, sp), x
      0002AC 16 0E            [ 2]  490 	ldw	y, (0x0e, sp)
      0002AE 17 0A            [ 2]  491 	ldw	(0x0a, sp), y
      0002B0 16 0E            [ 2]  492 	ldw	y, (0x0e, sp)
      0002B2 72 A2 00 01      [ 2]  493 	subw	y, #0x0001
      0002B6 17 0E            [ 2]  494 	ldw	(0x0e, sp), y
      0002B8 24 01            [ 1]  495 	jrnc	00233$
      0002BA 5A               [ 2]  496 	decw	x
      0002BB                        497 00233$:
      0002BB 16 0A            [ 2]  498 	ldw	y, (0x0a, sp)
      0002BD 26 E0            [ 1]  499 	jrne	00106$
      0002BF 16 08            [ 2]  500 	ldw	y, (0x08, sp)
      0002C1 26 DC            [ 1]  501 	jrne	00106$
      0002C3                        502 00108$:
                                    503 ;	src\i2c.c: 75: I2C_Send7bitAddress((uint8_t)Addr, I2C_DIRECTION_RX);//Отсылаем адрес вызываемого устройства.
      0002C3 4B 01            [ 1]  504 	push	#0x01
      0002C5 7B 08            [ 1]  505 	ld	a, (0x08, sp)
      0002C7 CDr00r00         [ 4]  506 	call	_I2C_Send7bitAddress
                                    507 ;	src\i2c.c: 77: while((!I2C_GetFlagStatus(I2C_FLAG_ADDRESSSENTMATCHED)) && (time_out--));//Ждём когда нужное устройство подтвердит.
      0002CA AE 03 E8         [ 2]  508 	ldw	x, #0x03e8
      0002CD 1F 0E            [ 2]  509 	ldw	(0x0e, sp), x
      0002CF 5F               [ 1]  510 	clrw	x
      0002D0                        511 00110$:
      0002D0 89               [ 2]  512 	pushw	x
      0002D1 AE 01 02         [ 2]  513 	ldw	x, #0x0102
      0002D4 CDr00r00         [ 4]  514 	call	_I2C_GetFlagStatus
      0002D7 85               [ 2]  515 	popw	x
      0002D8 4D               [ 1]  516 	tnz	a
      0002D9 26 19            [ 1]  517 	jrne	00112$
      0002DB 1F 08            [ 2]  518 	ldw	(0x08, sp), x
      0002DD 16 0E            [ 2]  519 	ldw	y, (0x0e, sp)
      0002DF 17 0A            [ 2]  520 	ldw	(0x0a, sp), y
      0002E1 16 0E            [ 2]  521 	ldw	y, (0x0e, sp)
      0002E3 72 A2 00 01      [ 2]  522 	subw	y, #0x0001
      0002E7 17 0E            [ 2]  523 	ldw	(0x0e, sp), y
      0002E9 24 01            [ 1]  524 	jrnc	00237$
      0002EB 5A               [ 2]  525 	decw	x
      0002EC                        526 00237$:
      0002EC 16 0A            [ 2]  527 	ldw	y, (0x0a, sp)
      0002EE 26 E0            [ 1]  528 	jrne	00110$
      0002F0 16 08            [ 2]  529 	ldw	y, (0x08, sp)
      0002F2 26 DC            [ 1]  530 	jrne	00110$
      0002F4                        531 00112$:
                                    532 ;	src\i2c.c: 79: (void)I2C->SR1; (void)I2C->SR3;//Комбинация для сброса ADDR.
      0002F4 C6 52 17         [ 1]  533 	ld	a, 0x5217
      0002F7 C6 52 19         [ 1]  534 	ld	a, 0x5219
                                    535 ;	src\i2c.c: 80: if(countData > 3) {//Если принимаем больше трёх байтов.
      0002FA 1E 05            [ 2]  536 	ldw	x, (0x05, sp)
      0002FC A3 00 03         [ 2]  537 	cpw	x, #0x0003
      0002FF 23 55            [ 2]  538 	jrule	00147$
                                    539 ;	src\i2c.c: 81: while(countData > 3) {
      000301 16 12            [ 2]  540 	ldw	y, (0x12, sp)
      000303 17 08            [ 2]  541 	ldw	(0x08, sp), y
      000305 16 05            [ 2]  542 	ldw	y, (0x05, sp)
      000307 17 0A            [ 2]  543 	ldw	(0x0a, sp), y
      000309                        544 00117$:
      000309 1E 0A            [ 2]  545 	ldw	x, (0x0a, sp)
      00030B A3 00 03         [ 2]  546 	cpw	x, #0x0003
      00030E 23 42            [ 2]  547 	jrule	00159$
                                    548 ;	src\i2c.c: 83: while ((!I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)) && (time_out--));//Ждём отправку всех данных устройству.
      000310 AE 03 E8         [ 2]  549 	ldw	x, #0x03e8
      000313 1F 0E            [ 2]  550 	ldw	(0x0e, sp), x
      000315 5F               [ 1]  551 	clrw	x
      000316 1F 0C            [ 2]  552 	ldw	(0x0c, sp), x
      000318                        553 00114$:
      000318 AE 01 04         [ 2]  554 	ldw	x, #0x0104
      00031B CDr00r00         [ 4]  555 	call	_I2C_GetFlagStatus
      00031E 6B 04            [ 1]  556 	ld	(0x04, sp), a
      000320 26 1E            [ 1]  557 	jrne	00116$
      000322 16 0E            [ 2]  558 	ldw	y, (0x0e, sp)
      000324 17 03            [ 2]  559 	ldw	(0x03, sp), y
      000326 16 0C            [ 2]  560 	ldw	y, (0x0c, sp)
      000328 17 01            [ 2]  561 	ldw	(0x01, sp), y
      00032A 1E 0E            [ 2]  562 	ldw	x, (0x0e, sp)
      00032C 1D 00 01         [ 2]  563 	subw	x, #0x0001
      00032F 1F 0E            [ 2]  564 	ldw	(0x0e, sp), x
      000331 1E 0C            [ 2]  565 	ldw	x, (0x0c, sp)
      000333 24 01            [ 1]  566 	jrnc	00243$
      000335 5A               [ 2]  567 	decw	x
      000336                        568 00243$:
      000336 1F 0C            [ 2]  569 	ldw	(0x0c, sp), x
      000338 1E 03            [ 2]  570 	ldw	x, (0x03, sp)
      00033A 26 DC            [ 1]  571 	jrne	00114$
      00033C 1E 01            [ 2]  572 	ldw	x, (0x01, sp)
      00033E 26 D8            [ 1]  573 	jrne	00114$
      000340                        574 00116$:
                                    575 ;	src\i2c.c: 84: *dataBuffer = I2C_ReceiveData();
      000340 CDr00r00         [ 4]  576 	call	_I2C_ReceiveData
      000343 1E 08            [ 2]  577 	ldw	x, (0x08, sp)
      000345 F7               [ 1]  578 	ld	(x), a
                                    579 ;	src\i2c.c: 85: *dataBuffer++;
      000346 1E 08            [ 2]  580 	ldw	x, (0x08, sp)
      000348 5C               [ 1]  581 	incw	x
      000349 1F 08            [ 2]  582 	ldw	(0x08, sp), x
                                    583 ;	src\i2c.c: 86: countData--;
      00034B 1E 0A            [ 2]  584 	ldw	x, (0x0a, sp)
      00034D 5A               [ 2]  585 	decw	x
      00034E 1F 0A            [ 2]  586 	ldw	(0x0a, sp), x
      000350 20 B7            [ 2]  587 	jra	00117$
      000352                        588 00159$:
      000352 16 08            [ 2]  589 	ldw	y, (0x08, sp)
      000354 17 12            [ 2]  590 	ldw	(0x12, sp), y
                                    591 ;	src\i2c.c: 90: while ((!I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)) && (time_out--));//Ждём отправку всех данных устройству.
      000356                        592 00147$:
      000356 AE 03 E8         [ 2]  593 	ldw	x, #0x03e8
      000359 1F 0E            [ 2]  594 	ldw	(0x0e, sp), x
      00035B 5F               [ 1]  595 	clrw	x
      00035C                        596 00123$:
      00035C 89               [ 2]  597 	pushw	x
      00035D AE 01 04         [ 2]  598 	ldw	x, #0x0104
      000360 CDr00r00         [ 4]  599 	call	_I2C_GetFlagStatus
      000363 85               [ 2]  600 	popw	x
      000364 4D               [ 1]  601 	tnz	a
      000365 26 1E            [ 1]  602 	jrne	00125$
      000367 1F 08            [ 2]  603 	ldw	(0x08, sp), x
      000369 7B 0E            [ 1]  604 	ld	a, (0x0e, sp)
      00036B 6B 0A            [ 1]  605 	ld	(0x0a, sp), a
      00036D 7B 0F            [ 1]  606 	ld	a, (0x0f, sp)
      00036F 16 0E            [ 2]  607 	ldw	y, (0x0e, sp)
      000371 72 A2 00 01      [ 2]  608 	subw	y, #0x0001
      000375 17 0E            [ 2]  609 	ldw	(0x0e, sp), y
      000377 24 01            [ 1]  610 	jrnc	00248$
      000379 5A               [ 2]  611 	decw	x
      00037A                        612 00248$:
      00037A 4D               [ 1]  613 	tnz	a
      00037B 26 DF            [ 1]  614 	jrne	00123$
      00037D 16 09            [ 2]  615 	ldw	y, (0x09, sp)
      00037F 26 DB            [ 1]  616 	jrne	00123$
      000381 0D 08            [ 1]  617 	tnz	(0x08, sp)
      000383 26 D7            [ 1]  618 	jrne	00123$
      000385                        619 00125$:
                                    620 ;	src\i2c.c: 91: I2C_AcknowledgeConfig(I2C_ACK_NONE);//Отключаем ACK после приёма последнего байта, что бы не отправлялись данные.
      000385 4F               [ 1]  621 	clr	a
      000386 CDr00r00         [ 4]  622 	call	_I2C_AcknowledgeConfig
                                    623 ;	src\i2c.c: 92: *dataBuffer = I2C_ReceiveData();
      000389 1E 12            [ 2]  624 	ldw	x, (0x12, sp)
      00038B 89               [ 2]  625 	pushw	x
      00038C CDr00r00         [ 4]  626 	call	_I2C_ReceiveData
      00038F 85               [ 2]  627 	popw	x
      000390 F7               [ 1]  628 	ld	(x), a
                                    629 ;	src\i2c.c: 93: *dataBuffer++;
      000391 5C               [ 1]  630 	incw	x
      000392 1F 12            [ 2]  631 	ldw	(0x12, sp), x
                                    632 ;	src\i2c.c: 94: I2C_GenerateSTOP(ENABLE);//Установка STOP бита на линии.
      000394 A6 01            [ 1]  633 	ld	a, #0x01
      000396 CDr00r00         [ 4]  634 	call	_I2C_GenerateSTOP
                                    635 ;	src\i2c.c: 95: *dataBuffer = I2C_ReceiveData();
      000399 1E 12            [ 2]  636 	ldw	x, (0x12, sp)
      00039B 89               [ 2]  637 	pushw	x
      00039C CDr00r00         [ 4]  638 	call	_I2C_ReceiveData
      00039F 85               [ 2]  639 	popw	x
      0003A0 F7               [ 1]  640 	ld	(x), a
                                    641 ;	src\i2c.c: 96: *dataBuffer++;
      0003A1 5C               [ 1]  642 	incw	x
      0003A2 1F 12            [ 2]  643 	ldw	(0x12, sp), x
                                    644 ;	src\i2c.c: 98: while((!I2C_GetFlagStatus(I2C_FLAG_RXNOTEMPTY)) && (time_out--));//Ждём когда придут данные.
      0003A4 AE 03 E8         [ 2]  645 	ldw	x, #0x03e8
      0003A7 1F 0E            [ 2]  646 	ldw	(0x0e, sp), x
      0003A9 5F               [ 1]  647 	clrw	x
      0003AA                        648 00127$:
      0003AA 89               [ 2]  649 	pushw	x
      0003AB AE 01 40         [ 2]  650 	ldw	x, #0x0140
      0003AE CDr00r00         [ 4]  651 	call	_I2C_GetFlagStatus
      0003B1 85               [ 2]  652 	popw	x
      0003B2 4D               [ 1]  653 	tnz	a
      0003B3 26 1E            [ 1]  654 	jrne	00129$
      0003B5 1F 08            [ 2]  655 	ldw	(0x08, sp), x
      0003B7 7B 0E            [ 1]  656 	ld	a, (0x0e, sp)
      0003B9 6B 0A            [ 1]  657 	ld	(0x0a, sp), a
      0003BB 7B 0F            [ 1]  658 	ld	a, (0x0f, sp)
      0003BD 16 0E            [ 2]  659 	ldw	y, (0x0e, sp)
      0003BF 72 A2 00 01      [ 2]  660 	subw	y, #0x0001
      0003C3 17 0E            [ 2]  661 	ldw	(0x0e, sp), y
      0003C5 24 01            [ 1]  662 	jrnc	00252$
      0003C7 5A               [ 2]  663 	decw	x
      0003C8                        664 00252$:
      0003C8 4D               [ 1]  665 	tnz	a
      0003C9 26 DF            [ 1]  666 	jrne	00127$
      0003CB 16 09            [ 2]  667 	ldw	y, (0x09, sp)
      0003CD 26 DB            [ 1]  668 	jrne	00127$
      0003CF 0D 08            [ 1]  669 	tnz	(0x08, sp)
      0003D1 26 D7            [ 1]  670 	jrne	00127$
      0003D3                        671 00129$:
                                    672 ;	src\i2c.c: 99: *dataBuffer = I2C_ReceiveData();
      0003D3 1E 12            [ 2]  673 	ldw	x, (0x12, sp)
      0003D5 89               [ 2]  674 	pushw	x
      0003D6 CDr00r00         [ 4]  675 	call	_I2C_ReceiveData
      0003D9 85               [ 2]  676 	popw	x
      0003DA F7               [ 1]  677 	ld	(x), a
                                    678 ;	src\i2c.c: 101: while((I2C->CR2 & I2C_CR2_STOP) && (time_out--));//Ждём остановки передачи и STOP на линии.
      0003DB AE 03 E8         [ 2]  679 	ldw	x, #0x03e8
      0003DE 1F 0E            [ 2]  680 	ldw	(0x0e, sp), x
      0003E0 5F               [ 1]  681 	clrw	x
      0003E1                        682 00131$:
      0003E1 72 03 52 11 1E   [ 2]  683 	btjf	0x5211, #1, 00133$
      0003E6 1F 08            [ 2]  684 	ldw	(0x08, sp), x
      0003E8 7B 0E            [ 1]  685 	ld	a, (0x0e, sp)
      0003EA 6B 0A            [ 1]  686 	ld	(0x0a, sp), a
      0003EC 7B 0F            [ 1]  687 	ld	a, (0x0f, sp)
      0003EE 16 0E            [ 2]  688 	ldw	y, (0x0e, sp)
      0003F0 72 A2 00 01      [ 2]  689 	subw	y, #0x0001
      0003F4 17 0E            [ 2]  690 	ldw	(0x0e, sp), y
      0003F6 24 01            [ 1]  691 	jrnc	00256$
      0003F8 5A               [ 2]  692 	decw	x
      0003F9                        693 00256$:
      0003F9 4D               [ 1]  694 	tnz	a
      0003FA 26 E5            [ 1]  695 	jrne	00131$
      0003FC 16 09            [ 2]  696 	ldw	y, (0x09, sp)
      0003FE 26 E1            [ 1]  697 	jrne	00131$
      000400 0D 08            [ 1]  698 	tnz	(0x08, sp)
      000402 26 DD            [ 1]  699 	jrne	00131$
      000404                        700 00133$:
                                    701 ;	src\i2c.c: 102: I2C_AcknowledgeConfig(I2C_ACK_CURR);//Устанавливаем контроль бита ACK.
      000404 A6 01            [ 1]  702 	ld	a, #0x01
      000406 CDr00r00         [ 4]  703 	call	_I2C_AcknowledgeConfig
                                    704 ;	src\i2c.c: 103: }
      000409 1E 10            [ 2]  705 	ldw	x, (16, sp)
      00040B 5B 13            [ 2]  706 	addw	sp, #19
      00040D FC               [ 2]  707 	jp	(x)
                                    708 	.area CODE
                                    709 	.area CONST
                                    710 	.area INITIALIZER
                                    711 	.area CABS (ABS)
