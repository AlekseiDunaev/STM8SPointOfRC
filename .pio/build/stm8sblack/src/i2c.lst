                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (Mac OS X x86_64)
                                      4 ;--------------------------------------------------------
                                      5 	.module i2c
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _I2C_GetFlagStatus
                                     12 	.globl _I2C_CheckEvent
                                     13 	.globl _I2C_SendData
                                     14 	.globl _I2C_Send7bitAddress
                                     15 	.globl _I2C_ReceiveData
                                     16 	.globl _I2C_AcknowledgeConfig
                                     17 	.globl _I2C_GenerateSTOP
                                     18 	.globl _I2C_GenerateSTART
                                     19 	.globl _I2C_Cmd
                                     20 	.globl _I2C_Init
                                     21 	.globl _I2C_DeInit
                                     22 	.globl _I2C_Setup
                                     23 	.globl _I2C_Send_Bytes
                                     24 	.globl _I2C_Read_Byte
                                     25 	.globl _I2C_Read_Bytes
                                     26 ;--------------------------------------------------------
                                     27 ; ram data
                                     28 ;--------------------------------------------------------
                                     29 	.area DATA
                                     30 ;--------------------------------------------------------
                                     31 ; ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area INITIALIZED
                                     34 ;--------------------------------------------------------
                                     35 ; absolute external ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area DABS (ABS)
                                     38 
                                     39 ; default segment ordering for linker
                                     40 	.area HOME
                                     41 	.area GSINIT
                                     42 	.area GSFINAL
                                     43 	.area CONST
                                     44 	.area INITIALIZER
                                     45 	.area CODE
                                     46 
                                     47 ;--------------------------------------------------------
                                     48 ; global & static initialisations
                                     49 ;--------------------------------------------------------
                                     50 	.area HOME
                                     51 	.area GSINIT
                                     52 	.area GSFINAL
                                     53 	.area GSINIT
                                     54 ;--------------------------------------------------------
                                     55 ; Home
                                     56 ;--------------------------------------------------------
                                     57 	.area HOME
                                     58 	.area HOME
                                     59 ;--------------------------------------------------------
                                     60 ; code
                                     61 ;--------------------------------------------------------
                                     62 	.area CODE
                                     63 ;	src/i2c.c: 8: void I2C_Setup(void) {
                                     64 ;	-----------------------------------------
                                     65 ;	 function I2C_Setup
                                     66 ;	-----------------------------------------
      000000                         67 _I2C_Setup:
                                     68 ;	src/i2c.c: 9: I2C_DeInit();
      000000 CDr00r00         [ 4]   69 	call	_I2C_DeInit
                                     70 ;	src/i2c.c: 12: I2C_Init(I2C_MAX_STANDARD_FREQ, I2C_ID_ADDRESS, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, I2C_MAX_INPUT_FREQ);
      000003 4B 10            [ 1]   71 	push	#0x10
      000005 4B 00            [ 1]   72 	push	#0x00
      000007 4B 01            [ 1]   73 	push	#0x01
      000009 4B 00            [ 1]   74 	push	#0x00
      00000B 4B EE            [ 1]   75 	push	#0xee
      00000D 4B 00            [ 1]   76 	push	#0x00
      00000F 4B A0            [ 1]   77 	push	#0xa0
      000011 4B 86            [ 1]   78 	push	#0x86
      000013 4B 01            [ 1]   79 	push	#0x01
      000015 4B 00            [ 1]   80 	push	#0x00
      000017 CDr00r00         [ 4]   81 	call	_I2C_Init
                                     82 ;	src/i2c.c: 13: I2C_Cmd(ENABLE);
      00001A A6 01            [ 1]   83 	ld	a, #0x01
                                     84 ;	src/i2c.c: 14: }
      00001C CCr00r00         [ 2]   85 	jp	_I2C_Cmd
                                     86 ;	src/i2c.c: 16: void I2C_Send_Bytes(uint8_t Addr, uint16_t countData, uint8_t* dataBuffer) {
                                     87 ;	-----------------------------------------
                                     88 ;	 function I2C_Send_Bytes
                                     89 ;	-----------------------------------------
      00001F                         90 _I2C_Send_Bytes:
      00001F 52 0F            [ 2]   91 	sub	sp, #15
      000021 6B 07            [ 1]   92 	ld	(0x07, sp), a
      000023 1F 05            [ 2]   93 	ldw	(0x05, sp), x
                                     94 ;	src/i2c.c: 18: while((I2C_GetFlagStatus(I2C_FLAG_BUSBUSY)) && (time_out--));//Проверяем занятость линии I2C.
      000025 AE 03 E8         [ 2]   95 	ldw	x, #0x03e8
      000028 1F 0E            [ 2]   96 	ldw	(0x0e, sp), x
      00002A 5F               [ 1]   97 	clrw	x
      00002B 1F 0C            [ 2]   98 	ldw	(0x0c, sp), x
      00002D                         99 00102$:
      00002D AE 03 02         [ 2]  100 	ldw	x, #0x0302
      000030 CDr00r00         [ 4]  101 	call	_I2C_GetFlagStatus
      000033 4D               [ 1]  102 	tnz	a
      000034 27 1E            [ 1]  103 	jreq	00104$
      000036 16 0E            [ 2]  104 	ldw	y, (0x0e, sp)
      000038 17 0A            [ 2]  105 	ldw	(0x0a, sp), y
      00003A 16 0C            [ 2]  106 	ldw	y, (0x0c, sp)
      00003C 17 08            [ 2]  107 	ldw	(0x08, sp), y
      00003E 1E 0E            [ 2]  108 	ldw	x, (0x0e, sp)
      000040 1D 00 01         [ 2]  109 	subw	x, #0x0001
      000043 1F 0E            [ 2]  110 	ldw	(0x0e, sp), x
      000045 1E 0C            [ 2]  111 	ldw	x, (0x0c, sp)
      000047 24 01            [ 1]  112 	jrnc	00208$
      000049 5A               [ 2]  113 	decw	x
      00004A                        114 00208$:
      00004A 1F 0C            [ 2]  115 	ldw	(0x0c, sp), x
      00004C 1E 0A            [ 2]  116 	ldw	x, (0x0a, sp)
      00004E 26 DD            [ 1]  117 	jrne	00102$
      000050 1E 08            [ 2]  118 	ldw	x, (0x08, sp)
      000052 26 D9            [ 1]  119 	jrne	00102$
      000054                        120 00104$:
                                    121 ;	src/i2c.c: 19: I2C_GenerateSTART(ENABLE);//Запуск I2C для передачи данных.
      000054 A6 01            [ 1]  122 	ld	a, #0x01
      000056 CDr00r00         [ 4]  123 	call	_I2C_GenerateSTART
                                    124 ;	src/i2c.c: 21: while((!I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT)) && (time_out--));//Ждём установки бита MASTER.
      000059 AE 03 E8         [ 2]  125 	ldw	x, #0x03e8
      00005C 1F 0E            [ 2]  126 	ldw	(0x0e, sp), x
      00005E 5F               [ 1]  127 	clrw	x
      00005F                        128 00106$:
      00005F 89               [ 2]  129 	pushw	x
      000060 AE 03 01         [ 2]  130 	ldw	x, #0x0301
      000063 CDr00r00         [ 4]  131 	call	_I2C_CheckEvent
      000066 85               [ 2]  132 	popw	x
      000067 4D               [ 1]  133 	tnz	a
      000068 26 19            [ 1]  134 	jrne	00108$
      00006A 1F 08            [ 2]  135 	ldw	(0x08, sp), x
      00006C 16 0E            [ 2]  136 	ldw	y, (0x0e, sp)
      00006E 17 0A            [ 2]  137 	ldw	(0x0a, sp), y
      000070 16 0E            [ 2]  138 	ldw	y, (0x0e, sp)
      000072 72 A2 00 01      [ 2]  139 	subw	y, #0x0001
      000076 17 0E            [ 2]  140 	ldw	(0x0e, sp), y
      000078 24 01            [ 1]  141 	jrnc	00212$
      00007A 5A               [ 2]  142 	decw	x
      00007B                        143 00212$:
      00007B 16 0A            [ 2]  144 	ldw	y, (0x0a, sp)
      00007D 26 E0            [ 1]  145 	jrne	00106$
      00007F 16 08            [ 2]  146 	ldw	y, (0x08, sp)
      000081 26 DC            [ 1]  147 	jrne	00106$
      000083                        148 00108$:
                                    149 ;	src/i2c.c: 22: I2C_Send7bitAddress((uint8_t)Addr, I2C_DIRECTION_TX);//Отсылаем адрес вызываемого устройства.
      000083 4B 00            [ 1]  150 	push	#0x00
      000085 7B 08            [ 1]  151 	ld	a, (0x08, sp)
      000087 CDr00r00         [ 4]  152 	call	_I2C_Send7bitAddress
                                    153 ;	src/i2c.c: 24: while((!I2C_GetFlagStatus(I2C_FLAG_ADDRESSSENTMATCHED)) && (time_out--));//Ждём когда нужное устройство подтвердит.
      00008A AE 03 E8         [ 2]  154 	ldw	x, #0x03e8
      00008D 1F 0E            [ 2]  155 	ldw	(0x0e, sp), x
      00008F 5F               [ 1]  156 	clrw	x
      000090                        157 00110$:
      000090 89               [ 2]  158 	pushw	x
      000091 AE 01 02         [ 2]  159 	ldw	x, #0x0102
      000094 CDr00r00         [ 4]  160 	call	_I2C_GetFlagStatus
      000097 85               [ 2]  161 	popw	x
      000098 4D               [ 1]  162 	tnz	a
      000099 26 19            [ 1]  163 	jrne	00112$
      00009B 1F 08            [ 2]  164 	ldw	(0x08, sp), x
      00009D 16 0E            [ 2]  165 	ldw	y, (0x0e, sp)
      00009F 17 0A            [ 2]  166 	ldw	(0x0a, sp), y
      0000A1 16 0E            [ 2]  167 	ldw	y, (0x0e, sp)
      0000A3 72 A2 00 01      [ 2]  168 	subw	y, #0x0001
      0000A7 17 0E            [ 2]  169 	ldw	(0x0e, sp), y
      0000A9 24 01            [ 1]  170 	jrnc	00216$
      0000AB 5A               [ 2]  171 	decw	x
      0000AC                        172 00216$:
      0000AC 16 0A            [ 2]  173 	ldw	y, (0x0a, sp)
      0000AE 26 E0            [ 1]  174 	jrne	00110$
      0000B0 16 08            [ 2]  175 	ldw	y, (0x08, sp)
      0000B2 26 DC            [ 1]  176 	jrne	00110$
      0000B4                        177 00112$:
                                    178 ;	src/i2c.c: 25: (void)I2C->SR1; (void)I2C->SR3;//Комбинация для сброса ADDR.
      0000B4 C6 52 17         [ 1]  179 	ld	a, 0x5217
      0000B7 C6 52 19         [ 1]  180 	ld	a, 0x5219
                                    181 ;	src/i2c.c: 26: while(countData) {//Повторяем пока не отправятся все данные.
      0000BA 16 12            [ 2]  182 	ldw	y, (0x12, sp)
      0000BC 17 08            [ 2]  183 	ldw	(0x08, sp), y
      0000BE 16 05            [ 2]  184 	ldw	y, (0x05, sp)
      0000C0 17 0A            [ 2]  185 	ldw	(0x0a, sp), y
      0000C2                        186 00117$:
      0000C2 1E 0A            [ 2]  187 	ldw	x, (0x0a, sp)
      0000C4 27 36            [ 1]  188 	jreq	00119$
                                    189 ;	src/i2c.c: 28: while(!(I2C->SR1 & 128) && (time_out--));//Ждём когда буфер передающего регистра будет пуст.
      0000C6 AE 03 E8         [ 2]  190 	ldw	x, #0x03e8
      0000C9 1F 0E            [ 2]  191 	ldw	(0x0e, sp), x
      0000CB 5F               [ 1]  192 	clrw	x
      0000CC                        193 00114$:
      0000CC C6 52 17         [ 1]  194 	ld	a, 0x5217
      0000CF 2B 19            [ 1]  195 	jrmi	00116$
      0000D1 1F 01            [ 2]  196 	ldw	(0x01, sp), x
      0000D3 16 0E            [ 2]  197 	ldw	y, (0x0e, sp)
      0000D5 17 03            [ 2]  198 	ldw	(0x03, sp), y
      0000D7 16 0E            [ 2]  199 	ldw	y, (0x0e, sp)
      0000D9 72 A2 00 01      [ 2]  200 	subw	y, #0x0001
      0000DD 17 0E            [ 2]  201 	ldw	(0x0e, sp), y
      0000DF 24 01            [ 1]  202 	jrnc	00221$
      0000E1 5A               [ 2]  203 	decw	x
      0000E2                        204 00221$:
      0000E2 16 03            [ 2]  205 	ldw	y, (0x03, sp)
      0000E4 26 E6            [ 1]  206 	jrne	00114$
      0000E6 16 01            [ 2]  207 	ldw	y, (0x01, sp)
      0000E8 26 E2            [ 1]  208 	jrne	00114$
      0000EA                        209 00116$:
                                    210 ;	src/i2c.c: 29: I2C_SendData(*dataBuffer);
      0000EA 1E 08            [ 2]  211 	ldw	x, (0x08, sp)
      0000EC F6               [ 1]  212 	ld	a, (x)
      0000ED CDr00r00         [ 4]  213 	call	_I2C_SendData
                                    214 ;	src/i2c.c: 30: *dataBuffer++;
      0000F0 1E 08            [ 2]  215 	ldw	x, (0x08, sp)
      0000F2 5C               [ 1]  216 	incw	x
      0000F3 1F 08            [ 2]  217 	ldw	(0x08, sp), x
                                    218 ;	src/i2c.c: 31: countData--;
      0000F5 1E 0A            [ 2]  219 	ldw	x, (0x0a, sp)
      0000F7 5A               [ 2]  220 	decw	x
      0000F8 1F 0A            [ 2]  221 	ldw	(0x0a, sp), x
      0000FA 20 C6            [ 2]  222 	jra	00117$
      0000FC                        223 00119$:
                                    224 ;	src/i2c.c: 34: while((!I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED)) && (time_out--));//Ждём окончания отправки данных.
      0000FC AE 03 E8         [ 2]  225 	ldw	x, #0x03e8
      0000FF 1F 0E            [ 2]  226 	ldw	(0x0e, sp), x
      000101 5F               [ 1]  227 	clrw	x
      000102                        228 00121$:
      000102 89               [ 2]  229 	pushw	x
      000103 AE 07 84         [ 2]  230 	ldw	x, #0x0784
      000106 CDr00r00         [ 4]  231 	call	_I2C_CheckEvent
      000109 85               [ 2]  232 	popw	x
      00010A 4D               [ 1]  233 	tnz	a
      00010B 26 19            [ 1]  234 	jrne	00123$
      00010D 1F 08            [ 2]  235 	ldw	(0x08, sp), x
      00010F 16 0E            [ 2]  236 	ldw	y, (0x0e, sp)
      000111 17 0A            [ 2]  237 	ldw	(0x0a, sp), y
      000113 16 0E            [ 2]  238 	ldw	y, (0x0e, sp)
      000115 72 A2 00 01      [ 2]  239 	subw	y, #0x0001
      000119 17 0E            [ 2]  240 	ldw	(0x0e, sp), y
      00011B 24 01            [ 1]  241 	jrnc	00226$
      00011D 5A               [ 2]  242 	decw	x
      00011E                        243 00226$:
      00011E 16 0A            [ 2]  244 	ldw	y, (0x0a, sp)
      000120 26 E0            [ 1]  245 	jrne	00121$
      000122 16 08            [ 2]  246 	ldw	y, (0x08, sp)
      000124 26 DC            [ 1]  247 	jrne	00121$
      000126                        248 00123$:
                                    249 ;	src/i2c.c: 35: I2C_GenerateSTOP(ENABLE);//Установка STOP бита на линии.
      000126 A6 01            [ 1]  250 	ld	a, #0x01
      000128 CDr00r00         [ 4]  251 	call	_I2C_GenerateSTOP
                                    252 ;	src/i2c.c: 37: while((I2C->CR2 & I2C_CR2_STOP) && (time_out--));//Ждём остановки передачи и STOP на линии.
      00012B AE 03 E8         [ 2]  253 	ldw	x, #0x03e8
      00012E 1F 0E            [ 2]  254 	ldw	(0x0e, sp), x
      000130 5F               [ 1]  255 	clrw	x
      000131                        256 00125$:
      000131 C6 52 11         [ 1]  257 	ld	a, 0x5211
      000134 A5 02            [ 1]  258 	bcp	a, #0x02
      000136 27 20            [ 1]  259 	jreq	00128$
      000138 1F 08            [ 2]  260 	ldw	(0x08, sp), x
      00013A 7B 0E            [ 1]  261 	ld	a, (0x0e, sp)
      00013C 88               [ 1]  262 	push	a
      00013D 7B 10            [ 1]  263 	ld	a, (0x10, sp)
      00013F 6B 0C            [ 1]  264 	ld	(0x0c, sp), a
      000141 84               [ 1]  265 	pop	a
      000142 16 0E            [ 2]  266 	ldw	y, (0x0e, sp)
      000144 72 A2 00 01      [ 2]  267 	subw	y, #0x0001
      000148 17 0E            [ 2]  268 	ldw	(0x0e, sp), y
      00014A 24 01            [ 1]  269 	jrnc	00230$
      00014C 5A               [ 2]  270 	decw	x
      00014D                        271 00230$:
      00014D 0D 0B            [ 1]  272 	tnz	(0x0b, sp)
      00014F 26 E0            [ 1]  273 	jrne	00125$
      000151 4D               [ 1]  274 	tnz	a
      000152 26 DD            [ 1]  275 	jrne	00125$
      000154 16 08            [ 2]  276 	ldw	y, (0x08, sp)
      000156 26 D9            [ 1]  277 	jrne	00125$
      000158                        278 00128$:
                                    279 ;	src/i2c.c: 38: }
      000158 1E 10            [ 2]  280 	ldw	x, (16, sp)
      00015A 5B 13            [ 2]  281 	addw	sp, #19
      00015C FC               [ 2]  282 	jp	(x)
                                    283 ;	src/i2c.c: 40: uint8_t I2C_Read_Byte(uint8_t Addr) {
                                    284 ;	-----------------------------------------
                                    285 ;	 function I2C_Read_Byte
                                    286 ;	-----------------------------------------
      00015D                        287 _I2C_Read_Byte:
      00015D 52 0A            [ 2]  288 	sub	sp, #10
      00015F 6B 06            [ 1]  289 	ld	(0x06, sp), a
                                    290 ;	src/i2c.c: 42: while((I2C_GetFlagStatus(I2C_FLAG_BUSBUSY)) && (time_out--));//Проверяем занятость линии I2C.
      000161 AE 03 E8         [ 2]  291 	ldw	x, #0x03e8
      000164 1F 09            [ 2]  292 	ldw	(0x09, sp), x
      000166 5F               [ 1]  293 	clrw	x
      000167 1F 07            [ 2]  294 	ldw	(0x07, sp), x
      000169                        295 00102$:
      000169 AE 03 02         [ 2]  296 	ldw	x, #0x0302
      00016C CDr00r00         [ 4]  297 	call	_I2C_GetFlagStatus
      00016F 4D               [ 1]  298 	tnz	a
      000170 27 1E            [ 1]  299 	jreq	00104$
      000172 16 09            [ 2]  300 	ldw	y, (0x09, sp)
      000174 17 04            [ 2]  301 	ldw	(0x04, sp), y
      000176 16 07            [ 2]  302 	ldw	y, (0x07, sp)
      000178 17 02            [ 2]  303 	ldw	(0x02, sp), y
      00017A 1E 09            [ 2]  304 	ldw	x, (0x09, sp)
      00017C 1D 00 01         [ 2]  305 	subw	x, #0x0001
      00017F 1F 09            [ 2]  306 	ldw	(0x09, sp), x
      000181 1E 07            [ 2]  307 	ldw	x, (0x07, sp)
      000183 24 01            [ 1]  308 	jrnc	00179$
      000185 5A               [ 2]  309 	decw	x
      000186                        310 00179$:
      000186 1F 07            [ 2]  311 	ldw	(0x07, sp), x
      000188 1E 04            [ 2]  312 	ldw	x, (0x04, sp)
      00018A 26 DD            [ 1]  313 	jrne	00102$
      00018C 1E 02            [ 2]  314 	ldw	x, (0x02, sp)
      00018E 26 D9            [ 1]  315 	jrne	00102$
      000190                        316 00104$:
                                    317 ;	src/i2c.c: 43: I2C_GenerateSTART(ENABLE);//Запуск I2C для передачи данных.
      000190 A6 01            [ 1]  318 	ld	a, #0x01
      000192 CDr00r00         [ 4]  319 	call	_I2C_GenerateSTART
                                    320 ;	src/i2c.c: 45: while((!I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT)) && (time_out--));//Ждём установки бита MASTER.
      000195 AE 03 E8         [ 2]  321 	ldw	x, #0x03e8
      000198 1F 09            [ 2]  322 	ldw	(0x09, sp), x
      00019A 5F               [ 1]  323 	clrw	x
      00019B                        324 00106$:
      00019B 89               [ 2]  325 	pushw	x
      00019C AE 03 01         [ 2]  326 	ldw	x, #0x0301
      00019F CDr00r00         [ 4]  327 	call	_I2C_CheckEvent
      0001A2 85               [ 2]  328 	popw	x
      0001A3 4D               [ 1]  329 	tnz	a
      0001A4 26 19            [ 1]  330 	jrne	00108$
      0001A6 1F 02            [ 2]  331 	ldw	(0x02, sp), x
      0001A8 16 09            [ 2]  332 	ldw	y, (0x09, sp)
      0001AA 17 04            [ 2]  333 	ldw	(0x04, sp), y
      0001AC 16 09            [ 2]  334 	ldw	y, (0x09, sp)
      0001AE 72 A2 00 01      [ 2]  335 	subw	y, #0x0001
      0001B2 17 09            [ 2]  336 	ldw	(0x09, sp), y
      0001B4 24 01            [ 1]  337 	jrnc	00183$
      0001B6 5A               [ 2]  338 	decw	x
      0001B7                        339 00183$:
      0001B7 16 04            [ 2]  340 	ldw	y, (0x04, sp)
      0001B9 26 E0            [ 1]  341 	jrne	00106$
      0001BB 16 02            [ 2]  342 	ldw	y, (0x02, sp)
      0001BD 26 DC            [ 1]  343 	jrne	00106$
      0001BF                        344 00108$:
                                    345 ;	src/i2c.c: 46: I2C_Send7bitAddress((uint8_t)Addr, I2C_DIRECTION_RX);//Отсылаем адрес вызываемого устройства и бит приёма данных.
      0001BF 4B 01            [ 1]  346 	push	#0x01
      0001C1 7B 07            [ 1]  347 	ld	a, (0x07, sp)
      0001C3 CDr00r00         [ 4]  348 	call	_I2C_Send7bitAddress
                                    349 ;	src/i2c.c: 48: while((!I2C_GetFlagStatus(I2C_FLAG_ADDRESSSENTMATCHED)) && (time_out--));//Ждём когда нужное устройство подтвердит.
      0001C6 AE 03 E8         [ 2]  350 	ldw	x, #0x03e8
      0001C9 1F 09            [ 2]  351 	ldw	(0x09, sp), x
      0001CB 5F               [ 1]  352 	clrw	x
      0001CC                        353 00110$:
      0001CC 89               [ 2]  354 	pushw	x
      0001CD AE 01 02         [ 2]  355 	ldw	x, #0x0102
      0001D0 CDr00r00         [ 4]  356 	call	_I2C_GetFlagStatus
      0001D3 85               [ 2]  357 	popw	x
      0001D4 4D               [ 1]  358 	tnz	a
      0001D5 26 19            [ 1]  359 	jrne	00112$
      0001D7 1F 02            [ 2]  360 	ldw	(0x02, sp), x
      0001D9 16 09            [ 2]  361 	ldw	y, (0x09, sp)
      0001DB 17 04            [ 2]  362 	ldw	(0x04, sp), y
      0001DD 16 09            [ 2]  363 	ldw	y, (0x09, sp)
      0001DF 72 A2 00 01      [ 2]  364 	subw	y, #0x0001
      0001E3 17 09            [ 2]  365 	ldw	(0x09, sp), y
      0001E5 24 01            [ 1]  366 	jrnc	00187$
      0001E7 5A               [ 2]  367 	decw	x
      0001E8                        368 00187$:
      0001E8 16 04            [ 2]  369 	ldw	y, (0x04, sp)
      0001EA 26 E0            [ 1]  370 	jrne	00110$
      0001EC 16 02            [ 2]  371 	ldw	y, (0x02, sp)
      0001EE 26 DC            [ 1]  372 	jrne	00110$
      0001F0                        373 00112$:
                                    374 ;	src/i2c.c: 51: I2C_AcknowledgeConfig(I2C_ACK_NONE);//Отключаем ACK после приёма последнего байта, что бы не отправлялись данные.
      0001F0 4F               [ 1]  375 	clr	a
      0001F1 CDr00r00         [ 4]  376 	call	_I2C_AcknowledgeConfig
                                    377 ;	src/i2c.c: 53: (void)I2C->SR1; (void)I2C->SR3;//Комбинация для сброса ADDR.
      0001F4 C6 52 17         [ 1]  378 	ld	a, 0x5217
      0001F7 C6 52 19         [ 1]  379 	ld	a, 0x5219
                                    380 ;	src/i2c.c: 55: I2C_GenerateSTOP(ENABLE);//Установка STOP бита на линии.
      0001FA A6 01            [ 1]  381 	ld	a, #0x01
      0001FC CDr00r00         [ 4]  382 	call	_I2C_GenerateSTOP
                                    383 ;	src/i2c.c: 58: while((!I2C_GetFlagStatus(I2C_FLAG_RXNOTEMPTY)) && (time_out--));//Ждём когда придут данные.
      0001FF AE 03 E8         [ 2]  384 	ldw	x, #0x03e8
      000202 1F 09            [ 2]  385 	ldw	(0x09, sp), x
      000204 5F               [ 1]  386 	clrw	x
      000205                        387 00114$:
      000205 89               [ 2]  388 	pushw	x
      000206 AE 01 40         [ 2]  389 	ldw	x, #0x0140
      000209 CDr00r00         [ 4]  390 	call	_I2C_GetFlagStatus
      00020C 85               [ 2]  391 	popw	x
      00020D 4D               [ 1]  392 	tnz	a
      00020E 26 19            [ 1]  393 	jrne	00116$
      000210 1F 02            [ 2]  394 	ldw	(0x02, sp), x
      000212 16 09            [ 2]  395 	ldw	y, (0x09, sp)
      000214 17 04            [ 2]  396 	ldw	(0x04, sp), y
      000216 16 09            [ 2]  397 	ldw	y, (0x09, sp)
      000218 72 A2 00 01      [ 2]  398 	subw	y, #0x0001
      00021C 17 09            [ 2]  399 	ldw	(0x09, sp), y
      00021E 24 01            [ 1]  400 	jrnc	00191$
      000220 5A               [ 2]  401 	decw	x
      000221                        402 00191$:
      000221 16 04            [ 2]  403 	ldw	y, (0x04, sp)
      000223 26 E0            [ 1]  404 	jrne	00114$
      000225 16 02            [ 2]  405 	ldw	y, (0x02, sp)
      000227 26 DC            [ 1]  406 	jrne	00114$
      000229                        407 00116$:
                                    408 ;	src/i2c.c: 60: uint8_t read_byte = I2C_ReceiveData();//Читаем данные.
      000229 CDr00r00         [ 4]  409 	call	_I2C_ReceiveData
      00022C 6B 01            [ 1]  410 	ld	(0x01, sp), a
                                    411 ;	src/i2c.c: 63: while((I2C->CR2 & I2C_CR2_STOP)&& (time_out--));//Ждём остановки передачи и STOP на линии.
      00022E AE 03 E8         [ 2]  412 	ldw	x, #0x03e8
      000231 1F 09            [ 2]  413 	ldw	(0x09, sp), x
      000233 5F               [ 1]  414 	clrw	x
      000234                        415 00118$:
      000234 72 03 52 11 19   [ 2]  416 	btjf	0x5211, #1, 00120$
      000239 1F 02            [ 2]  417 	ldw	(0x02, sp), x
      00023B 16 09            [ 2]  418 	ldw	y, (0x09, sp)
      00023D 17 04            [ 2]  419 	ldw	(0x04, sp), y
      00023F 16 09            [ 2]  420 	ldw	y, (0x09, sp)
      000241 72 A2 00 01      [ 2]  421 	subw	y, #0x0001
      000245 17 09            [ 2]  422 	ldw	(0x09, sp), y
      000247 24 01            [ 1]  423 	jrnc	00195$
      000249 5A               [ 2]  424 	decw	x
      00024A                        425 00195$:
      00024A 16 04            [ 2]  426 	ldw	y, (0x04, sp)
      00024C 26 E6            [ 1]  427 	jrne	00118$
      00024E 16 02            [ 2]  428 	ldw	y, (0x02, sp)
      000250 26 E2            [ 1]  429 	jrne	00118$
      000252                        430 00120$:
                                    431 ;	src/i2c.c: 64: I2C_AcknowledgeConfig(I2C_ACK_CURR);//Устанавливаем контроль бита ACK.
      000252 A6 01            [ 1]  432 	ld	a, #0x01
      000254 CDr00r00         [ 4]  433 	call	_I2C_AcknowledgeConfig
                                    434 ;	src/i2c.c: 65: return read_byte;
      000257 7B 01            [ 1]  435 	ld	a, (0x01, sp)
                                    436 ;	src/i2c.c: 66: }
      000259 5B 0A            [ 2]  437 	addw	sp, #10
      00025B 81               [ 4]  438 	ret
                                    439 ;	src/i2c.c: 69: void I2C_Read_Bytes(uint8_t Addr, uint16_t countData, uint8_t* dataBuffer) {
                                    440 ;	-----------------------------------------
                                    441 ;	 function I2C_Read_Bytes
                                    442 ;	-----------------------------------------
      00025C                        443 _I2C_Read_Bytes:
      00025C 52 0F            [ 2]  444 	sub	sp, #15
      00025E 6B 07            [ 1]  445 	ld	(0x07, sp), a
      000260 1F 05            [ 2]  446 	ldw	(0x05, sp), x
                                    447 ;	src/i2c.c: 71: while((I2C_GetFlagStatus(I2C_FLAG_BUSBUSY)) && (time_out--));//Проверяем занятость линии I2C.
      000262 AE 03 E8         [ 2]  448 	ldw	x, #0x03e8
      000265 1F 0E            [ 2]  449 	ldw	(0x0e, sp), x
      000267 5F               [ 1]  450 	clrw	x
      000268 1F 0C            [ 2]  451 	ldw	(0x0c, sp), x
      00026A                        452 00102$:
      00026A AE 03 02         [ 2]  453 	ldw	x, #0x0302
      00026D CDr00r00         [ 4]  454 	call	_I2C_GetFlagStatus
      000270 4D               [ 1]  455 	tnz	a
      000271 27 1E            [ 1]  456 	jreq	00104$
      000273 16 0E            [ 2]  457 	ldw	y, (0x0e, sp)
      000275 17 0A            [ 2]  458 	ldw	(0x0a, sp), y
      000277 16 0C            [ 2]  459 	ldw	y, (0x0c, sp)
      000279 17 08            [ 2]  460 	ldw	(0x08, sp), y
      00027B 1E 0E            [ 2]  461 	ldw	x, (0x0e, sp)
      00027D 1D 00 01         [ 2]  462 	subw	x, #0x0001
      000280 1F 0E            [ 2]  463 	ldw	(0x0e, sp), x
      000282 1E 0C            [ 2]  464 	ldw	x, (0x0c, sp)
      000284 24 01            [ 1]  465 	jrnc	00229$
      000286 5A               [ 2]  466 	decw	x
      000287                        467 00229$:
      000287 1F 0C            [ 2]  468 	ldw	(0x0c, sp), x
      000289 1E 0A            [ 2]  469 	ldw	x, (0x0a, sp)
      00028B 26 DD            [ 1]  470 	jrne	00102$
      00028D 1E 08            [ 2]  471 	ldw	x, (0x08, sp)
      00028F 26 D9            [ 1]  472 	jrne	00102$
      000291                        473 00104$:
                                    474 ;	src/i2c.c: 72: I2C_GenerateSTART(ENABLE);//Запуск I2C для передачи данных.
      000291 A6 01            [ 1]  475 	ld	a, #0x01
      000293 CDr00r00         [ 4]  476 	call	_I2C_GenerateSTART
                                    477 ;	src/i2c.c: 74: while((!I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT)) && (time_out--));//Ждём установки бита MASTER.
      000296 AE 03 E8         [ 2]  478 	ldw	x, #0x03e8
      000299 1F 0E            [ 2]  479 	ldw	(0x0e, sp), x
      00029B 5F               [ 1]  480 	clrw	x
      00029C                        481 00106$:
      00029C 89               [ 2]  482 	pushw	x
      00029D AE 03 01         [ 2]  483 	ldw	x, #0x0301
      0002A0 CDr00r00         [ 4]  484 	call	_I2C_CheckEvent
      0002A3 85               [ 2]  485 	popw	x
      0002A4 4D               [ 1]  486 	tnz	a
      0002A5 26 19            [ 1]  487 	jrne	00108$
      0002A7 1F 08            [ 2]  488 	ldw	(0x08, sp), x
      0002A9 16 0E            [ 2]  489 	ldw	y, (0x0e, sp)
      0002AB 17 0A            [ 2]  490 	ldw	(0x0a, sp), y
      0002AD 16 0E            [ 2]  491 	ldw	y, (0x0e, sp)
      0002AF 72 A2 00 01      [ 2]  492 	subw	y, #0x0001
      0002B3 17 0E            [ 2]  493 	ldw	(0x0e, sp), y
      0002B5 24 01            [ 1]  494 	jrnc	00233$
      0002B7 5A               [ 2]  495 	decw	x
      0002B8                        496 00233$:
      0002B8 16 0A            [ 2]  497 	ldw	y, (0x0a, sp)
      0002BA 26 E0            [ 1]  498 	jrne	00106$
      0002BC 16 08            [ 2]  499 	ldw	y, (0x08, sp)
      0002BE 26 DC            [ 1]  500 	jrne	00106$
      0002C0                        501 00108$:
                                    502 ;	src/i2c.c: 75: I2C_Send7bitAddress((uint8_t)Addr, I2C_DIRECTION_RX);//Отсылаем адрес вызываемого устройства.
      0002C0 4B 01            [ 1]  503 	push	#0x01
      0002C2 7B 08            [ 1]  504 	ld	a, (0x08, sp)
      0002C4 CDr00r00         [ 4]  505 	call	_I2C_Send7bitAddress
                                    506 ;	src/i2c.c: 77: while((!I2C_GetFlagStatus(I2C_FLAG_ADDRESSSENTMATCHED)) && (time_out--));//Ждём когда нужное устройство подтвердит.
      0002C7 AE 03 E8         [ 2]  507 	ldw	x, #0x03e8
      0002CA 1F 0E            [ 2]  508 	ldw	(0x0e, sp), x
      0002CC 5F               [ 1]  509 	clrw	x
      0002CD                        510 00110$:
      0002CD 89               [ 2]  511 	pushw	x
      0002CE AE 01 02         [ 2]  512 	ldw	x, #0x0102
      0002D1 CDr00r00         [ 4]  513 	call	_I2C_GetFlagStatus
      0002D4 85               [ 2]  514 	popw	x
      0002D5 4D               [ 1]  515 	tnz	a
      0002D6 26 19            [ 1]  516 	jrne	00112$
      0002D8 1F 08            [ 2]  517 	ldw	(0x08, sp), x
      0002DA 16 0E            [ 2]  518 	ldw	y, (0x0e, sp)
      0002DC 17 0A            [ 2]  519 	ldw	(0x0a, sp), y
      0002DE 16 0E            [ 2]  520 	ldw	y, (0x0e, sp)
      0002E0 72 A2 00 01      [ 2]  521 	subw	y, #0x0001
      0002E4 17 0E            [ 2]  522 	ldw	(0x0e, sp), y
      0002E6 24 01            [ 1]  523 	jrnc	00237$
      0002E8 5A               [ 2]  524 	decw	x
      0002E9                        525 00237$:
      0002E9 16 0A            [ 2]  526 	ldw	y, (0x0a, sp)
      0002EB 26 E0            [ 1]  527 	jrne	00110$
      0002ED 16 08            [ 2]  528 	ldw	y, (0x08, sp)
      0002EF 26 DC            [ 1]  529 	jrne	00110$
      0002F1                        530 00112$:
                                    531 ;	src/i2c.c: 79: (void)I2C->SR1; (void)I2C->SR3;//Комбинация для сброса ADDR.
      0002F1 C6 52 17         [ 1]  532 	ld	a, 0x5217
      0002F4 C6 52 19         [ 1]  533 	ld	a, 0x5219
                                    534 ;	src/i2c.c: 80: if(countData > 3) {//Если принимаем больше трёх байтов.
      0002F7 1E 05            [ 2]  535 	ldw	x, (0x05, sp)
      0002F9 A3 00 03         [ 2]  536 	cpw	x, #0x0003
      0002FC 23 55            [ 2]  537 	jrule	00147$
                                    538 ;	src/i2c.c: 81: while(countData > 3) {
      0002FE 16 12            [ 2]  539 	ldw	y, (0x12, sp)
      000300 17 08            [ 2]  540 	ldw	(0x08, sp), y
      000302 16 05            [ 2]  541 	ldw	y, (0x05, sp)
      000304 17 0A            [ 2]  542 	ldw	(0x0a, sp), y
      000306                        543 00117$:
      000306 1E 0A            [ 2]  544 	ldw	x, (0x0a, sp)
      000308 A3 00 03         [ 2]  545 	cpw	x, #0x0003
      00030B 23 42            [ 2]  546 	jrule	00159$
                                    547 ;	src/i2c.c: 83: while ((!I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)) && (time_out--));//Ждём отправку всех данных устройству.
      00030D AE 03 E8         [ 2]  548 	ldw	x, #0x03e8
      000310 1F 0E            [ 2]  549 	ldw	(0x0e, sp), x
      000312 5F               [ 1]  550 	clrw	x
      000313 1F 0C            [ 2]  551 	ldw	(0x0c, sp), x
      000315                        552 00114$:
      000315 AE 01 04         [ 2]  553 	ldw	x, #0x0104
      000318 CDr00r00         [ 4]  554 	call	_I2C_GetFlagStatus
      00031B 6B 04            [ 1]  555 	ld	(0x04, sp), a
      00031D 26 1E            [ 1]  556 	jrne	00116$
      00031F 16 0E            [ 2]  557 	ldw	y, (0x0e, sp)
      000321 17 03            [ 2]  558 	ldw	(0x03, sp), y
      000323 16 0C            [ 2]  559 	ldw	y, (0x0c, sp)
      000325 17 01            [ 2]  560 	ldw	(0x01, sp), y
      000327 1E 0E            [ 2]  561 	ldw	x, (0x0e, sp)
      000329 1D 00 01         [ 2]  562 	subw	x, #0x0001
      00032C 1F 0E            [ 2]  563 	ldw	(0x0e, sp), x
      00032E 1E 0C            [ 2]  564 	ldw	x, (0x0c, sp)
      000330 24 01            [ 1]  565 	jrnc	00243$
      000332 5A               [ 2]  566 	decw	x
      000333                        567 00243$:
      000333 1F 0C            [ 2]  568 	ldw	(0x0c, sp), x
      000335 1E 03            [ 2]  569 	ldw	x, (0x03, sp)
      000337 26 DC            [ 1]  570 	jrne	00114$
      000339 1E 01            [ 2]  571 	ldw	x, (0x01, sp)
      00033B 26 D8            [ 1]  572 	jrne	00114$
      00033D                        573 00116$:
                                    574 ;	src/i2c.c: 84: *dataBuffer = I2C_ReceiveData();
      00033D CDr00r00         [ 4]  575 	call	_I2C_ReceiveData
      000340 1E 08            [ 2]  576 	ldw	x, (0x08, sp)
      000342 F7               [ 1]  577 	ld	(x), a
                                    578 ;	src/i2c.c: 85: *dataBuffer++;
      000343 1E 08            [ 2]  579 	ldw	x, (0x08, sp)
      000345 5C               [ 1]  580 	incw	x
      000346 1F 08            [ 2]  581 	ldw	(0x08, sp), x
                                    582 ;	src/i2c.c: 86: countData--;
      000348 1E 0A            [ 2]  583 	ldw	x, (0x0a, sp)
      00034A 5A               [ 2]  584 	decw	x
      00034B 1F 0A            [ 2]  585 	ldw	(0x0a, sp), x
      00034D 20 B7            [ 2]  586 	jra	00117$
      00034F                        587 00159$:
      00034F 16 08            [ 2]  588 	ldw	y, (0x08, sp)
      000351 17 12            [ 2]  589 	ldw	(0x12, sp), y
                                    590 ;	src/i2c.c: 90: while ((!I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)) && (time_out--));//Ждём отправку всех данных устройству.
      000353                        591 00147$:
      000353 AE 03 E8         [ 2]  592 	ldw	x, #0x03e8
      000356 1F 0E            [ 2]  593 	ldw	(0x0e, sp), x
      000358 5F               [ 1]  594 	clrw	x
      000359                        595 00123$:
      000359 89               [ 2]  596 	pushw	x
      00035A AE 01 04         [ 2]  597 	ldw	x, #0x0104
      00035D CDr00r00         [ 4]  598 	call	_I2C_GetFlagStatus
      000360 85               [ 2]  599 	popw	x
      000361 4D               [ 1]  600 	tnz	a
      000362 26 19            [ 1]  601 	jrne	00125$
      000364 1F 08            [ 2]  602 	ldw	(0x08, sp), x
      000366 16 0E            [ 2]  603 	ldw	y, (0x0e, sp)
      000368 17 0A            [ 2]  604 	ldw	(0x0a, sp), y
      00036A 16 0E            [ 2]  605 	ldw	y, (0x0e, sp)
      00036C 72 A2 00 01      [ 2]  606 	subw	y, #0x0001
      000370 17 0E            [ 2]  607 	ldw	(0x0e, sp), y
      000372 24 01            [ 1]  608 	jrnc	00248$
      000374 5A               [ 2]  609 	decw	x
      000375                        610 00248$:
      000375 16 0A            [ 2]  611 	ldw	y, (0x0a, sp)
      000377 26 E0            [ 1]  612 	jrne	00123$
      000379 16 08            [ 2]  613 	ldw	y, (0x08, sp)
      00037B 26 DC            [ 1]  614 	jrne	00123$
      00037D                        615 00125$:
                                    616 ;	src/i2c.c: 91: I2C_AcknowledgeConfig(I2C_ACK_NONE);//Отключаем ACK после приёма последнего байта, что бы не отправлялись данные.
      00037D 4F               [ 1]  617 	clr	a
      00037E CDr00r00         [ 4]  618 	call	_I2C_AcknowledgeConfig
                                    619 ;	src/i2c.c: 92: *dataBuffer = I2C_ReceiveData();
      000381 1E 12            [ 2]  620 	ldw	x, (0x12, sp)
      000383 89               [ 2]  621 	pushw	x
      000384 CDr00r00         [ 4]  622 	call	_I2C_ReceiveData
      000387 85               [ 2]  623 	popw	x
      000388 F7               [ 1]  624 	ld	(x), a
                                    625 ;	src/i2c.c: 93: *dataBuffer++;
      000389 5C               [ 1]  626 	incw	x
      00038A 1F 12            [ 2]  627 	ldw	(0x12, sp), x
                                    628 ;	src/i2c.c: 94: I2C_GenerateSTOP(ENABLE);//Установка STOP бита на линии.
      00038C A6 01            [ 1]  629 	ld	a, #0x01
      00038E CDr00r00         [ 4]  630 	call	_I2C_GenerateSTOP
                                    631 ;	src/i2c.c: 95: *dataBuffer = I2C_ReceiveData();
      000391 1E 12            [ 2]  632 	ldw	x, (0x12, sp)
      000393 89               [ 2]  633 	pushw	x
      000394 CDr00r00         [ 4]  634 	call	_I2C_ReceiveData
      000397 85               [ 2]  635 	popw	x
      000398 F7               [ 1]  636 	ld	(x), a
                                    637 ;	src/i2c.c: 96: *dataBuffer++;
      000399 5C               [ 1]  638 	incw	x
      00039A 1F 12            [ 2]  639 	ldw	(0x12, sp), x
                                    640 ;	src/i2c.c: 98: while((!I2C_GetFlagStatus(I2C_FLAG_RXNOTEMPTY)) && (time_out--));//Ждём когда придут данные.
      00039C AE 03 E8         [ 2]  641 	ldw	x, #0x03e8
      00039F 1F 0E            [ 2]  642 	ldw	(0x0e, sp), x
      0003A1 5F               [ 1]  643 	clrw	x
      0003A2                        644 00127$:
      0003A2 89               [ 2]  645 	pushw	x
      0003A3 AE 01 40         [ 2]  646 	ldw	x, #0x0140
      0003A6 CDr00r00         [ 4]  647 	call	_I2C_GetFlagStatus
      0003A9 85               [ 2]  648 	popw	x
      0003AA 4D               [ 1]  649 	tnz	a
      0003AB 26 19            [ 1]  650 	jrne	00129$
      0003AD 1F 08            [ 2]  651 	ldw	(0x08, sp), x
      0003AF 16 0E            [ 2]  652 	ldw	y, (0x0e, sp)
      0003B1 17 0A            [ 2]  653 	ldw	(0x0a, sp), y
      0003B3 16 0E            [ 2]  654 	ldw	y, (0x0e, sp)
      0003B5 72 A2 00 01      [ 2]  655 	subw	y, #0x0001
      0003B9 17 0E            [ 2]  656 	ldw	(0x0e, sp), y
      0003BB 24 01            [ 1]  657 	jrnc	00252$
      0003BD 5A               [ 2]  658 	decw	x
      0003BE                        659 00252$:
      0003BE 16 0A            [ 2]  660 	ldw	y, (0x0a, sp)
      0003C0 26 E0            [ 1]  661 	jrne	00127$
      0003C2 16 08            [ 2]  662 	ldw	y, (0x08, sp)
      0003C4 26 DC            [ 1]  663 	jrne	00127$
      0003C6                        664 00129$:
                                    665 ;	src/i2c.c: 99: *dataBuffer = I2C_ReceiveData();
      0003C6 1E 12            [ 2]  666 	ldw	x, (0x12, sp)
      0003C8 89               [ 2]  667 	pushw	x
      0003C9 CDr00r00         [ 4]  668 	call	_I2C_ReceiveData
      0003CC 85               [ 2]  669 	popw	x
      0003CD F7               [ 1]  670 	ld	(x), a
                                    671 ;	src/i2c.c: 101: while((I2C->CR2 & I2C_CR2_STOP) && (time_out--));//Ждём остановки передачи и STOP на линии.
      0003CE AE 03 E8         [ 2]  672 	ldw	x, #0x03e8
      0003D1 1F 0E            [ 2]  673 	ldw	(0x0e, sp), x
      0003D3 5F               [ 1]  674 	clrw	x
      0003D4                        675 00131$:
      0003D4 72 03 52 11 20   [ 2]  676 	btjf	0x5211, #1, 00133$
      0003D9 1F 08            [ 2]  677 	ldw	(0x08, sp), x
      0003DB 7B 0E            [ 1]  678 	ld	a, (0x0e, sp)
      0003DD 88               [ 1]  679 	push	a
      0003DE 7B 10            [ 1]  680 	ld	a, (0x10, sp)
      0003E0 6B 0C            [ 1]  681 	ld	(0x0c, sp), a
      0003E2 84               [ 1]  682 	pop	a
      0003E3 16 0E            [ 2]  683 	ldw	y, (0x0e, sp)
      0003E5 72 A2 00 01      [ 2]  684 	subw	y, #0x0001
      0003E9 17 0E            [ 2]  685 	ldw	(0x0e, sp), y
      0003EB 24 01            [ 1]  686 	jrnc	00256$
      0003ED 5A               [ 2]  687 	decw	x
      0003EE                        688 00256$:
      0003EE 0D 0B            [ 1]  689 	tnz	(0x0b, sp)
      0003F0 26 E2            [ 1]  690 	jrne	00131$
      0003F2 4D               [ 1]  691 	tnz	a
      0003F3 26 DF            [ 1]  692 	jrne	00131$
      0003F5 16 08            [ 2]  693 	ldw	y, (0x08, sp)
      0003F7 26 DB            [ 1]  694 	jrne	00131$
      0003F9                        695 00133$:
                                    696 ;	src/i2c.c: 102: I2C_AcknowledgeConfig(I2C_ACK_CURR);//Устанавливаем контроль бита ACK.
      0003F9 A6 01            [ 1]  697 	ld	a, #0x01
      0003FB CDr00r00         [ 4]  698 	call	_I2C_AcknowledgeConfig
                                    699 ;	src/i2c.c: 103: }
      0003FE 1E 10            [ 2]  700 	ldw	x, (16, sp)
      000400 5B 13            [ 2]  701 	addw	sp, #19
      000402 FC               [ 2]  702 	jp	(x)
                                    703 	.area CODE
                                    704 	.area CONST
                                    705 	.area INITIALIZER
                                    706 	.area CABS (ABS)
