                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (Mac OS X x86_64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _UART_Setup
                                     13 	.globl _GPIO_Setup
                                     14 	.globl _Clock_Setup
                                     15 	.globl _BME280_SetMode
                                     16 	.globl _BME280_SetOversamplingHum
                                     17 	.globl _BME280_SetOversamplingPressure
                                     18 	.globl _BME280_SetOversamplingTemper
                                     19 	.globl _BME280_SetFilter
                                     20 	.globl _BME280_ReadCoefficients
                                     21 	.globl _BME280_ReadStatus
                                     22 	.globl _BME280_ReadReg
                                     23 	.globl _BME280_WriteReg
                                     24 	.globl _BME280_Setup
                                     25 	.globl _Error
                                     26 	.globl _DS18X20_Setup
                                     27 	.globl _DS18X20_Get_Temperature
                                     28 	.globl _DS18X20_Read_ID
                                     29 	.globl _DS18X20_Reset
                                     30 	.globl _I2C_Setup
                                     31 	.globl _delay_ms
                                     32 	.globl _free
                                     33 	.globl _malloc
                                     34 	.globl _sprintf
                                     35 	.globl _printf
                                     36 	.globl _UART2_GetFlagStatus
                                     37 	.globl _UART2_SendData8
                                     38 	.globl _UART2_ReceiveData8
                                     39 	.globl _UART2_Init
                                     40 	.globl _UART2_DeInit
                                     41 	.globl _GPIO_WriteLow
                                     42 	.globl _GPIO_WriteHigh
                                     43 	.globl _GPIO_Init
                                     44 	.globl _GPIO_DeInit
                                     45 	.globl _CLK_GetFlagStatus
                                     46 	.globl _CLK_SYSCLKConfig
                                     47 	.globl _CLK_HSIPrescalerConfig
                                     48 	.globl _CLK_ClockSwitchConfig
                                     49 	.globl _CLK_PeripheralClockConfig
                                     50 	.globl _CLK_ClockSwitchCmd
                                     51 	.globl _CLK_LSICmd
                                     52 	.globl _CLK_HSICmd
                                     53 	.globl _CLK_HSECmd
                                     54 	.globl _CLK_DeInit
                                     55 	.globl _fBME280Temperature
                                     56 	.globl _fBME280Humidity
                                     57 	.globl _fAHTX0Temperature
                                     58 	.globl _fAHTX0Humidity
                                     59 	.globl _fDS18X20Temperature
                                     60 	.globl _str1
                                     61 	.globl _sString
                                     62 	.globl _iI2CRead
                                     63 	.globl _iI2CWrite
                                     64 	.globl _iDS18X20RomID
                                     65 	.globl _FloatToStr
                                     66 	.globl _putchar
                                     67 	.globl _getchar
                                     68 	.globl _assert_failed
                                     69 ;--------------------------------------------------------
                                     70 ; ram data
                                     71 ;--------------------------------------------------------
                                     72 	.area DATA
      000000                         73 _iDS18X20RomID::
      000000                         74 	.ds 8
      000008                         75 _iI2CWrite::
      000008                         76 	.ds 3
      00000B                         77 _iI2CRead::
      00000B                         78 	.ds 7
      000012                         79 _sString::
      000012                         80 	.ds 100
      000076                         81 _str1::
      000076                         82 	.ds 100
                                     83 ;--------------------------------------------------------
                                     84 ; ram data
                                     85 ;--------------------------------------------------------
                                     86 	.area INITIALIZED
      000000                         87 _fDS18X20Temperature::
      000000                         88 	.ds 4
      000004                         89 _fAHTX0Humidity::
      000004                         90 	.ds 4
      000008                         91 _fAHTX0Temperature::
      000008                         92 	.ds 4
      00000C                         93 _fBME280Humidity::
      00000C                         94 	.ds 4
      000010                         95 _fBME280Temperature::
      000010                         96 	.ds 4
                                     97 ;--------------------------------------------------------
                                     98 ; Stack segment in internal ram
                                     99 ;--------------------------------------------------------
                                    100 	.area	SSEG
      000000                        101 __start__stack:
      000000                        102 	.ds	1
                                    103 
                                    104 ;--------------------------------------------------------
                                    105 ; absolute external ram data
                                    106 ;--------------------------------------------------------
                                    107 	.area DABS (ABS)
                                    108 
                                    109 ; default segment ordering for linker
                                    110 	.area HOME
                                    111 	.area GSINIT
                                    112 	.area GSFINAL
                                    113 	.area CONST
                                    114 	.area INITIALIZER
                                    115 	.area CODE
                                    116 
                                    117 ;--------------------------------------------------------
                                    118 ; interrupt vector
                                    119 ;--------------------------------------------------------
                                    120 	.area HOME
      000000                        121 __interrupt_vect:
      000000 82v00u00u00            122 	int s_GSINIT ; reset
      000004 82v00u00u00            123 	int _TRAP_IRQHandler ; trap
      000008 82v00u00u00            124 	int _TLI_IRQHandler ; int0
      00000C 82v00u00u00            125 	int _AWU_IRQHandler ; int1
      000010 82v00u00u00            126 	int _CLK_IRQHandler ; int2
      000014 82v00u00u00            127 	int _EXTI_PORTA_IRQHandler ; int3
      000018 82v00u00u00            128 	int _EXTI_PORTB_IRQHandler ; int4
      00001C 82v00u00u00            129 	int _EXTI_PORTC_IRQHandler ; int5
      000020 82v00u00u00            130 	int _EXTI_PORTD_IRQHandler ; int6
      000024 82v00u00u00            131 	int _EXTI_PORTE_IRQHandler ; int7
      000028 82 00 00 00            132 	int 0x000000 ; int8
      00002C 82 00 00 00            133 	int 0x000000 ; int9
      000030 82v00u00u00            134 	int _SPI_IRQHandler ; int10
      000034 82v00u00u00            135 	int _TIM1_UPD_OVF_TRG_BRK_IRQHandler ; int11
      000038 82v00u00u00            136 	int _TIM1_CAP_COM_IRQHandler ; int12
      00003C 82v00u00u00            137 	int _TIM2_UPD_OVF_BRK_IRQHandler ; int13
      000040 82v00u00u00            138 	int _TIM2_CAP_COM_IRQHandler ; int14
      000044 82v00u00u00            139 	int _TIM3_UPD_OVF_BRK_IRQHandler ; int15
      000048 82v00u00u00            140 	int _TIM3_CAP_COM_IRQHandler ; int16
      00004C 82 00 00 00            141 	int 0x000000 ; int17
      000050 82 00 00 00            142 	int 0x000000 ; int18
      000054 82v00u00u00            143 	int _I2C_IRQHandler ; int19
      000058 82v00u00u00            144 	int _UART2_TX_IRQHandler ; int20
      00005C 82v00u00u00            145 	int _UART2_RX_IRQHandler ; int21
      000060 82v00u00u00            146 	int _ADC1_IRQHandler ; int22
      000064 82v00u00u00            147 	int _TIM4_UPD_OVF_IRQHandler ; int23
      000068 82v00u00u00            148 	int _EEPROM_EEC_IRQHandler ; int24
                                    149 ;--------------------------------------------------------
                                    150 ; global & static initialisations
                                    151 ;--------------------------------------------------------
                                    152 	.area HOME
                                    153 	.area GSINIT
                                    154 	.area GSFINAL
                                    155 	.area GSINIT
      000000                        156 __sdcc_init_data:
                                    157 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]  158 	ldw x, #l_DATA
      000003 27 07            [ 1]  159 	jreq	00002$
      000005                        160 00001$:
      000005 72 4FuFFuFF      [ 1]  161 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  162 	decw x
      00000A 26 F9            [ 1]  163 	jrne	00001$
      00000C                        164 00002$:
      00000C AEr00r00         [ 2]  165 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  166 	jreq	00004$
      000011                        167 00003$:
      000011 D6uFFuFF         [ 1]  168 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  169 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  170 	decw	x
      000018 26 F7            [ 1]  171 	jrne	00003$
      00001A                        172 00004$:
                                    173 ; stm8_genXINIT() end
                                    174 	.area GSFINAL
      000000 CCr00r6C         [ 2]  175 	jp	__sdcc_program_startup
                                    176 ;--------------------------------------------------------
                                    177 ; Home
                                    178 ;--------------------------------------------------------
                                    179 	.area HOME
                                    180 	.area HOME
      00006C                        181 __sdcc_program_startup:
      00006C CCr00r7E         [ 2]  182 	jp	_main
                                    183 ;	return from main will return to caller
                                    184 ;--------------------------------------------------------
                                    185 ; code
                                    186 ;--------------------------------------------------------
                                    187 	.area CODE
                                    188 ;	src/main.c: 138: void Clock_Setup(void) {
                                    189 ;	-----------------------------------------
                                    190 ;	 function Clock_Setup
                                    191 ;	-----------------------------------------
      000000                        192 _Clock_Setup:
                                    193 ;	src/main.c: 139: CLK_DeInit();
      000000 CDr00r00         [ 4]  194 	call	_CLK_DeInit
                                    195 ;	src/main.c: 140: CLK_HSECmd(DISABLE);
      000003 4F               [ 1]  196 	clr	a
      000004 CDr00r00         [ 4]  197 	call	_CLK_HSECmd
                                    198 ;	src/main.c: 141: CLK_LSICmd(DISABLE);
      000007 4F               [ 1]  199 	clr	a
      000008 CDr00r00         [ 4]  200 	call	_CLK_LSICmd
                                    201 ;	src/main.c: 142: CLK_HSICmd(ENABLE);
      00000B A6 01            [ 1]  202 	ld	a, #0x01
      00000D CDr00r00         [ 4]  203 	call	_CLK_HSICmd
                                    204 ;	src/main.c: 143: while(CLK_GetFlagStatus(CLK_FLAG_HSIRDY) == FALSE);
      000010                        205 00101$:
      000010 AE 01 02         [ 2]  206 	ldw	x, #0x0102
      000013 CDr00r00         [ 4]  207 	call	_CLK_GetFlagStatus
      000016 4D               [ 1]  208 	tnz	a
      000017 27 F7            [ 1]  209 	jreq	00101$
                                    210 ;	src/main.c: 144: CLK_ClockSwitchCmd(ENABLE);
      000019 A6 01            [ 1]  211 	ld	a, #0x01
      00001B CDr00r00         [ 4]  212 	call	_CLK_ClockSwitchCmd
                                    213 ;	src/main.c: 145: CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
      00001E 4F               [ 1]  214 	clr	a
      00001F CDr00r00         [ 4]  215 	call	_CLK_HSIPrescalerConfig
                                    216 ;	src/main.c: 146: CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);
      000022 A6 80            [ 1]  217 	ld	a, #0x80
      000024 CDr00r00         [ 4]  218 	call	_CLK_SYSCLKConfig
                                    219 ;	src/main.c: 147: CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO, CLK_SOURCE_HSI, DISABLE, CLK_CURRENTCLOCKSTATE_ENABLE);
      000027 4B 01            [ 1]  220 	push	#0x01
      000029 4B 00            [ 1]  221 	push	#0x00
      00002B 4B E1            [ 1]  222 	push	#0xe1
      00002D A6 01            [ 1]  223 	ld	a, #0x01
      00002F CDr00r00         [ 4]  224 	call	_CLK_ClockSwitchConfig
                                    225 ;	src/main.c: 149: CLK_PeripheralClockConfig(CLK_PERIPHERAL_SPI, DISABLE);
      000032 4B 00            [ 1]  226 	push	#0x00
      000034 A6 01            [ 1]  227 	ld	a, #0x01
      000036 CDr00r00         [ 4]  228 	call	_CLK_PeripheralClockConfig
                                    229 ;	src/main.c: 150: CLK_PeripheralClockConfig(CLK_PERIPHERAL_AWU, DISABLE);
      000039 4B 00            [ 1]  230 	push	#0x00
      00003B A6 12            [ 1]  231 	ld	a, #0x12
      00003D CDr00r00         [ 4]  232 	call	_CLK_PeripheralClockConfig
                                    233 ;	src/main.c: 152: CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER1, DISABLE);
      000040 4B 00            [ 1]  234 	push	#0x00
      000042 A6 07            [ 1]  235 	ld	a, #0x07
      000044 CDr00r00         [ 4]  236 	call	_CLK_PeripheralClockConfig
                                    237 ;	src/main.c: 153: CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2, DISABLE);
      000047 4B 00            [ 1]  238 	push	#0x00
      000049 A6 05            [ 1]  239 	ld	a, #0x05
      00004B CDr00r00         [ 4]  240 	call	_CLK_PeripheralClockConfig
                                    241 ;	src/main.c: 154: CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER4, DISABLE);
      00004E 4B 00            [ 1]  242 	push	#0x00
      000050 A6 04            [ 1]  243 	ld	a, #0x04
      000052 CDr00r00         [ 4]  244 	call	_CLK_PeripheralClockConfig
                                    245 ;	src/main.c: 155: }
      000055 81               [ 4]  246 	ret
                                    247 ;	src/main.c: 157: void GPIO_Setup(void) {
                                    248 ;	-----------------------------------------
                                    249 ;	 function GPIO_Setup
                                    250 ;	-----------------------------------------
      000056                        251 _GPIO_Setup:
                                    252 ;	src/main.c: 162: GPIO_DeInit(GPIOE);
      000056 AE 50 14         [ 2]  253 	ldw	x, #0x5014
      000059 CDr00r00         [ 4]  254 	call	_GPIO_DeInit
                                    255 ;	src/main.c: 163: GPIO_Init(LED_PORT, LED_PIN, GPIO_MODE_OUT_PP_HIGH_FAST);
      00005C 4B F0            [ 1]  256 	push	#0xf0
      00005E A6 20            [ 1]  257 	ld	a, #0x20
      000060 AE 50 14         [ 2]  258 	ldw	x, #0x5014
      000063 CDr00r00         [ 4]  259 	call	_GPIO_Init
                                    260 ;	src/main.c: 164: }
      000066 81               [ 4]  261 	ret
                                    262 ;	src/main.c: 166: void UART_Setup() {
                                    263 ;	-----------------------------------------
                                    264 ;	 function UART_Setup
                                    265 ;	-----------------------------------------
      000067                        266 _UART_Setup:
                                    267 ;	src/main.c: 167: UART_DEINIT();
      000067 CDr00r00         [ 4]  268 	call	_UART2_DeInit
                                    269 ;	src/main.c: 177: UART_INIT((uint32_t)9600, UART_WORDLENGTH_8D, UART_STOPBITS_1, UART_PARITY_NO, UART_SYNCMODE_CLOCK_DISABLE, UART_MODE_TXRX_ENABLE);
      00006A 4B 0C            [ 1]  270 	push	#0x0c
      00006C 4B 80            [ 1]  271 	push	#0x80
      00006E 4B 00            [ 1]  272 	push	#0x00
      000070 4B 00            [ 1]  273 	push	#0x00
      000072 4B 00            [ 1]  274 	push	#0x00
      000074 4B 80            [ 1]  275 	push	#0x80
      000076 4B 25            [ 1]  276 	push	#0x25
      000078 5F               [ 1]  277 	clrw	x
      000079 89               [ 2]  278 	pushw	x
      00007A CDr00r00         [ 4]  279 	call	_UART2_Init
                                    280 ;	src/main.c: 178: }
      00007D 81               [ 4]  281 	ret
                                    282 ;	src/main.c: 188: void main(void) {
                                    283 ;	-----------------------------------------
                                    284 ;	 function main
                                    285 ;	-----------------------------------------
      00007E                        286 _main:
      00007E 90 96            [ 1]  287 	ldw	y, sp
      000080 72 A2 00 0F      [ 2]  288 	subw	y, #15
      000084 52 FF            [ 2]  289 	sub	sp, #255
      000086 52 05            [ 2]  290 	sub	sp, #5
                                    291 ;	src/main.c: 189: Clock_Setup();
      000088 90 89            [ 2]  292 	pushw	y
      00008A CDr00r00         [ 4]  293 	call	_Clock_Setup
      00008D CDr00r56         [ 4]  294 	call	_GPIO_Setup
      000090 CDr00r00         [ 4]  295 	call	_DS18X20_Setup
      000093 CDr00r00         [ 4]  296 	call	_I2C_Setup
      000096 CDr00r67         [ 4]  297 	call	_UART_Setup
      000099 CDr00r00         [ 4]  298 	call	_BME280_Setup
      00009C CDr00r00         [ 4]  299 	call	_BME280_ReadCoefficients
      00009F A6 08            [ 1]  300 	ld	a, #0x08
      0000A1 CDr00r00         [ 4]  301 	call	_BME280_SetFilter
      0000A4 A6 60            [ 1]  302 	ld	a, #0x60
      0000A6 CDr00r00         [ 4]  303 	call	_BME280_SetOversamplingTemper
      0000A9 A6 08            [ 1]  304 	ld	a, #0x08
      0000AB CDr00r00         [ 4]  305 	call	_BME280_SetOversamplingPressure
      0000AE A6 01            [ 1]  306 	ld	a, #0x01
      0000B0 CDr00r00         [ 4]  307 	call	_BME280_SetOversamplingHum
      0000B3 A6 03            [ 1]  308 	ld	a, #0x03
      0000B5 CDr00r00         [ 4]  309 	call	_BME280_SetMode
      0000B8 90 85            [ 2]  310 	popw	y
                                    311 ;	src/main.c: 219: while (1) {
      0000BA                        312 00111$:
                                    313 ;	src/main.c: 226: const char placeholderDS18X20String[] = "{\"topic\" : \"mqtt\/temperature-room\", \"value\" : \"%s\"}";
      0000BA A6 7B            [ 1]  314 	ld	a, #0x7b
      0000BC 6B 01            [ 1]  315 	ld	(0x01, sp), a
      0000BE A6 22            [ 1]  316 	ld	a, #0x22
      0000C0 6B 02            [ 1]  317 	ld	(0x02, sp), a
      0000C2 A6 74            [ 1]  318 	ld	a, #0x74
      0000C4 6B 03            [ 1]  319 	ld	(0x03, sp), a
      0000C6 A6 6F            [ 1]  320 	ld	a, #0x6f
      0000C8 6B 04            [ 1]  321 	ld	(0x04, sp), a
      0000CA A6 70            [ 1]  322 	ld	a, #0x70
      0000CC 6B 05            [ 1]  323 	ld	(0x05, sp), a
      0000CE A6 69            [ 1]  324 	ld	a, #0x69
      0000D0 6B 06            [ 1]  325 	ld	(0x06, sp), a
      0000D2 A6 63            [ 1]  326 	ld	a, #0x63
      0000D4 6B 07            [ 1]  327 	ld	(0x07, sp), a
      0000D6 A6 22            [ 1]  328 	ld	a, #0x22
      0000D8 6B 08            [ 1]  329 	ld	(0x08, sp), a
      0000DA A6 20            [ 1]  330 	ld	a, #0x20
      0000DC 6B 09            [ 1]  331 	ld	(0x09, sp), a
      0000DE A6 3A            [ 1]  332 	ld	a, #0x3a
      0000E0 6B 0A            [ 1]  333 	ld	(0x0a, sp), a
      0000E2 A6 20            [ 1]  334 	ld	a, #0x20
      0000E4 6B 0B            [ 1]  335 	ld	(0x0b, sp), a
      0000E6 A6 22            [ 1]  336 	ld	a, #0x22
      0000E8 6B 0C            [ 1]  337 	ld	(0x0c, sp), a
      0000EA A6 6D            [ 1]  338 	ld	a, #0x6d
      0000EC 6B 0D            [ 1]  339 	ld	(0x0d, sp), a
      0000EE A6 71            [ 1]  340 	ld	a, #0x71
      0000F0 6B 0E            [ 1]  341 	ld	(0x0e, sp), a
      0000F2 A6 74            [ 1]  342 	ld	a, #0x74
      0000F4 6B 0F            [ 1]  343 	ld	(0x0f, sp), a
      0000F6 6B 10            [ 1]  344 	ld	(0x10, sp), a
      0000F8 A6 2F            [ 1]  345 	ld	a, #0x2f
      0000FA 6B 11            [ 1]  346 	ld	(0x11, sp), a
      0000FC A6 74            [ 1]  347 	ld	a, #0x74
      0000FE 6B 12            [ 1]  348 	ld	(0x12, sp), a
      000100 A6 65            [ 1]  349 	ld	a, #0x65
      000102 6B 13            [ 1]  350 	ld	(0x13, sp), a
      000104 A6 6D            [ 1]  351 	ld	a, #0x6d
      000106 6B 14            [ 1]  352 	ld	(0x14, sp), a
      000108 A6 70            [ 1]  353 	ld	a, #0x70
      00010A 6B 15            [ 1]  354 	ld	(0x15, sp), a
      00010C A6 65            [ 1]  355 	ld	a, #0x65
      00010E 6B 16            [ 1]  356 	ld	(0x16, sp), a
      000110 A6 72            [ 1]  357 	ld	a, #0x72
      000112 6B 17            [ 1]  358 	ld	(0x17, sp), a
      000114 A6 61            [ 1]  359 	ld	a, #0x61
      000116 6B 18            [ 1]  360 	ld	(0x18, sp), a
      000118 A6 74            [ 1]  361 	ld	a, #0x74
      00011A 6B 19            [ 1]  362 	ld	(0x19, sp), a
      00011C A6 75            [ 1]  363 	ld	a, #0x75
      00011E 6B 1A            [ 1]  364 	ld	(0x1a, sp), a
      000120 A6 72            [ 1]  365 	ld	a, #0x72
      000122 6B 1B            [ 1]  366 	ld	(0x1b, sp), a
      000124 A6 65            [ 1]  367 	ld	a, #0x65
      000126 6B 1C            [ 1]  368 	ld	(0x1c, sp), a
      000128 A6 2D            [ 1]  369 	ld	a, #0x2d
      00012A 6B 1D            [ 1]  370 	ld	(0x1d, sp), a
      00012C A6 72            [ 1]  371 	ld	a, #0x72
      00012E 6B 1E            [ 1]  372 	ld	(0x1e, sp), a
      000130 A6 6F            [ 1]  373 	ld	a, #0x6f
      000132 6B 1F            [ 1]  374 	ld	(0x1f, sp), a
      000134 6B 20            [ 1]  375 	ld	(0x20, sp), a
      000136 A6 6D            [ 1]  376 	ld	a, #0x6d
      000138 6B 21            [ 1]  377 	ld	(0x21, sp), a
      00013A A6 22            [ 1]  378 	ld	a, #0x22
      00013C 6B 22            [ 1]  379 	ld	(0x22, sp), a
      00013E A6 2C            [ 1]  380 	ld	a, #0x2c
      000140 6B 23            [ 1]  381 	ld	(0x23, sp), a
      000142 A6 20            [ 1]  382 	ld	a, #0x20
      000144 6B 24            [ 1]  383 	ld	(0x24, sp), a
      000146 A6 22            [ 1]  384 	ld	a, #0x22
      000148 6B 25            [ 1]  385 	ld	(0x25, sp), a
      00014A A6 76            [ 1]  386 	ld	a, #0x76
      00014C 6B 26            [ 1]  387 	ld	(0x26, sp), a
      00014E A6 61            [ 1]  388 	ld	a, #0x61
      000150 6B 27            [ 1]  389 	ld	(0x27, sp), a
      000152 A6 6C            [ 1]  390 	ld	a, #0x6c
      000154 6B 28            [ 1]  391 	ld	(0x28, sp), a
      000156 A6 75            [ 1]  392 	ld	a, #0x75
      000158 6B 29            [ 1]  393 	ld	(0x29, sp), a
      00015A A6 65            [ 1]  394 	ld	a, #0x65
      00015C 6B 2A            [ 1]  395 	ld	(0x2a, sp), a
      00015E A6 22            [ 1]  396 	ld	a, #0x22
      000160 6B 2B            [ 1]  397 	ld	(0x2b, sp), a
      000162 A6 20            [ 1]  398 	ld	a, #0x20
      000164 6B 2C            [ 1]  399 	ld	(0x2c, sp), a
      000166 A6 3A            [ 1]  400 	ld	a, #0x3a
      000168 6B 2D            [ 1]  401 	ld	(0x2d, sp), a
      00016A A6 20            [ 1]  402 	ld	a, #0x20
      00016C 6B 2E            [ 1]  403 	ld	(0x2e, sp), a
      00016E A6 22            [ 1]  404 	ld	a, #0x22
      000170 6B 2F            [ 1]  405 	ld	(0x2f, sp), a
      000172 A6 25            [ 1]  406 	ld	a, #0x25
      000174 6B 30            [ 1]  407 	ld	(0x30, sp), a
      000176 A6 73            [ 1]  408 	ld	a, #0x73
      000178 6B 31            [ 1]  409 	ld	(0x31, sp), a
      00017A A6 22            [ 1]  410 	ld	a, #0x22
      00017C 6B 32            [ 1]  411 	ld	(0x32, sp), a
      00017E A6 7D            [ 1]  412 	ld	a, #0x7d
      000180 6B 33            [ 1]  413 	ld	(0x33, sp), a
      000182 0F 34            [ 1]  414 	clr	(0x34, sp)
                                    415 ;	src/main.c: 227: const char placeholderHumidityAHTX0String[] = "{\"topic\" : \"mqtt\/humidity-aht20\", \"value\": \"%s\"}";
      000184 A6 7B            [ 1]  416 	ld	a, #0x7b
      000186 6B 35            [ 1]  417 	ld	(0x35, sp), a
      000188 A6 22            [ 1]  418 	ld	a, #0x22
      00018A 6B 36            [ 1]  419 	ld	(0x36, sp), a
      00018C A6 74            [ 1]  420 	ld	a, #0x74
      00018E 6B 37            [ 1]  421 	ld	(0x37, sp), a
      000190 A6 6F            [ 1]  422 	ld	a, #0x6f
      000192 6B 38            [ 1]  423 	ld	(0x38, sp), a
      000194 A6 70            [ 1]  424 	ld	a, #0x70
      000196 6B 39            [ 1]  425 	ld	(0x39, sp), a
      000198 A6 69            [ 1]  426 	ld	a, #0x69
      00019A 6B 3A            [ 1]  427 	ld	(0x3a, sp), a
      00019C A6 63            [ 1]  428 	ld	a, #0x63
      00019E 6B 3B            [ 1]  429 	ld	(0x3b, sp), a
      0001A0 A6 22            [ 1]  430 	ld	a, #0x22
      0001A2 6B 3C            [ 1]  431 	ld	(0x3c, sp), a
      0001A4 A6 20            [ 1]  432 	ld	a, #0x20
      0001A6 6B 3D            [ 1]  433 	ld	(0x3d, sp), a
      0001A8 A6 3A            [ 1]  434 	ld	a, #0x3a
      0001AA 6B 3E            [ 1]  435 	ld	(0x3e, sp), a
      0001AC A6 20            [ 1]  436 	ld	a, #0x20
      0001AE 6B 3F            [ 1]  437 	ld	(0x3f, sp), a
      0001B0 A6 22            [ 1]  438 	ld	a, #0x22
      0001B2 6B 40            [ 1]  439 	ld	(0x40, sp), a
      0001B4 A6 6D            [ 1]  440 	ld	a, #0x6d
      0001B6 6B 41            [ 1]  441 	ld	(0x41, sp), a
      0001B8 A6 71            [ 1]  442 	ld	a, #0x71
      0001BA 6B 42            [ 1]  443 	ld	(0x42, sp), a
      0001BC A6 74            [ 1]  444 	ld	a, #0x74
      0001BE 6B 43            [ 1]  445 	ld	(0x43, sp), a
      0001C0 6B 44            [ 1]  446 	ld	(0x44, sp), a
      0001C2 A6 2F            [ 1]  447 	ld	a, #0x2f
      0001C4 6B 45            [ 1]  448 	ld	(0x45, sp), a
      0001C6 A6 68            [ 1]  449 	ld	a, #0x68
      0001C8 6B 46            [ 1]  450 	ld	(0x46, sp), a
      0001CA A6 75            [ 1]  451 	ld	a, #0x75
      0001CC 6B 47            [ 1]  452 	ld	(0x47, sp), a
      0001CE A6 6D            [ 1]  453 	ld	a, #0x6d
      0001D0 6B 48            [ 1]  454 	ld	(0x48, sp), a
      0001D2 A6 69            [ 1]  455 	ld	a, #0x69
      0001D4 6B 49            [ 1]  456 	ld	(0x49, sp), a
      0001D6 A6 64            [ 1]  457 	ld	a, #0x64
      0001D8 6B 4A            [ 1]  458 	ld	(0x4a, sp), a
      0001DA A6 69            [ 1]  459 	ld	a, #0x69
      0001DC 6B 4B            [ 1]  460 	ld	(0x4b, sp), a
      0001DE A6 74            [ 1]  461 	ld	a, #0x74
      0001E0 6B 4C            [ 1]  462 	ld	(0x4c, sp), a
      0001E2 A6 79            [ 1]  463 	ld	a, #0x79
      0001E4 6B 4D            [ 1]  464 	ld	(0x4d, sp), a
      0001E6 A6 2D            [ 1]  465 	ld	a, #0x2d
      0001E8 6B 4E            [ 1]  466 	ld	(0x4e, sp), a
      0001EA A6 61            [ 1]  467 	ld	a, #0x61
      0001EC 6B 4F            [ 1]  468 	ld	(0x4f, sp), a
      0001EE A6 68            [ 1]  469 	ld	a, #0x68
      0001F0 6B 50            [ 1]  470 	ld	(0x50, sp), a
      0001F2 A6 74            [ 1]  471 	ld	a, #0x74
      0001F4 6B 51            [ 1]  472 	ld	(0x51, sp), a
      0001F6 A6 32            [ 1]  473 	ld	a, #0x32
      0001F8 6B 52            [ 1]  474 	ld	(0x52, sp), a
      0001FA A6 30            [ 1]  475 	ld	a, #0x30
      0001FC 6B 53            [ 1]  476 	ld	(0x53, sp), a
      0001FE A6 22            [ 1]  477 	ld	a, #0x22
      000200 6B 54            [ 1]  478 	ld	(0x54, sp), a
      000202 A6 2C            [ 1]  479 	ld	a, #0x2c
      000204 6B 55            [ 1]  480 	ld	(0x55, sp), a
      000206 A6 20            [ 1]  481 	ld	a, #0x20
      000208 6B 56            [ 1]  482 	ld	(0x56, sp), a
      00020A A6 22            [ 1]  483 	ld	a, #0x22
      00020C 6B 57            [ 1]  484 	ld	(0x57, sp), a
      00020E A6 76            [ 1]  485 	ld	a, #0x76
      000210 6B 58            [ 1]  486 	ld	(0x58, sp), a
      000212 A6 61            [ 1]  487 	ld	a, #0x61
      000214 6B 59            [ 1]  488 	ld	(0x59, sp), a
      000216 A6 6C            [ 1]  489 	ld	a, #0x6c
      000218 6B 5A            [ 1]  490 	ld	(0x5a, sp), a
      00021A A6 75            [ 1]  491 	ld	a, #0x75
      00021C 6B 5B            [ 1]  492 	ld	(0x5b, sp), a
      00021E A6 65            [ 1]  493 	ld	a, #0x65
      000220 6B 5C            [ 1]  494 	ld	(0x5c, sp), a
      000222 A6 22            [ 1]  495 	ld	a, #0x22
      000224 6B 5D            [ 1]  496 	ld	(0x5d, sp), a
      000226 A6 3A            [ 1]  497 	ld	a, #0x3a
      000228 6B 5E            [ 1]  498 	ld	(0x5e, sp), a
      00022A A6 20            [ 1]  499 	ld	a, #0x20
      00022C 6B 5F            [ 1]  500 	ld	(0x5f, sp), a
      00022E A6 22            [ 1]  501 	ld	a, #0x22
      000230 6B 60            [ 1]  502 	ld	(0x60, sp), a
      000232 A6 25            [ 1]  503 	ld	a, #0x25
      000234 6B 61            [ 1]  504 	ld	(0x61, sp), a
      000236 A6 73            [ 1]  505 	ld	a, #0x73
      000238 6B 62            [ 1]  506 	ld	(0x62, sp), a
      00023A A6 22            [ 1]  507 	ld	a, #0x22
      00023C 6B 63            [ 1]  508 	ld	(0x63, sp), a
      00023E A6 7D            [ 1]  509 	ld	a, #0x7d
      000240 6B 64            [ 1]  510 	ld	(0x64, sp), a
      000242 0F 65            [ 1]  511 	clr	(0x65, sp)
                                    512 ;	src/main.c: 228: const char placeholderTemperatureAHTX0String[] = "{\"topic\" : \"mqtt\/temperature-aht20\", \"value\": \"%s\"}";
      000244 A6 7B            [ 1]  513 	ld	a, #0x7b
      000246 6B 66            [ 1]  514 	ld	(0x66, sp), a
      000248 A6 22            [ 1]  515 	ld	a, #0x22
      00024A 6B 67            [ 1]  516 	ld	(0x67, sp), a
      00024C A6 74            [ 1]  517 	ld	a, #0x74
      00024E 6B 68            [ 1]  518 	ld	(0x68, sp), a
      000250 A6 6F            [ 1]  519 	ld	a, #0x6f
      000252 6B 69            [ 1]  520 	ld	(0x69, sp), a
      000254 A6 70            [ 1]  521 	ld	a, #0x70
      000256 6B 6A            [ 1]  522 	ld	(0x6a, sp), a
      000258 A6 69            [ 1]  523 	ld	a, #0x69
      00025A 6B 6B            [ 1]  524 	ld	(0x6b, sp), a
      00025C A6 63            [ 1]  525 	ld	a, #0x63
      00025E 6B 6C            [ 1]  526 	ld	(0x6c, sp), a
      000260 A6 22            [ 1]  527 	ld	a, #0x22
      000262 6B 6D            [ 1]  528 	ld	(0x6d, sp), a
      000264 A6 20            [ 1]  529 	ld	a, #0x20
      000266 6B 6E            [ 1]  530 	ld	(0x6e, sp), a
      000268 A6 3A            [ 1]  531 	ld	a, #0x3a
      00026A 6B 6F            [ 1]  532 	ld	(0x6f, sp), a
      00026C A6 20            [ 1]  533 	ld	a, #0x20
      00026E 6B 70            [ 1]  534 	ld	(0x70, sp), a
      000270 A6 22            [ 1]  535 	ld	a, #0x22
      000272 6B 71            [ 1]  536 	ld	(0x71, sp), a
      000274 A6 6D            [ 1]  537 	ld	a, #0x6d
      000276 6B 72            [ 1]  538 	ld	(0x72, sp), a
      000278 A6 71            [ 1]  539 	ld	a, #0x71
      00027A 6B 73            [ 1]  540 	ld	(0x73, sp), a
      00027C A6 74            [ 1]  541 	ld	a, #0x74
      00027E 6B 74            [ 1]  542 	ld	(0x74, sp), a
      000280 6B 75            [ 1]  543 	ld	(0x75, sp), a
      000282 A6 2F            [ 1]  544 	ld	a, #0x2f
      000284 6B 76            [ 1]  545 	ld	(0x76, sp), a
      000286 A6 74            [ 1]  546 	ld	a, #0x74
      000288 6B 77            [ 1]  547 	ld	(0x77, sp), a
      00028A A6 65            [ 1]  548 	ld	a, #0x65
      00028C 6B 78            [ 1]  549 	ld	(0x78, sp), a
      00028E A6 6D            [ 1]  550 	ld	a, #0x6d
      000290 6B 79            [ 1]  551 	ld	(0x79, sp), a
      000292 A6 70            [ 1]  552 	ld	a, #0x70
      000294 6B 7A            [ 1]  553 	ld	(0x7a, sp), a
      000296 A6 65            [ 1]  554 	ld	a, #0x65
      000298 6B 7B            [ 1]  555 	ld	(0x7b, sp), a
      00029A A6 72            [ 1]  556 	ld	a, #0x72
      00029C 6B 7C            [ 1]  557 	ld	(0x7c, sp), a
      00029E A6 61            [ 1]  558 	ld	a, #0x61
      0002A0 6B 7D            [ 1]  559 	ld	(0x7d, sp), a
      0002A2 A6 74            [ 1]  560 	ld	a, #0x74
      0002A4 6B 7E            [ 1]  561 	ld	(0x7e, sp), a
      0002A6 A6 75            [ 1]  562 	ld	a, #0x75
      0002A8 6B 7F            [ 1]  563 	ld	(0x7f, sp), a
      0002AA A6 72            [ 1]  564 	ld	a, #0x72
      0002AC 6B 80            [ 1]  565 	ld	(0x80, sp), a
      0002AE A6 65            [ 1]  566 	ld	a, #0x65
      0002B0 6B 81            [ 1]  567 	ld	(0x81, sp), a
      0002B2 A6 2D            [ 1]  568 	ld	a, #0x2d
      0002B4 6B 82            [ 1]  569 	ld	(0x82, sp), a
      0002B6 A6 61            [ 1]  570 	ld	a, #0x61
      0002B8 6B 83            [ 1]  571 	ld	(0x83, sp), a
      0002BA A6 68            [ 1]  572 	ld	a, #0x68
      0002BC 6B 84            [ 1]  573 	ld	(0x84, sp), a
      0002BE A6 74            [ 1]  574 	ld	a, #0x74
      0002C0 6B 85            [ 1]  575 	ld	(0x85, sp), a
      0002C2 A6 32            [ 1]  576 	ld	a, #0x32
      0002C4 6B 86            [ 1]  577 	ld	(0x86, sp), a
      0002C6 A6 30            [ 1]  578 	ld	a, #0x30
      0002C8 6B 87            [ 1]  579 	ld	(0x87, sp), a
      0002CA A6 22            [ 1]  580 	ld	a, #0x22
      0002CC 6B 88            [ 1]  581 	ld	(0x88, sp), a
      0002CE A6 2C            [ 1]  582 	ld	a, #0x2c
      0002D0 6B 89            [ 1]  583 	ld	(0x89, sp), a
      0002D2 A6 20            [ 1]  584 	ld	a, #0x20
      0002D4 6B 8A            [ 1]  585 	ld	(0x8a, sp), a
      0002D6 A6 22            [ 1]  586 	ld	a, #0x22
      0002D8 6B 8B            [ 1]  587 	ld	(0x8b, sp), a
      0002DA A6 76            [ 1]  588 	ld	a, #0x76
      0002DC 6B 8C            [ 1]  589 	ld	(0x8c, sp), a
      0002DE A6 61            [ 1]  590 	ld	a, #0x61
      0002E0 6B 8D            [ 1]  591 	ld	(0x8d, sp), a
      0002E2 A6 6C            [ 1]  592 	ld	a, #0x6c
      0002E4 6B 8E            [ 1]  593 	ld	(0x8e, sp), a
      0002E6 A6 75            [ 1]  594 	ld	a, #0x75
      0002E8 6B 8F            [ 1]  595 	ld	(0x8f, sp), a
      0002EA A6 65            [ 1]  596 	ld	a, #0x65
      0002EC 6B 90            [ 1]  597 	ld	(0x90, sp), a
      0002EE A6 22            [ 1]  598 	ld	a, #0x22
      0002F0 6B 91            [ 1]  599 	ld	(0x91, sp), a
      0002F2 A6 3A            [ 1]  600 	ld	a, #0x3a
      0002F4 6B 92            [ 1]  601 	ld	(0x92, sp), a
      0002F6 A6 20            [ 1]  602 	ld	a, #0x20
      0002F8 6B 93            [ 1]  603 	ld	(0x93, sp), a
      0002FA A6 22            [ 1]  604 	ld	a, #0x22
      0002FC 6B 94            [ 1]  605 	ld	(0x94, sp), a
      0002FE A6 25            [ 1]  606 	ld	a, #0x25
      000300 6B 95            [ 1]  607 	ld	(0x95, sp), a
      000302 A6 73            [ 1]  608 	ld	a, #0x73
      000304 6B 96            [ 1]  609 	ld	(0x96, sp), a
      000306 A6 22            [ 1]  610 	ld	a, #0x22
      000308 6B 97            [ 1]  611 	ld	(0x97, sp), a
      00030A A6 7D            [ 1]  612 	ld	a, #0x7d
      00030C 6B 98            [ 1]  613 	ld	(0x98, sp), a
      00030E 0F 99            [ 1]  614 	clr	(0x99, sp)
                                    615 ;	src/main.c: 229: const char placeholderHumidityBME280String[] = "{\"topic\" : \"mqtt\/humidity-bme280\", \"value\": \"%s\"}";
      000310 A6 7B            [ 1]  616 	ld	a, #0x7b
      000312 6B 9A            [ 1]  617 	ld	(0x9a, sp), a
      000314 A6 22            [ 1]  618 	ld	a, #0x22
      000316 6B 9B            [ 1]  619 	ld	(0x9b, sp), a
      000318 A6 74            [ 1]  620 	ld	a, #0x74
      00031A 6B 9C            [ 1]  621 	ld	(0x9c, sp), a
      00031C A6 6F            [ 1]  622 	ld	a, #0x6f
      00031E 6B 9D            [ 1]  623 	ld	(0x9d, sp), a
      000320 A6 70            [ 1]  624 	ld	a, #0x70
      000322 6B 9E            [ 1]  625 	ld	(0x9e, sp), a
      000324 A6 69            [ 1]  626 	ld	a, #0x69
      000326 6B 9F            [ 1]  627 	ld	(0x9f, sp), a
      000328 A6 63            [ 1]  628 	ld	a, #0x63
      00032A 6B A0            [ 1]  629 	ld	(0xa0, sp), a
      00032C A6 22            [ 1]  630 	ld	a, #0x22
      00032E 6B A1            [ 1]  631 	ld	(0xa1, sp), a
      000330 A6 20            [ 1]  632 	ld	a, #0x20
      000332 6B A2            [ 1]  633 	ld	(0xa2, sp), a
      000334 A6 3A            [ 1]  634 	ld	a, #0x3a
      000336 6B A3            [ 1]  635 	ld	(0xa3, sp), a
      000338 A6 20            [ 1]  636 	ld	a, #0x20
      00033A 6B A4            [ 1]  637 	ld	(0xa4, sp), a
      00033C A6 22            [ 1]  638 	ld	a, #0x22
      00033E 6B A5            [ 1]  639 	ld	(0xa5, sp), a
      000340 A6 6D            [ 1]  640 	ld	a, #0x6d
      000342 6B A6            [ 1]  641 	ld	(0xa6, sp), a
      000344 A6 71            [ 1]  642 	ld	a, #0x71
      000346 6B A7            [ 1]  643 	ld	(0xa7, sp), a
      000348 A6 74            [ 1]  644 	ld	a, #0x74
      00034A 6B A8            [ 1]  645 	ld	(0xa8, sp), a
      00034C 6B A9            [ 1]  646 	ld	(0xa9, sp), a
      00034E A6 2F            [ 1]  647 	ld	a, #0x2f
      000350 6B AA            [ 1]  648 	ld	(0xaa, sp), a
      000352 A6 68            [ 1]  649 	ld	a, #0x68
      000354 6B AB            [ 1]  650 	ld	(0xab, sp), a
      000356 A6 75            [ 1]  651 	ld	a, #0x75
      000358 6B AC            [ 1]  652 	ld	(0xac, sp), a
      00035A A6 6D            [ 1]  653 	ld	a, #0x6d
      00035C 6B AD            [ 1]  654 	ld	(0xad, sp), a
      00035E A6 69            [ 1]  655 	ld	a, #0x69
      000360 6B AE            [ 1]  656 	ld	(0xae, sp), a
      000362 A6 64            [ 1]  657 	ld	a, #0x64
      000364 6B AF            [ 1]  658 	ld	(0xaf, sp), a
      000366 A6 69            [ 1]  659 	ld	a, #0x69
      000368 6B B0            [ 1]  660 	ld	(0xb0, sp), a
      00036A A6 74            [ 1]  661 	ld	a, #0x74
      00036C 6B B1            [ 1]  662 	ld	(0xb1, sp), a
      00036E A6 79            [ 1]  663 	ld	a, #0x79
      000370 6B B2            [ 1]  664 	ld	(0xb2, sp), a
      000372 A6 2D            [ 1]  665 	ld	a, #0x2d
      000374 6B B3            [ 1]  666 	ld	(0xb3, sp), a
      000376 A6 62            [ 1]  667 	ld	a, #0x62
      000378 6B B4            [ 1]  668 	ld	(0xb4, sp), a
      00037A A6 6D            [ 1]  669 	ld	a, #0x6d
      00037C 6B B5            [ 1]  670 	ld	(0xb5, sp), a
      00037E A6 65            [ 1]  671 	ld	a, #0x65
      000380 6B B6            [ 1]  672 	ld	(0xb6, sp), a
      000382 A6 32            [ 1]  673 	ld	a, #0x32
      000384 6B B7            [ 1]  674 	ld	(0xb7, sp), a
      000386 A6 38            [ 1]  675 	ld	a, #0x38
      000388 6B B8            [ 1]  676 	ld	(0xb8, sp), a
      00038A A6 30            [ 1]  677 	ld	a, #0x30
      00038C 6B B9            [ 1]  678 	ld	(0xb9, sp), a
      00038E A6 22            [ 1]  679 	ld	a, #0x22
      000390 6B BA            [ 1]  680 	ld	(0xba, sp), a
      000392 A6 2C            [ 1]  681 	ld	a, #0x2c
      000394 6B BB            [ 1]  682 	ld	(0xbb, sp), a
      000396 A6 20            [ 1]  683 	ld	a, #0x20
      000398 6B BC            [ 1]  684 	ld	(0xbc, sp), a
      00039A A6 22            [ 1]  685 	ld	a, #0x22
      00039C 6B BD            [ 1]  686 	ld	(0xbd, sp), a
      00039E A6 76            [ 1]  687 	ld	a, #0x76
      0003A0 6B BE            [ 1]  688 	ld	(0xbe, sp), a
      0003A2 A6 61            [ 1]  689 	ld	a, #0x61
      0003A4 6B BF            [ 1]  690 	ld	(0xbf, sp), a
      0003A6 A6 6C            [ 1]  691 	ld	a, #0x6c
      0003A8 6B C0            [ 1]  692 	ld	(0xc0, sp), a
      0003AA A6 75            [ 1]  693 	ld	a, #0x75
      0003AC 6B C1            [ 1]  694 	ld	(0xc1, sp), a
      0003AE A6 65            [ 1]  695 	ld	a, #0x65
      0003B0 6B C2            [ 1]  696 	ld	(0xc2, sp), a
      0003B2 A6 22            [ 1]  697 	ld	a, #0x22
      0003B4 6B C3            [ 1]  698 	ld	(0xc3, sp), a
      0003B6 A6 3A            [ 1]  699 	ld	a, #0x3a
      0003B8 6B C4            [ 1]  700 	ld	(0xc4, sp), a
      0003BA A6 20            [ 1]  701 	ld	a, #0x20
      0003BC 6B C5            [ 1]  702 	ld	(0xc5, sp), a
      0003BE A6 22            [ 1]  703 	ld	a, #0x22
      0003C0 6B C6            [ 1]  704 	ld	(0xc6, sp), a
      0003C2 A6 25            [ 1]  705 	ld	a, #0x25
      0003C4 6B C7            [ 1]  706 	ld	(0xc7, sp), a
      0003C6 A6 73            [ 1]  707 	ld	a, #0x73
      0003C8 6B C8            [ 1]  708 	ld	(0xc8, sp), a
      0003CA A6 22            [ 1]  709 	ld	a, #0x22
      0003CC 6B C9            [ 1]  710 	ld	(0xc9, sp), a
      0003CE A6 7D            [ 1]  711 	ld	a, #0x7d
      0003D0 6B CA            [ 1]  712 	ld	(0xca, sp), a
      0003D2 0F CB            [ 1]  713 	clr	(0xcb, sp)
                                    714 ;	src/main.c: 230: const char placeholderTemperatureBME280String[] = "{\"topic\" : \"mqtt\/temperature-bme280\", \"value\": \"%s\"}";
      0003D4 A6 7B            [ 1]  715 	ld	a, #0x7b
      0003D6 6B CC            [ 1]  716 	ld	(0xcc, sp), a
      0003D8 A6 22            [ 1]  717 	ld	a, #0x22
      0003DA 6B CD            [ 1]  718 	ld	(0xcd, sp), a
      0003DC A6 74            [ 1]  719 	ld	a, #0x74
      0003DE 6B CE            [ 1]  720 	ld	(0xce, sp), a
      0003E0 A6 6F            [ 1]  721 	ld	a, #0x6f
      0003E2 6B CF            [ 1]  722 	ld	(0xcf, sp), a
      0003E4 A6 70            [ 1]  723 	ld	a, #0x70
      0003E6 6B D0            [ 1]  724 	ld	(0xd0, sp), a
      0003E8 A6 69            [ 1]  725 	ld	a, #0x69
      0003EA 6B D1            [ 1]  726 	ld	(0xd1, sp), a
      0003EC A6 63            [ 1]  727 	ld	a, #0x63
      0003EE 6B D2            [ 1]  728 	ld	(0xd2, sp), a
      0003F0 A6 22            [ 1]  729 	ld	a, #0x22
      0003F2 6B D3            [ 1]  730 	ld	(0xd3, sp), a
      0003F4 A6 20            [ 1]  731 	ld	a, #0x20
      0003F6 6B D4            [ 1]  732 	ld	(0xd4, sp), a
      0003F8 A6 3A            [ 1]  733 	ld	a, #0x3a
      0003FA 6B D5            [ 1]  734 	ld	(0xd5, sp), a
      0003FC A6 20            [ 1]  735 	ld	a, #0x20
      0003FE 6B D6            [ 1]  736 	ld	(0xd6, sp), a
      000400 A6 22            [ 1]  737 	ld	a, #0x22
      000402 6B D7            [ 1]  738 	ld	(0xd7, sp), a
      000404 A6 6D            [ 1]  739 	ld	a, #0x6d
      000406 6B D8            [ 1]  740 	ld	(0xd8, sp), a
      000408 A6 71            [ 1]  741 	ld	a, #0x71
      00040A 6B D9            [ 1]  742 	ld	(0xd9, sp), a
      00040C A6 74            [ 1]  743 	ld	a, #0x74
      00040E 6B DA            [ 1]  744 	ld	(0xda, sp), a
      000410 6B DB            [ 1]  745 	ld	(0xdb, sp), a
      000412 A6 2F            [ 1]  746 	ld	a, #0x2f
      000414 6B DC            [ 1]  747 	ld	(0xdc, sp), a
      000416 A6 74            [ 1]  748 	ld	a, #0x74
      000418 6B DD            [ 1]  749 	ld	(0xdd, sp), a
      00041A A6 65            [ 1]  750 	ld	a, #0x65
      00041C 6B DE            [ 1]  751 	ld	(0xde, sp), a
      00041E A6 6D            [ 1]  752 	ld	a, #0x6d
      000420 6B DF            [ 1]  753 	ld	(0xdf, sp), a
      000422 A6 70            [ 1]  754 	ld	a, #0x70
      000424 6B E0            [ 1]  755 	ld	(0xe0, sp), a
      000426 A6 65            [ 1]  756 	ld	a, #0x65
      000428 6B E1            [ 1]  757 	ld	(0xe1, sp), a
      00042A A6 72            [ 1]  758 	ld	a, #0x72
      00042C 6B E2            [ 1]  759 	ld	(0xe2, sp), a
      00042E A6 61            [ 1]  760 	ld	a, #0x61
      000430 6B E3            [ 1]  761 	ld	(0xe3, sp), a
      000432 A6 74            [ 1]  762 	ld	a, #0x74
      000434 6B E4            [ 1]  763 	ld	(0xe4, sp), a
      000436 A6 75            [ 1]  764 	ld	a, #0x75
      000438 6B E5            [ 1]  765 	ld	(0xe5, sp), a
      00043A A6 72            [ 1]  766 	ld	a, #0x72
      00043C 6B E6            [ 1]  767 	ld	(0xe6, sp), a
      00043E A6 65            [ 1]  768 	ld	a, #0x65
      000440 6B E7            [ 1]  769 	ld	(0xe7, sp), a
      000442 A6 2D            [ 1]  770 	ld	a, #0x2d
      000444 6B E8            [ 1]  771 	ld	(0xe8, sp), a
      000446 A6 62            [ 1]  772 	ld	a, #0x62
      000448 6B E9            [ 1]  773 	ld	(0xe9, sp), a
      00044A A6 6D            [ 1]  774 	ld	a, #0x6d
      00044C 6B EA            [ 1]  775 	ld	(0xea, sp), a
      00044E A6 65            [ 1]  776 	ld	a, #0x65
      000450 6B EB            [ 1]  777 	ld	(0xeb, sp), a
      000452 A6 32            [ 1]  778 	ld	a, #0x32
      000454 6B EC            [ 1]  779 	ld	(0xec, sp), a
      000456 A6 38            [ 1]  780 	ld	a, #0x38
      000458 6B ED            [ 1]  781 	ld	(0xed, sp), a
      00045A A6 30            [ 1]  782 	ld	a, #0x30
      00045C 6B EE            [ 1]  783 	ld	(0xee, sp), a
      00045E A6 22            [ 1]  784 	ld	a, #0x22
      000460 6B EF            [ 1]  785 	ld	(0xef, sp), a
      000462 A6 2C            [ 1]  786 	ld	a, #0x2c
      000464 6B F0            [ 1]  787 	ld	(0xf0, sp), a
      000466 A6 20            [ 1]  788 	ld	a, #0x20
      000468 6B F1            [ 1]  789 	ld	(0xf1, sp), a
      00046A A6 22            [ 1]  790 	ld	a, #0x22
      00046C 6B F2            [ 1]  791 	ld	(0xf2, sp), a
      00046E A6 76            [ 1]  792 	ld	a, #0x76
      000470 6B F3            [ 1]  793 	ld	(0xf3, sp), a
      000472 A6 61            [ 1]  794 	ld	a, #0x61
      000474 6B F4            [ 1]  795 	ld	(0xf4, sp), a
      000476 A6 6C            [ 1]  796 	ld	a, #0x6c
      000478 6B F5            [ 1]  797 	ld	(0xf5, sp), a
      00047A A6 75            [ 1]  798 	ld	a, #0x75
      00047C 6B F6            [ 1]  799 	ld	(0xf6, sp), a
      00047E A6 65            [ 1]  800 	ld	a, #0x65
      000480 6B F7            [ 1]  801 	ld	(0xf7, sp), a
      000482 A6 22            [ 1]  802 	ld	a, #0x22
      000484 6B F8            [ 1]  803 	ld	(0xf8, sp), a
      000486 A6 3A            [ 1]  804 	ld	a, #0x3a
      000488 6B F9            [ 1]  805 	ld	(0xf9, sp), a
      00048A A6 20            [ 1]  806 	ld	a, #0x20
      00048C 6B FA            [ 1]  807 	ld	(0xfa, sp), a
      00048E A6 22            [ 1]  808 	ld	a, #0x22
      000490 6B FB            [ 1]  809 	ld	(0xfb, sp), a
      000492 A6 25            [ 1]  810 	ld	a, #0x25
      000494 6B FC            [ 1]  811 	ld	(0xfc, sp), a
      000496 A6 73            [ 1]  812 	ld	a, #0x73
      000498 6B FD            [ 1]  813 	ld	(0xfd, sp), a
      00049A A6 22            [ 1]  814 	ld	a, #0x22
      00049C 6B FE            [ 1]  815 	ld	(0xfe, sp), a
      00049E A6 7D            [ 1]  816 	ld	a, #0x7d
      0004A0 6B FF            [ 1]  817 	ld	(0xff, sp), a
      0004A2 90 6F 0B         [ 1]  818 	clr	(0xb, y)
                                    819 ;	src/main.c: 233: LED_ON;
      0004A5 90 89            [ 2]  820 	pushw	y
      0004A7 A6 20            [ 1]  821 	ld	a, #0x20
      0004A9 AE 50 14         [ 2]  822 	ldw	x, #0x5014
      0004AC CDr00r00         [ 4]  823 	call	_GPIO_WriteLow
      0004AF CDr00r00         [ 4]  824 	call	_DS18X20_Reset
      0004B2 AE 07 D0         [ 2]  825 	ldw	x, #0x07d0
      0004B5 CDr00r00         [ 4]  826 	call	_delay_ms
      0004B8 AEr00r00         [ 2]  827 	ldw	x, #(_iDS18X20RomID+0)
      0004BB CDr00r00         [ 4]  828 	call	_DS18X20_Read_ID
      0004BE 90 85            [ 2]  829 	popw	y
      0004C0 4D               [ 1]  830 	tnz	a
      0004C1 26 0E            [ 1]  831 	jrne	00103$
                                    832 ;	src/main.c: 241: for (uint8_t i = 0; i < 8; i++) {
      0004C3 4F               [ 1]  833 	clr	a
      0004C4                        834 00114$:
      0004C4 A1 08            [ 1]  835 	cp	a, #0x08
      0004C6 24 09            [ 1]  836 	jrnc	00103$
                                    837 ;	src/main.c: 242: iDS18X20RomID[i] = 0;
      0004C8 5F               [ 1]  838 	clrw	x
      0004C9 97               [ 1]  839 	ld	xl, a
      0004CA 1Cr00r00         [ 2]  840 	addw	x, #(_iDS18X20RomID+0)
      0004CD 7F               [ 1]  841 	clr	(x)
                                    842 ;	src/main.c: 241: for (uint8_t i = 0; i < 8; i++) {
      0004CE 4C               [ 1]  843 	inc	a
      0004CF 20 F3            [ 2]  844 	jra	00114$
      0004D1                        845 00103$:
                                    846 ;	src/main.c: 257: fDS18X20Temperature = DS18X20_Get_Temperature();
      0004D1 90 89            [ 2]  847 	pushw	y
      0004D3 CDr00r00         [ 4]  848 	call	_DS18X20_Get_Temperature
      0004D6 90 89            [ 2]  849 	pushw	y
      0004D8 16 03            [ 2]  850 	ldw	y, (3, sp)
      0004DA 7B 02            [ 1]  851 	ld	a, (2, sp)
      0004DC 90 E7 0D         [ 1]  852 	ld	(0xd, y), a
      0004DF 7B 01            [ 1]  853 	ld	a, (1, sp)
      0004E1 90 E7 0C         [ 1]  854 	ld	(0xc, y), a
      0004E4 5B 04            [ 2]  855 	addw	sp, #4
      0004E6 CFu00u02         [ 2]  856 	ldw	_fDS18X20Temperature+2, x
      0004E9 90 E6 0D         [ 1]  857 	ld	a, (0xd, y)
      0004EC C7u00u01         [ 1]  858 	ld	_fDS18X20Temperature+1, a
      0004EF 90 E6 0C         [ 1]  859 	ld	a, (0xc, y)
      0004F2 C7u00u00         [ 1]  860 	ld	_fDS18X20Temperature+0, a
                                    861 ;	src/main.c: 269: stringValue = (char*)malloc(sizeValueString * sizeof(char));
      0004F5 90 89            [ 2]  862 	pushw	y
      0004F7 AE 00 05         [ 2]  863 	ldw	x, #0x0005
      0004FA CDr00r00         [ 4]  864 	call	_malloc
      0004FD 90 85            [ 2]  865 	popw	y
      0004FF 90 EF 0C         [ 2]  866 	ldw	(0xc, y), x
                                    867 ;	src/main.c: 270: stringSendUART = (char*)malloc(sizeSendUARTString * sizeof(char));
      000502 90 89            [ 2]  868 	pushw	y
      000504 AE 00 39         [ 2]  869 	ldw	x, #0x0039
      000507 CDr00r00         [ 4]  870 	call	_malloc
      00050A 90 85            [ 2]  871 	popw	y
      00050C 90 EF 0E         [ 2]  872 	ldw	(0xe, y), x
                                    873 ;	src/main.c: 272: FloatToStr(stringValue, fDS18X20Temperature, integer_bit, decimal_bit);
      00050F 90 89            [ 2]  874 	pushw	y
      000511 4B 02            [ 1]  875 	push	#0x02
      000513 4B 02            [ 1]  876 	push	#0x02
      000515 CEu00u02         [ 2]  877 	ldw	x, _fDS18X20Temperature+2
      000518 89               [ 2]  878 	pushw	x
      000519 CEu00u00         [ 2]  879 	ldw	x, _fDS18X20Temperature+0
      00051C 89               [ 2]  880 	pushw	x
      00051D 93               [ 1]  881 	ldw	x, y
      00051E EE 0C            [ 2]  882 	ldw	x, (0xc, x)
      000520 CDr06rA3         [ 4]  883 	call	_FloatToStr
      000523 90 85            [ 2]  884 	popw	y
                                    885 ;	src/main.c: 274: sprintf(stringSendUART, placeholderDS18X20String, stringValue);
      000525 90 89            [ 2]  886 	pushw	y
      000527 93               [ 1]  887 	ldw	x, y
      000528 EE 0C            [ 2]  888 	ldw	x, (0xc, x)
      00052A 89               [ 2]  889 	pushw	x
      00052B 96               [ 1]  890 	ldw	x, sp
      00052C 1C 00 05         [ 2]  891 	addw	x, #5
      00052F 89               [ 2]  892 	pushw	x
      000530 93               [ 1]  893 	ldw	x, y
      000531 EE 0E            [ 2]  894 	ldw	x, (0xe, x)
      000533 89               [ 2]  895 	pushw	x
      000534 CDr00r00         [ 4]  896 	call	_sprintf
      000537 5B 06            [ 2]  897 	addw	sp, #6
      000539 90 85            [ 2]  898 	popw	y
                                    899 ;	src/main.c: 275: printf("%s\r\n", stringSendUART);
      00053B 90 89            [ 2]  900 	pushw	y
      00053D 93               [ 1]  901 	ldw	x, y
      00053E EE 0E            [ 2]  902 	ldw	x, (0xe, x)
      000540 89               [ 2]  903 	pushw	x
      000541 4Br0A            [ 1]  904 	push	#<(___str_5+0)
      000543 4Bs00            [ 1]  905 	push	#((___str_5+0) >> 8)
      000545 CDr00r00         [ 4]  906 	call	_printf
      000548 5B 04            [ 2]  907 	addw	sp, #4
      00054A 90 85            [ 2]  908 	popw	y
                                    909 ;	src/main.c: 277: free(stringSendUART);
      00054C 93               [ 1]  910 	ldw	x, y
      00054D EE 0E            [ 2]  911 	ldw	x, (0xe, x)
      00054F 90 89            [ 2]  912 	pushw	y
      000551 CDr00r00         [ 4]  913 	call	_free
      000554 90 85            [ 2]  914 	popw	y
                                    915 ;	src/main.c: 278: free(stringValue);
      000556 93               [ 1]  916 	ldw	x, y
      000557 EE 0C            [ 2]  917 	ldw	x, (0xc, x)
      000559 90 89            [ 2]  918 	pushw	y
      00055B CDr00r00         [ 4]  919 	call	_free
      00055E AE 13 88         [ 2]  920 	ldw	x, #0x1388
      000561 CDr00r00         [ 4]  921 	call	_delay_ms
      000564 A6 D0            [ 1]  922 	ld	a, #0xd0
      000566 CDr00r00         [ 4]  923 	call	_BME280_ReadReg
      000569 90 85            [ 2]  924 	popw	y
                                    925 ;	src/main.c: 351: if (res != BME280_ID) {
      00056B A1 60            [ 1]  926 	cp	a, #0x60
      00056D 27 0A            [ 1]  927 	jreq	00105$
                                    928 ;	src/main.c: 352: Error();
      00056F 90 89            [ 2]  929 	pushw	y
      000571 CDr00r00         [ 4]  930 	call	_Error
      000574 90 85            [ 2]  931 	popw	y
                                    932 ;	src/main.c: 353: return;
      000576 CCr06r9E         [ 2]  933 	jp	00119$
      000579                        934 00105$:
                                    935 ;	src/main.c: 364: BME280_WriteReg(BME280_REG_SOFTRESET,BME280_SOFTRESET_VALUE);
      000579 90 89            [ 2]  936 	pushw	y
      00057B 4B B6            [ 1]  937 	push	#0xb6
      00057D A6 E0            [ 1]  938 	ld	a, #0xe0
      00057F CDr00r00         [ 4]  939 	call	_BME280_WriteReg
      000582 90 85            [ 2]  940 	popw	y
                                    941 ;	src/main.c: 365: while (BME280_ReadStatus() & BME280_STATUS_IM_UPDATE);
      000584                        942 00106$:
      000584 90 89            [ 2]  943 	pushw	y
      000586 CDr00r00         [ 4]  944 	call	_BME280_ReadStatus
      000589 90 85            [ 2]  945 	popw	y
      00058B 44               [ 1]  946 	srl	a
      00058C 25 F6            [ 1]  947 	jrc	00106$
                                    948 ;	src/main.c: 428: fBME280Humidity = 50;
      00058E 5F               [ 1]  949 	clrw	x
      00058F CFu00u0E         [ 2]  950 	ldw	_fBME280Humidity+2, x
      000592 AE 42 48         [ 2]  951 	ldw	x, #0x4248
      000595 CFu00u0C         [ 2]  952 	ldw	_fBME280Humidity+0, x
                                    953 ;	src/main.c: 429: fBME280Temperature = -11.7;
      000598 AE 33 33         [ 2]  954 	ldw	x, #0x3333
      00059B CFu00u12         [ 2]  955 	ldw	_fBME280Temperature+2, x
      00059E AE C1 3B         [ 2]  956 	ldw	x, #0xc13b
      0005A1 CFu00u10         [ 2]  957 	ldw	_fBME280Temperature+0, x
                                    958 ;	src/main.c: 436: stringValue = (char*)malloc(sizeValueString * sizeof(char));
      0005A4 90 89            [ 2]  959 	pushw	y
      0005A6 AE 00 05         [ 2]  960 	ldw	x, #0x0005
      0005A9 CDr00r00         [ 4]  961 	call	_malloc
      0005AC 90 85            [ 2]  962 	popw	y
      0005AE 90 EF 0C         [ 2]  963 	ldw	(0xc, y), x
                                    964 ;	src/main.c: 437: stringSendUART = (char*)malloc(sizeSendUARTString * sizeof(char));
      0005B1 90 89            [ 2]  965 	pushw	y
      0005B3 AE 00 37         [ 2]  966 	ldw	x, #0x0037
      0005B6 CDr00r00         [ 4]  967 	call	_malloc
      0005B9 90 85            [ 2]  968 	popw	y
      0005BB 90 EF 0E         [ 2]  969 	ldw	(0xe, y), x
                                    970 ;	src/main.c: 439: FloatToStr(stringValue, fBME280Humidity, integer_bit, decimal_bit);
      0005BE 90 89            [ 2]  971 	pushw	y
      0005C0 4B 02            [ 1]  972 	push	#0x02
      0005C2 4B 02            [ 1]  973 	push	#0x02
      0005C4 CEu00u0E         [ 2]  974 	ldw	x, _fBME280Humidity+2
      0005C7 89               [ 2]  975 	pushw	x
      0005C8 CEu00u0C         [ 2]  976 	ldw	x, _fBME280Humidity+0
      0005CB 89               [ 2]  977 	pushw	x
      0005CC 93               [ 1]  978 	ldw	x, y
      0005CD EE 0C            [ 2]  979 	ldw	x, (0xc, x)
      0005CF CDr06rA3         [ 4]  980 	call	_FloatToStr
      0005D2 90 85            [ 2]  981 	popw	y
                                    982 ;	src/main.c: 441: sprintf(stringSendUART, placeholderHumidityBME280String, stringValue);
      0005D4 90 89            [ 2]  983 	pushw	y
      0005D6 93               [ 1]  984 	ldw	x, y
      0005D7 EE 0C            [ 2]  985 	ldw	x, (0xc, x)
      0005D9 89               [ 2]  986 	pushw	x
      0005DA 96               [ 1]  987 	ldw	x, sp
      0005DB 1C 00 9E         [ 2]  988 	addw	x, #158
      0005DE 89               [ 2]  989 	pushw	x
      0005DF 93               [ 1]  990 	ldw	x, y
      0005E0 EE 0E            [ 2]  991 	ldw	x, (0xe, x)
      0005E2 89               [ 2]  992 	pushw	x
      0005E3 CDr00r00         [ 4]  993 	call	_sprintf
      0005E6 5B 06            [ 2]  994 	addw	sp, #6
      0005E8 90 85            [ 2]  995 	popw	y
                                    996 ;	src/main.c: 442: printf("%s\r\n", stringSendUART);
      0005EA 90 89            [ 2]  997 	pushw	y
      0005EC 93               [ 1]  998 	ldw	x, y
      0005ED EE 0E            [ 2]  999 	ldw	x, (0xe, x)
      0005EF 89               [ 2] 1000 	pushw	x
      0005F0 4Br0A            [ 1] 1001 	push	#<(___str_5+0)
      0005F2 4Bs00            [ 1] 1002 	push	#((___str_5+0) >> 8)
      0005F4 CDr00r00         [ 4] 1003 	call	_printf
      0005F7 5B 04            [ 2] 1004 	addw	sp, #4
      0005F9 90 85            [ 2] 1005 	popw	y
                                   1006 ;	src/main.c: 444: free(stringSendUART);
      0005FB 93               [ 1] 1007 	ldw	x, y
      0005FC EE 0E            [ 2] 1008 	ldw	x, (0xe, x)
      0005FE 90 89            [ 2] 1009 	pushw	y
      000600 CDr00r00         [ 4] 1010 	call	_free
      000603 90 85            [ 2] 1011 	popw	y
                                   1012 ;	src/main.c: 445: free(stringValue);
      000605 93               [ 1] 1013 	ldw	x, y
      000606 EE 0C            [ 2] 1014 	ldw	x, (0xc, x)
      000608 90 89            [ 2] 1015 	pushw	y
      00060A CDr00r00         [ 4] 1016 	call	_free
      00060D AE 13 88         [ 2] 1017 	ldw	x, #0x1388
      000610 CDr00r00         [ 4] 1018 	call	_delay_ms
      000613 AE 00 08         [ 2] 1019 	ldw	x, #0x0008
      000616 CDr00r00         [ 4] 1020 	call	_malloc
      000619 90 85            [ 2] 1021 	popw	y
      00061B 90 EF 0C         [ 2] 1022 	ldw	(0xc, y), x
                                   1023 ;	src/main.c: 456: stringSendUART = (char*)malloc(sizeSendUARTString * sizeof(char));
      00061E 90 89            [ 2] 1024 	pushw	y
      000620 AE 00 3D         [ 2] 1025 	ldw	x, #0x003d
      000623 CDr00r00         [ 4] 1026 	call	_malloc
      000626 90 85            [ 2] 1027 	popw	y
      000628 90 EF 0E         [ 2] 1028 	ldw	(0xe, y), x
                                   1029 ;	src/main.c: 458: FloatToStr(stringValue, fBME280Temperature, integer_bit, decimal_bit);
      00062B 90 89            [ 2] 1030 	pushw	y
      00062D 4B 02            [ 1] 1031 	push	#0x02
      00062F 4B 05            [ 1] 1032 	push	#0x05
      000631 CEu00u12         [ 2] 1033 	ldw	x, _fBME280Temperature+2
      000634 89               [ 2] 1034 	pushw	x
      000635 CEu00u10         [ 2] 1035 	ldw	x, _fBME280Temperature+0
      000638 89               [ 2] 1036 	pushw	x
      000639 93               [ 1] 1037 	ldw	x, y
      00063A EE 0C            [ 2] 1038 	ldw	x, (0xc, x)
      00063C CDr06rA3         [ 4] 1039 	call	_FloatToStr
      00063F 90 85            [ 2] 1040 	popw	y
                                   1041 ;	src/main.c: 460: sprintf(stringSendUART, placeholderTemperatureBME280String, stringValue);
      000641 90 89            [ 2] 1042 	pushw	y
      000643 93               [ 1] 1043 	ldw	x, y
      000644 EE 0C            [ 2] 1044 	ldw	x, (0xc, x)
      000646 89               [ 2] 1045 	pushw	x
      000647 96               [ 1] 1046 	ldw	x, sp
      000648 1C 00 D0         [ 2] 1047 	addw	x, #208
      00064B 89               [ 2] 1048 	pushw	x
      00064C 93               [ 1] 1049 	ldw	x, y
      00064D EE 0E            [ 2] 1050 	ldw	x, (0xe, x)
      00064F 89               [ 2] 1051 	pushw	x
      000650 CDr00r00         [ 4] 1052 	call	_sprintf
      000653 5B 06            [ 2] 1053 	addw	sp, #6
      000655 90 85            [ 2] 1054 	popw	y
                                   1055 ;	src/main.c: 461: printf("%s\r\n", stringSendUART);
      000657 90 89            [ 2] 1056 	pushw	y
      000659 93               [ 1] 1057 	ldw	x, y
      00065A EE 0E            [ 2] 1058 	ldw	x, (0xe, x)
      00065C 89               [ 2] 1059 	pushw	x
      00065D 4Br0A            [ 1] 1060 	push	#<(___str_5+0)
      00065F 4Bs00            [ 1] 1061 	push	#((___str_5+0) >> 8)
      000661 CDr00r00         [ 4] 1062 	call	_printf
      000664 5B 04            [ 2] 1063 	addw	sp, #4
      000666 90 85            [ 2] 1064 	popw	y
                                   1065 ;	src/main.c: 463: free(stringSendUART);
      000668 93               [ 1] 1066 	ldw	x, y
      000669 EE 0E            [ 2] 1067 	ldw	x, (0xe, x)
      00066B 90 89            [ 2] 1068 	pushw	y
      00066D CDr00r00         [ 4] 1069 	call	_free
      000670 90 85            [ 2] 1070 	popw	y
                                   1071 ;	src/main.c: 464: free(stringValue);
      000672 93               [ 1] 1072 	ldw	x, y
      000673 EE 0C            [ 2] 1073 	ldw	x, (0xc, x)
      000675 90 89            [ 2] 1074 	pushw	y
      000677 CDr00r00         [ 4] 1075 	call	_free
      00067A 90 85            [ 2] 1076 	popw	y
                                   1077 ;	src/main.c: 474: for (uint8_t i = 0; i < 9; i++) {
      00067C 4F               [ 1] 1078 	clr	a
      00067D                       1079 00117$:
      00067D A1 09            [ 1] 1080 	cp	a, #0x09
      00067F 24 0E            [ 1] 1081 	jrnc	00109$
                                   1082 ;	src/main.c: 475: delay_ms(65535);
      000681 88               [ 1] 1083 	push	a
      000682 90 89            [ 2] 1084 	pushw	y
      000684 5F               [ 1] 1085 	clrw	x
      000685 5A               [ 2] 1086 	decw	x
      000686 CDr00r00         [ 4] 1087 	call	_delay_ms
      000689 90 85            [ 2] 1088 	popw	y
      00068B 84               [ 1] 1089 	pop	a
                                   1090 ;	src/main.c: 474: for (uint8_t i = 0; i < 9; i++) {
      00068C 4C               [ 1] 1091 	inc	a
      00068D 20 EE            [ 2] 1092 	jra	00117$
      00068F                       1093 00109$:
                                   1094 ;	src/main.c: 479: LED_OFF;
      00068F 90 89            [ 2] 1095 	pushw	y
      000691 A6 20            [ 1] 1096 	ld	a, #0x20
      000693 AE 50 14         [ 2] 1097 	ldw	x, #0x5014
      000696 CDr00r00         [ 4] 1098 	call	_GPIO_WriteHigh
      000699 90 85            [ 2] 1099 	popw	y
      00069B CCr00rBA         [ 2] 1100 	jp	00111$
      00069E                       1101 00119$:
                                   1102 ;	src/main.c: 489: }
      00069E 5B FF            [ 2] 1103 	addw	sp, #255
      0006A0 5B 05            [ 2] 1104 	addw	sp, #5
      0006A2 81               [ 4] 1105 	ret
                                   1106 ;	src/main.c: 491: void FloatToStr(char *str, float number, uint8_t integer_bit, uint8_t decimal_bit) {
                                   1107 ;	-----------------------------------------
                                   1108 ;	 function FloatToStr
                                   1109 ;	-----------------------------------------
      0006A3                       1110 _FloatToStr:
      0006A3 52 17            [ 2] 1111 	sub	sp, #23
      0006A5 1F 15            [ 2] 1112 	ldw	(0x15, sp), x
                                   1113 ;	src/main.c: 493: uint8_t minus = 0;
      0006A7 0F 05            [ 1] 1114 	clr	(0x05, sp)
                                   1115 ;	src/main.c: 496: uint8_t trailing_zero_count = 0;
      0006A9 0F 06            [ 1] 1116 	clr	(0x06, sp)
                                   1117 ;	src/main.c: 498: if (number < 0) {
      0006AB 5F               [ 1] 1118 	clrw	x
      0006AC 89               [ 2] 1119 	pushw	x
      0006AD 5F               [ 1] 1120 	clrw	x
      0006AE 89               [ 2] 1121 	pushw	x
      0006AF 1E 20            [ 2] 1122 	ldw	x, (0x20, sp)
      0006B1 89               [ 2] 1123 	pushw	x
      0006B2 1E 20            [ 2] 1124 	ldw	x, (0x20, sp)
      0006B4 89               [ 2] 1125 	pushw	x
      0006B5 CDr00r00         [ 4] 1126 	call	___fslt
      0006B8 4D               [ 1] 1127 	tnz	a
      0006B9 27 14            [ 1] 1128 	jreq	00102$
                                   1129 ;	src/main.c: 499: str[0] = 0x2D;
      0006BB 1E 15            [ 2] 1130 	ldw	x, (0x15, sp)
      0006BD A6 2D            [ 1] 1131 	ld	a, #0x2d
      0006BF F7               [ 1] 1132 	ld	(x), a
                                   1133 ;	src/main.c: 500: number *= -1;
      0006C0 16 1C            [ 2] 1134 	ldw	y, (0x1c, sp)
      0006C2 1E 1A            [ 2] 1135 	ldw	x, (0x1a, sp)
      0006C4 58               [ 2] 1136 	sllw	x
      0006C5 8C               [ 1] 1137 	ccf
      0006C6 56               [ 2] 1138 	rrcw	x
      0006C7 17 1C            [ 2] 1139 	ldw	(0x1c, sp), y
      0006C9 1F 1A            [ 2] 1140 	ldw	(0x1a, sp), x
                                   1141 ;	src/main.c: 501: minus = 1;
      0006CB A6 01            [ 1] 1142 	ld	a, #0x01
      0006CD 6B 05            [ 1] 1143 	ld	(0x05, sp), a
      0006CF                       1144 00102$:
                                   1145 ;	src/main.c: 504: temp = (uint32_t)(number/1);
      0006CF 16 1C            [ 2] 1146 	ldw	y, (0x1c, sp)
      0006D1 17 09            [ 2] 1147 	ldw	(0x09, sp), y
      0006D3 16 1A            [ 2] 1148 	ldw	y, (0x1a, sp)
      0006D5 17 07            [ 2] 1149 	ldw	(0x07, sp), y
      0006D7 1E 09            [ 2] 1150 	ldw	x, (0x09, sp)
      0006D9 89               [ 2] 1151 	pushw	x
      0006DA 1E 09            [ 2] 1152 	ldw	x, (0x09, sp)
      0006DC 89               [ 2] 1153 	pushw	x
      0006DD CDr00r00         [ 4] 1154 	call	___fs2ulong
      0006E0 5B 04            [ 2] 1155 	addw	sp, #4
      0006E2 1F 0F            [ 2] 1156 	ldw	(0x0f, sp), x
                                   1157 ;	src/main.c: 506: for (i = 1; i <= integer_bit; i++) {
      0006E4 A6 01            [ 1] 1158 	ld	a, #0x01
      0006E6 6B 17            [ 1] 1159 	ld	(0x17, sp), a
      0006E8                       1160 00114$:
                                   1161 ;	src/main.c: 508: str[integer_bit - i + minus] = table[0];
      0006E8 7B 1E            [ 1] 1162 	ld	a, (0x1e, sp)
      0006EA 6B 12            [ 1] 1163 	ld	(0x12, sp), a
      0006EC 0F 11            [ 1] 1164 	clr	(0x11, sp)
      0006EE 7B 05            [ 1] 1165 	ld	a, (0x05, sp)
      0006F0 6B 0C            [ 1] 1166 	ld	(0x0c, sp), a
      0006F2 0F 0B            [ 1] 1167 	clr	(0x0b, sp)
                                   1168 ;	src/main.c: 506: for (i = 1; i <= integer_bit; i++) {
      0006F4 7B 17            [ 1] 1169 	ld	a, (0x17, sp)
      0006F6 11 1E            [ 1] 1170 	cp	a, (0x1e, sp)
      0006F8 22 3D            [ 1] 1171 	jrugt	00106$
                                   1172 ;	src/main.c: 508: str[integer_bit - i + minus] = table[0];
      0006FA 5F               [ 1] 1173 	clrw	x
      0006FB 7B 17            [ 1] 1174 	ld	a, (0x17, sp)
      0006FD 97               [ 1] 1175 	ld	xl, a
                                   1176 ;	src/main.c: 510: str[integer_bit - i + minus] = table[temp%10];
      0006FE 16 0F            [ 2] 1177 	ldw	y, (0x0f, sp)
      000700 17 13            [ 2] 1178 	ldw	(0x13, sp), y
                                   1179 ;	src/main.c: 508: str[integer_bit - i + minus] = table[0];
      000702 50               [ 2] 1180 	negw	x
      000703 72 FB 11         [ 2] 1181 	addw	x, (0x11, sp)
      000706 72 FB 0B         [ 2] 1182 	addw	x, (0x0b, sp)
      000709 72 FB 15         [ 2] 1183 	addw	x, (0x15, sp)
      00070C 1F 11            [ 2] 1184 	ldw	(0x11, sp), x
                                   1185 ;	src/main.c: 507: if (temp == 0) {
      00070E 1E 0F            [ 2] 1186 	ldw	x, (0x0f, sp)
      000710 26 08            [ 1] 1187 	jrne	00104$
                                   1188 ;	src/main.c: 508: str[integer_bit - i + minus] = table[0];
      000712 C6u00u00         [ 1] 1189 	ld	a, _table+0
      000715 1E 11            [ 2] 1190 	ldw	x, (0x11, sp)
      000717 F7               [ 1] 1191 	ld	(x), a
      000718 20 10            [ 2] 1192 	jra	00105$
      00071A                       1193 00104$:
                                   1194 ;	src/main.c: 510: str[integer_bit - i + minus] = table[temp%10];
      00071A 1E 13            [ 2] 1195 	ldw	x, (0x13, sp)
      00071C 90 AE 00 0A      [ 2] 1196 	ldw	y, #0x000a
      000720 65               [ 2] 1197 	divw	x, y
      000721 17 0F            [ 2] 1198 	ldw	(0x0f, sp), y
      000723 93               [ 1] 1199 	ldw	x, y
      000724 D6u00u00         [ 1] 1200 	ld	a, (_table+0, x)
      000727 1E 11            [ 2] 1201 	ldw	x, (0x11, sp)
      000729 F7               [ 1] 1202 	ld	(x), a
      00072A                       1203 00105$:
                                   1204 ;	src/main.c: 512: temp /= 10;
      00072A 1E 13            [ 2] 1205 	ldw	x, (0x13, sp)
      00072C 90 AE 00 0A      [ 2] 1206 	ldw	y, #0x000a
      000730 65               [ 2] 1207 	divw	x, y
      000731 1F 0F            [ 2] 1208 	ldw	(0x0f, sp), x
                                   1209 ;	src/main.c: 506: for (i = 1; i <= integer_bit; i++) {
      000733 0C 17            [ 1] 1210 	inc	(0x17, sp)
      000735 20 B1            [ 2] 1211 	jra	00114$
      000737                       1212 00106$:
                                   1213 ;	src/main.c: 515: for (i = 0; i < (integer_bit - 1); i++) {
      000737 0F 17            [ 1] 1214 	clr	(0x17, sp)
      000739                       1215 00117$:
      000739 16 11            [ 2] 1216 	ldw	y, (0x11, sp)
      00073B 17 0D            [ 2] 1217 	ldw	(0x0d, sp), y
      00073D 1E 11            [ 2] 1218 	ldw	x, (0x11, sp)
      00073F 5A               [ 2] 1219 	decw	x
      000740 1F 13            [ 2] 1220 	ldw	(0x13, sp), x
      000742 5F               [ 1] 1221 	clrw	x
      000743 7B 17            [ 1] 1222 	ld	a, (0x17, sp)
      000745 97               [ 1] 1223 	ld	xl, a
      000746 13 13            [ 2] 1224 	cpw	x, (0x13, sp)
      000748 2E 11            [ 1] 1225 	jrsge	00110$
                                   1226 ;	src/main.c: 516: if (str[i + minus] == '0') {
      00074A 72 FB 0B         [ 2] 1227 	addw	x, (0x0b, sp)
      00074D 72 FB 15         [ 2] 1228 	addw	x, (0x15, sp)
      000750 F6               [ 1] 1229 	ld	a, (x)
      000751 A1 30            [ 1] 1230 	cp	a, #0x30
      000753 26 06            [ 1] 1231 	jrne	00110$
                                   1232 ;	src/main.c: 517: trailing_zero_count += 1;
      000755 0C 06            [ 1] 1233 	inc	(0x06, sp)
                                   1234 ;	src/main.c: 515: for (i = 0; i < (integer_bit - 1); i++) {
      000757 0C 17            [ 1] 1235 	inc	(0x17, sp)
      000759 20 DE            [ 2] 1236 	jra	00117$
      00075B                       1237 00110$:
                                   1238 ;	src/main.c: 528: for (i = minus; i <= trailing_zero_count + minus; i++) {
      00075B 7B 05            [ 1] 1239 	ld	a, (0x05, sp)
      00075D 6B 17            [ 1] 1240 	ld	(0x17, sp), a
      00075F                       1241 00120$:
      00075F 7B 06            [ 1] 1242 	ld	a, (0x06, sp)
      000761 6B 10            [ 1] 1243 	ld	(0x10, sp), a
      000763 0F 0F            [ 1] 1244 	clr	(0x0f, sp)
      000765 16 0B            [ 2] 1245 	ldw	y, (0x0b, sp)
      000767 17 11            [ 2] 1246 	ldw	(0x11, sp), y
      000769 1E 0F            [ 2] 1247 	ldw	x, (0x0f, sp)
      00076B 72 FB 0B         [ 2] 1248 	addw	x, (0x0b, sp)
      00076E 7B 17            [ 1] 1249 	ld	a, (0x17, sp)
      000770 6B 14            [ 1] 1250 	ld	(0x14, sp), a
      000772 0F 13            [ 1] 1251 	clr	(0x13, sp)
      000774 13 13            [ 2] 1252 	cpw	x, (0x13, sp)
      000776 2F 16            [ 1] 1253 	jrslt	00111$
                                   1254 ;	src/main.c: 529: str[i] = str[i + trailing_zero_count];
      000778 5F               [ 1] 1255 	clrw	x
      000779 7B 17            [ 1] 1256 	ld	a, (0x17, sp)
      00077B 97               [ 1] 1257 	ld	xl, a
      00077C 72 FB 15         [ 2] 1258 	addw	x, (0x15, sp)
      00077F 16 13            [ 2] 1259 	ldw	y, (0x13, sp)
      000781 72 F9 0F         [ 2] 1260 	addw	y, (0x0f, sp)
      000784 72 F9 15         [ 2] 1261 	addw	y, (0x15, sp)
      000787 90 F6            [ 1] 1262 	ld	a, (y)
      000789 F7               [ 1] 1263 	ld	(x), a
                                   1264 ;	src/main.c: 528: for (i = minus; i <= trailing_zero_count + minus; i++) {
      00078A 0C 17            [ 1] 1265 	inc	(0x17, sp)
      00078C 20 D1            [ 2] 1266 	jra	00120$
      00078E                       1267 00111$:
                                   1268 ;	src/main.c: 532: *(str + integer_bit - trailing_zero_count + minus) = '.';
      00078E 5F               [ 1] 1269 	clrw	x
      00078F 7B 1E            [ 1] 1270 	ld	a, (0x1e, sp)
      000791 97               [ 1] 1271 	ld	xl, a
      000792 72 FB 15         [ 2] 1272 	addw	x, (0x15, sp)
      000795 1F 13            [ 2] 1273 	ldw	(0x13, sp), x
      000797 72 F0 0F         [ 2] 1274 	subw	x, (0x0f, sp)
      00079A 9F               [ 1] 1275 	ld	a, xl
      00079B 1B 05            [ 1] 1276 	add	a, (0x05, sp)
      00079D 02               [ 1] 1277 	rlwa	x
      00079E A9 00            [ 1] 1278 	adc	a, #0x00
      0007A0 95               [ 1] 1279 	ld	xh, a
      0007A1 A6 2E            [ 1] 1280 	ld	a, #0x2e
      0007A3 F7               [ 1] 1281 	ld	(x), a
                                   1282 ;	src/main.c: 534: t2 = number;
      0007A4 16 09            [ 2] 1283 	ldw	y, (0x09, sp)
      0007A6 17 03            [ 2] 1284 	ldw	(0x03, sp), y
      0007A8 16 07            [ 2] 1285 	ldw	y, (0x07, sp)
      0007AA 17 01            [ 2] 1286 	ldw	(0x01, sp), y
                                   1287 ;	src/main.c: 536: for (i = 1; i <= decimal_bit; i++) {
      0007AC A6 01            [ 1] 1288 	ld	a, #0x01
      0007AE 6B 17            [ 1] 1289 	ld	(0x17, sp), a
      0007B0                       1290 00123$:
      0007B0 7B 17            [ 1] 1291 	ld	a, (0x17, sp)
      0007B2 11 1F            [ 1] 1292 	cp	a, (0x1f, sp)
      0007B4 22 46            [ 1] 1293 	jrugt	00112$
                                   1294 ;	src/main.c: 537: temp = t2 * 10;
      0007B6 1E 03            [ 2] 1295 	ldw	x, (0x03, sp)
      0007B8 89               [ 2] 1296 	pushw	x
      0007B9 1E 03            [ 2] 1297 	ldw	x, (0x03, sp)
      0007BB 89               [ 2] 1298 	pushw	x
      0007BC 5F               [ 1] 1299 	clrw	x
      0007BD 89               [ 2] 1300 	pushw	x
      0007BE 4B 20            [ 1] 1301 	push	#0x20
      0007C0 4B 41            [ 1] 1302 	push	#0x41
      0007C2 CDr00r00         [ 4] 1303 	call	___fsmul
      0007C5 1F 0B            [ 2] 1304 	ldw	(0x0b, sp), x
      0007C7 17 09            [ 2] 1305 	ldw	(0x09, sp), y
      0007C9 1E 0B            [ 2] 1306 	ldw	x, (0x0b, sp)
      0007CB 89               [ 2] 1307 	pushw	x
      0007CC 1E 0B            [ 2] 1308 	ldw	x, (0x0b, sp)
      0007CE 89               [ 2] 1309 	pushw	x
      0007CF CDr00r00         [ 4] 1310 	call	___fs2uint
      0007D2 51               [ 1] 1311 	exgw	x, y
                                   1312 ;	src/main.c: 538: str[integer_bit + i - trailing_zero_count + minus] = table[temp%10];
      0007D3 7B 17            [ 1] 1313 	ld	a, (0x17, sp)
      0007D5 5F               [ 1] 1314 	clrw	x
      0007D6 97               [ 1] 1315 	ld	xl, a
      0007D7 72 FB 0D         [ 2] 1316 	addw	x, (0x0d, sp)
      0007DA 72 F0 0F         [ 2] 1317 	subw	x, (0x0f, sp)
      0007DD 72 FB 11         [ 2] 1318 	addw	x, (0x11, sp)
      0007E0 72 FB 15         [ 2] 1319 	addw	x, (0x15, sp)
      0007E3 89               [ 2] 1320 	pushw	x
      0007E4 93               [ 1] 1321 	ldw	x, y
      0007E5 90 AE 00 0A      [ 2] 1322 	ldw	y, #0x000a
      0007E9 65               [ 2] 1323 	divw	x, y
      0007EA 85               [ 2] 1324 	popw	x
      0007EB 90 D6u00u00      [ 1] 1325 	ld	a, (_table+0, y)
      0007EF F7               [ 1] 1326 	ld	(x), a
                                   1327 ;	src/main.c: 539: t2 *= 10;
      0007F0 1E 0B            [ 2] 1328 	ldw	x, (0x0b, sp)
      0007F2 16 09            [ 2] 1329 	ldw	y, (0x09, sp)
      0007F4 1F 03            [ 2] 1330 	ldw	(0x03, sp), x
      0007F6 17 01            [ 2] 1331 	ldw	(0x01, sp), y
                                   1332 ;	src/main.c: 536: for (i = 1; i <= decimal_bit; i++) {
      0007F8 0C 17            [ 1] 1333 	inc	(0x17, sp)
      0007FA 20 B4            [ 2] 1334 	jra	00123$
      0007FC                       1335 00112$:
                                   1336 ;	src/main.c: 542: *(str + integer_bit + 1 + decimal_bit - trailing_zero_count + minus) = '\0';
      0007FC 1E 13            [ 2] 1337 	ldw	x, (0x13, sp)
      0007FE 5C               [ 1] 1338 	incw	x
      0007FF 9F               [ 1] 1339 	ld	a, xl
      000800 1B 1F            [ 1] 1340 	add	a, (0x1f, sp)
      000802 02               [ 1] 1341 	rlwa	x
      000803 A9 00            [ 1] 1342 	adc	a, #0x00
      000805 95               [ 1] 1343 	ld	xh, a
      000806 72 F0 0F         [ 2] 1344 	subw	x, (0x0f, sp)
      000809 9F               [ 1] 1345 	ld	a, xl
      00080A 1B 05            [ 1] 1346 	add	a, (0x05, sp)
      00080C 02               [ 1] 1347 	rlwa	x
      00080D A9 00            [ 1] 1348 	adc	a, #0x00
      00080F 95               [ 1] 1349 	ld	xh, a
      000810 7F               [ 1] 1350 	clr	(x)
                                   1351 ;	src/main.c: 543: }
      000811 1E 18            [ 2] 1352 	ldw	x, (24, sp)
      000813 5B 1F            [ 2] 1353 	addw	sp, #31
      000815 FC               [ 2] 1354 	jp	(x)
                                   1355 ;	src/main.c: 550: PUTCHAR_PROTOTYPE
                                   1356 ;	-----------------------------------------
                                   1357 ;	 function putchar
                                   1358 ;	-----------------------------------------
      000816                       1359 _putchar:
                                   1360 ;	src/main.c: 553: UART_SENDDATA8(c);
      000816 9F               [ 1] 1361 	ld	a, xl
      000817 89               [ 2] 1362 	pushw	x
      000818 CDr00r00         [ 4] 1363 	call	_UART2_SendData8
      00081B 85               [ 2] 1364 	popw	x
                                   1365 ;	src/main.c: 555: while (UART_GETFLAGSTATUS(UART_FLAG_TXE) == RESET);
      00081C                       1366 00101$:
      00081C 89               [ 2] 1367 	pushw	x
      00081D AE 00 80         [ 2] 1368 	ldw	x, #0x0080
      000820 CDr00r00         [ 4] 1369 	call	_UART2_GetFlagStatus
      000823 85               [ 2] 1370 	popw	x
      000824 4D               [ 1] 1371 	tnz	a
      000825 27 F5            [ 1] 1372 	jreq	00101$
                                   1373 ;	src/main.c: 557: return (c);
                                   1374 ;	src/main.c: 558: }
      000827 81               [ 4] 1375 	ret
                                   1376 ;	src/main.c: 565: GETCHAR_PROTOTYPE
                                   1377 ;	-----------------------------------------
                                   1378 ;	 function getchar
                                   1379 ;	-----------------------------------------
      000828                       1380 _getchar:
                                   1381 ;	src/main.c: 573: while (UART_GETFLAGSTATUS(UART_FLAG_TXE) == RESET);
      000828                       1382 00101$:
      000828 AE 00 80         [ 2] 1383 	ldw	x, #0x0080
      00082B CDr00r00         [ 4] 1384 	call	_UART2_GetFlagStatus
      00082E 4D               [ 1] 1385 	tnz	a
      00082F 27 F7            [ 1] 1386 	jreq	00101$
                                   1387 ;	src/main.c: 574: c = UART_RECEIVEDATA8();
      000831 CDr00r00         [ 4] 1388 	call	_UART2_ReceiveData8
      000834 5F               [ 1] 1389 	clrw	x
                                   1390 ;	src/main.c: 575: return (c);
      000835 97               [ 1] 1391 	ld	xl, a
                                   1392 ;	src/main.c: 576: }
      000836 81               [ 4] 1393 	ret
                                   1394 ;	src/main.c: 587: void assert_failed(uint8_t* file, uint32_t line)
                                   1395 ;	-----------------------------------------
                                   1396 ;	 function assert_failed
                                   1397 ;	-----------------------------------------
      000837                       1398 _assert_failed:
                                   1399 ;	src/main.c: 594: while (1)
      000837                       1400 00102$:
      000837 20 FE            [ 2] 1401 	jra	00102$
                                   1402 ;	src/main.c: 597: }
      000839 1E 01            [ 2] 1403 	ldw	x, (1, sp)
      00083B 5B 06            [ 2] 1404 	addw	sp, #6
      00083D FC               [ 2] 1405 	jp	(x)
                                   1406 	.area CODE
                                   1407 	.area CONST
      000000                       1408 _table:
      000000 30                    1409 	.db #0x30	; 48	'0'
      000001 31                    1410 	.db #0x31	; 49	'1'
      000002 32                    1411 	.db #0x32	; 50	'2'
      000003 33                    1412 	.db #0x33	; 51	'3'
      000004 34                    1413 	.db #0x34	; 52	'4'
      000005 35                    1414 	.db #0x35	; 53	'5'
      000006 36                    1415 	.db #0x36	; 54	'6'
      000007 37                    1416 	.db #0x37	; 55	'7'
      000008 38                    1417 	.db #0x38	; 56	'8'
      000009 39                    1418 	.db #0x39	; 57	'9'
                                   1419 	.area CONST
      00000A                       1420 ___str_5:
      00000A 25 73                 1421 	.ascii "%s"
      00000C 0D                    1422 	.db 0x0d
      00000D 0A                    1423 	.db 0x0a
      00000E 00                    1424 	.db 0x00
                                   1425 	.area CODE
                                   1426 	.area INITIALIZER
      000000                       1427 __xinit__fDS18X20Temperature:
      000000 C2 C8 00 00           1428 	.byte #0xc2, #0xc8, #0x00, #0x00	; -1.000000e+02
      000004                       1429 __xinit__fAHTX0Humidity:
      000004 00 00 00 00           1430 	.byte #0x00, #0x00, #0x00, #0x00	;  0.000000e+00
      000008                       1431 __xinit__fAHTX0Temperature:
      000008 00 00 00 00           1432 	.byte #0x00, #0x00, #0x00, #0x00	;  0.000000e+00
      00000C                       1433 __xinit__fBME280Humidity:
      00000C 00 00 00 00           1434 	.byte #0x00, #0x00, #0x00, #0x00	;  0.000000e+00
      000010                       1435 __xinit__fBME280Temperature:
      000010 00 00 00 00           1436 	.byte #0x00, #0x00, #0x00, #0x00	;  0.000000e+00
                                   1437 	.area CABS (ABS)
