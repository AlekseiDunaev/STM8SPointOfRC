                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _UART_Setup
                                     13 	.globl _GPIO_Setup
                                     14 	.globl _Clock_Setup
                                     15 	.globl _BME280_ReadHumidity
                                     16 	.globl _BME280_ReadTemperature
                                     17 	.globl _BME280_Setup
                                     18 	.globl _DS18X20_Setup
                                     19 	.globl _DS18X20_Get_Temperature
                                     20 	.globl _DS18X20_Read_ID
                                     21 	.globl _DS18X20_Reset
                                     22 	.globl _I2C_Setup
                                     23 	.globl _delay_ms
                                     24 	.globl _free
                                     25 	.globl _malloc
                                     26 	.globl _sprintf
                                     27 	.globl _printf
                                     28 	.globl _UART2_GetFlagStatus
                                     29 	.globl _UART2_SendData8
                                     30 	.globl _UART2_ReceiveData8
                                     31 	.globl _UART2_Init
                                     32 	.globl _UART2_DeInit
                                     33 	.globl _GPIO_WriteLow
                                     34 	.globl _GPIO_WriteHigh
                                     35 	.globl _GPIO_Init
                                     36 	.globl _GPIO_DeInit
                                     37 	.globl _CLK_GetFlagStatus
                                     38 	.globl _CLK_SYSCLKConfig
                                     39 	.globl _CLK_HSIPrescalerConfig
                                     40 	.globl _CLK_ClockSwitchConfig
                                     41 	.globl _CLK_PeripheralClockConfig
                                     42 	.globl _CLK_ClockSwitchCmd
                                     43 	.globl _CLK_LSICmd
                                     44 	.globl _CLK_HSICmd
                                     45 	.globl _CLK_HSECmd
                                     46 	.globl _CLK_DeInit
                                     47 	.globl _fBME280Humidity
                                     48 	.globl _fBME280Temperature
                                     49 	.globl _fDS18X20Temperature
                                     50 	.globl _str1
                                     51 	.globl _sString
                                     52 	.globl _iI2CRead
                                     53 	.globl _iI2CWrite
                                     54 	.globl _iDS18X20RomID
                                     55 	.globl _FloatToStr
                                     56 	.globl _putchar
                                     57 	.globl _getchar
                                     58 	.globl _assert_failed
                                     59 ;--------------------------------------------------------
                                     60 ; ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area DATA
      000000                         63 _iDS18X20RomID::
      000000                         64 	.ds 8
      000008                         65 _iI2CWrite::
      000008                         66 	.ds 3
      00000B                         67 _iI2CRead::
      00000B                         68 	.ds 7
      000012                         69 _sString::
      000012                         70 	.ds 100
      000076                         71 _str1::
      000076                         72 	.ds 100
                                     73 ;--------------------------------------------------------
                                     74 ; ram data
                                     75 ;--------------------------------------------------------
                                     76 	.area INITIALIZED
      000000                         77 _fDS18X20Temperature::
      000000                         78 	.ds 4
      000004                         79 _fBME280Temperature::
      000004                         80 	.ds 4
      000008                         81 _fBME280Humidity::
      000008                         82 	.ds 4
                                     83 ;--------------------------------------------------------
                                     84 ; Stack segment in internal ram
                                     85 ;--------------------------------------------------------
                                     86 	.area	SSEG
      000000                         87 __start__stack:
      000000                         88 	.ds	1
                                     89 
                                     90 ;--------------------------------------------------------
                                     91 ; absolute external ram data
                                     92 ;--------------------------------------------------------
                                     93 	.area DABS (ABS)
                                     94 
                                     95 ; default segment ordering for linker
                                     96 	.area HOME
                                     97 	.area GSINIT
                                     98 	.area GSFINAL
                                     99 	.area CONST
                                    100 	.area INITIALIZER
                                    101 	.area CODE
                                    102 
                                    103 ;--------------------------------------------------------
                                    104 ; interrupt vector
                                    105 ;--------------------------------------------------------
                                    106 	.area HOME
      000000                        107 __interrupt_vect:
      000000 82v00u00u00            108 	int s_GSINIT ; reset
      000004 82v00u00u00            109 	int _TRAP_IRQHandler ; trap
      000008 82v00u00u00            110 	int _TLI_IRQHandler ; int0
      00000C 82v00u00u00            111 	int _AWU_IRQHandler ; int1
      000010 82v00u00u00            112 	int _CLK_IRQHandler ; int2
      000014 82v00u00u00            113 	int _EXTI_PORTA_IRQHandler ; int3
      000018 82v00u00u00            114 	int _EXTI_PORTB_IRQHandler ; int4
      00001C 82v00u00u00            115 	int _EXTI_PORTC_IRQHandler ; int5
      000020 82v00u00u00            116 	int _EXTI_PORTD_IRQHandler ; int6
      000024 82v00u00u00            117 	int _EXTI_PORTE_IRQHandler ; int7
      000028 82 00 00 00            118 	int 0x000000 ; int8
      00002C 82 00 00 00            119 	int 0x000000 ; int9
      000030 82v00u00u00            120 	int _SPI_IRQHandler ; int10
      000034 82v00u00u00            121 	int _TIM1_UPD_OVF_TRG_BRK_IRQHandler ; int11
      000038 82v00u00u00            122 	int _TIM1_CAP_COM_IRQHandler ; int12
      00003C 82v00u00u00            123 	int _TIM2_UPD_OVF_BRK_IRQHandler ; int13
      000040 82v00u00u00            124 	int _TIM2_CAP_COM_IRQHandler ; int14
      000044 82v00u00u00            125 	int _TIM3_UPD_OVF_BRK_IRQHandler ; int15
      000048 82v00u00u00            126 	int _TIM3_CAP_COM_IRQHandler ; int16
      00004C 82 00 00 00            127 	int 0x000000 ; int17
      000050 82 00 00 00            128 	int 0x000000 ; int18
      000054 82v00u00u00            129 	int _I2C_IRQHandler ; int19
      000058 82v00u00u00            130 	int _UART2_TX_IRQHandler ; int20
      00005C 82v00u00u00            131 	int _UART2_RX_IRQHandler ; int21
      000060 82v00u00u00            132 	int _ADC1_IRQHandler ; int22
      000064 82v00u00u00            133 	int _TIM4_UPD_OVF_IRQHandler ; int23
      000068 82v00u00u00            134 	int _EEPROM_EEC_IRQHandler ; int24
                                    135 ;--------------------------------------------------------
                                    136 ; global & static initialisations
                                    137 ;--------------------------------------------------------
                                    138 	.area HOME
                                    139 	.area GSINIT
                                    140 	.area GSFINAL
                                    141 	.area GSINIT
      000000                        142 __sdcc_init_data:
                                    143 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]  144 	ldw x, #l_DATA
      000003 27 07            [ 1]  145 	jreq	00002$
      000005                        146 00001$:
      000005 72 4FuFFuFF      [ 1]  147 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  148 	decw x
      00000A 26 F9            [ 1]  149 	jrne	00001$
      00000C                        150 00002$:
      00000C AEr00r00         [ 2]  151 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  152 	jreq	00004$
      000011                        153 00003$:
      000011 D6uFFuFF         [ 1]  154 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  155 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  156 	decw	x
      000018 26 F7            [ 1]  157 	jrne	00003$
      00001A                        158 00004$:
                                    159 ; stm8_genXINIT() end
                                    160 	.area GSFINAL
      000000 CCr00r6C         [ 2]  161 	jp	__sdcc_program_startup
                                    162 ;--------------------------------------------------------
                                    163 ; Home
                                    164 ;--------------------------------------------------------
                                    165 	.area HOME
                                    166 	.area HOME
      00006C                        167 __sdcc_program_startup:
      00006C CCr00r7E         [ 2]  168 	jp	_main
                                    169 ;	return from main will return to caller
                                    170 ;--------------------------------------------------------
                                    171 ; code
                                    172 ;--------------------------------------------------------
                                    173 	.area CODE
                                    174 ;	src\main.c: 142: void Clock_Setup(void) {
                                    175 ;	-----------------------------------------
                                    176 ;	 function Clock_Setup
                                    177 ;	-----------------------------------------
      000000                        178 _Clock_Setup:
                                    179 ;	src\main.c: 143: CLK_DeInit();
      000000 CDr00r00         [ 4]  180 	call	_CLK_DeInit
                                    181 ;	src\main.c: 144: CLK_HSECmd(DISABLE);
      000003 4F               [ 1]  182 	clr	a
      000004 CDr00r00         [ 4]  183 	call	_CLK_HSECmd
                                    184 ;	src\main.c: 145: CLK_LSICmd(DISABLE);
      000007 4F               [ 1]  185 	clr	a
      000008 CDr00r00         [ 4]  186 	call	_CLK_LSICmd
                                    187 ;	src\main.c: 146: CLK_HSICmd(ENABLE);
      00000B A6 01            [ 1]  188 	ld	a, #0x01
      00000D CDr00r00         [ 4]  189 	call	_CLK_HSICmd
                                    190 ;	src\main.c: 147: while(CLK_GetFlagStatus(CLK_FLAG_HSIRDY) == FALSE);
      000010                        191 00101$:
      000010 AE 01 02         [ 2]  192 	ldw	x, #0x0102
      000013 CDr00r00         [ 4]  193 	call	_CLK_GetFlagStatus
      000016 4D               [ 1]  194 	tnz	a
      000017 27 F7            [ 1]  195 	jreq	00101$
                                    196 ;	src\main.c: 148: CLK_ClockSwitchCmd(ENABLE);
      000019 A6 01            [ 1]  197 	ld	a, #0x01
      00001B CDr00r00         [ 4]  198 	call	_CLK_ClockSwitchCmd
                                    199 ;	src\main.c: 149: CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
      00001E 4F               [ 1]  200 	clr	a
      00001F CDr00r00         [ 4]  201 	call	_CLK_HSIPrescalerConfig
                                    202 ;	src\main.c: 150: CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);
      000022 A6 80            [ 1]  203 	ld	a, #0x80
      000024 CDr00r00         [ 4]  204 	call	_CLK_SYSCLKConfig
                                    205 ;	src\main.c: 151: CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO, CLK_SOURCE_HSI, DISABLE, CLK_CURRENTCLOCKSTATE_ENABLE);
      000027 4B 01            [ 1]  206 	push	#0x01
      000029 4B 00            [ 1]  207 	push	#0x00
      00002B 4B E1            [ 1]  208 	push	#0xe1
      00002D A6 01            [ 1]  209 	ld	a, #0x01
      00002F CDr00r00         [ 4]  210 	call	_CLK_ClockSwitchConfig
                                    211 ;	src\main.c: 153: CLK_PeripheralClockConfig(CLK_PERIPHERAL_SPI, DISABLE);
      000032 4B 00            [ 1]  212 	push	#0x00
      000034 A6 01            [ 1]  213 	ld	a, #0x01
      000036 CDr00r00         [ 4]  214 	call	_CLK_PeripheralClockConfig
                                    215 ;	src\main.c: 154: CLK_PeripheralClockConfig(CLK_PERIPHERAL_AWU, DISABLE);
      000039 4B 00            [ 1]  216 	push	#0x00
      00003B A6 12            [ 1]  217 	ld	a, #0x12
      00003D CDr00r00         [ 4]  218 	call	_CLK_PeripheralClockConfig
                                    219 ;	src\main.c: 156: CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER1, DISABLE);
      000040 4B 00            [ 1]  220 	push	#0x00
      000042 A6 07            [ 1]  221 	ld	a, #0x07
      000044 CDr00r00         [ 4]  222 	call	_CLK_PeripheralClockConfig
                                    223 ;	src\main.c: 157: CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2, DISABLE);
      000047 4B 00            [ 1]  224 	push	#0x00
      000049 A6 05            [ 1]  225 	ld	a, #0x05
      00004B CDr00r00         [ 4]  226 	call	_CLK_PeripheralClockConfig
                                    227 ;	src\main.c: 158: CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER4, DISABLE);
      00004E 4B 00            [ 1]  228 	push	#0x00
      000050 A6 04            [ 1]  229 	ld	a, #0x04
      000052 CDr00r00         [ 4]  230 	call	_CLK_PeripheralClockConfig
                                    231 ;	src\main.c: 159: }
      000055 81               [ 4]  232 	ret
                                    233 ;	src\main.c: 161: void GPIO_Setup(void) {
                                    234 ;	-----------------------------------------
                                    235 ;	 function GPIO_Setup
                                    236 ;	-----------------------------------------
      000056                        237 _GPIO_Setup:
                                    238 ;	src\main.c: 166: GPIO_DeInit(GPIOE);
      000056 AE 50 14         [ 2]  239 	ldw	x, #0x5014
      000059 CDr00r00         [ 4]  240 	call	_GPIO_DeInit
                                    241 ;	src\main.c: 167: GPIO_Init(LED_PORT, LED_PIN, GPIO_MODE_OUT_PP_HIGH_FAST);
      00005C 4B F0            [ 1]  242 	push	#0xf0
      00005E A6 20            [ 1]  243 	ld	a, #0x20
      000060 AE 50 14         [ 2]  244 	ldw	x, #0x5014
      000063 CDr00r00         [ 4]  245 	call	_GPIO_Init
                                    246 ;	src\main.c: 168: }
      000066 81               [ 4]  247 	ret
                                    248 ;	src\main.c: 170: void UART_Setup() {
                                    249 ;	-----------------------------------------
                                    250 ;	 function UART_Setup
                                    251 ;	-----------------------------------------
      000067                        252 _UART_Setup:
                                    253 ;	src\main.c: 171: UART_DEINIT();
      000067 CDr00r00         [ 4]  254 	call	_UART2_DeInit
                                    255 ;	src\main.c: 181: UART_INIT((uint32_t)9600, UART_WORDLENGTH_8D, UART_STOPBITS_1, UART_PARITY_NO, UART_SYNCMODE_CLOCK_DISABLE, UART_MODE_TXRX_ENABLE);
      00006A 4B 0C            [ 1]  256 	push	#0x0c
      00006C 4B 80            [ 1]  257 	push	#0x80
      00006E 4B 00            [ 1]  258 	push	#0x00
      000070 4B 00            [ 1]  259 	push	#0x00
      000072 4B 00            [ 1]  260 	push	#0x00
      000074 4B 80            [ 1]  261 	push	#0x80
      000076 4B 25            [ 1]  262 	push	#0x25
      000078 5F               [ 1]  263 	clrw	x
      000079 89               [ 2]  264 	pushw	x
      00007A CDr00r00         [ 4]  265 	call	_UART2_Init
                                    266 ;	src\main.c: 182: }
      00007D 81               [ 4]  267 	ret
                                    268 ;	src\main.c: 192: void main(void) {
                                    269 ;	-----------------------------------------
                                    270 ;	 function main
                                    271 ;	-----------------------------------------
      00007E                        272 _main:
      00007E 52 04            [ 2]  273 	sub	sp, #4
                                    274 ;	src\main.c: 193: Clock_Setup();
      000080 CDr00r00         [ 4]  275 	call	_Clock_Setup
                                    276 ;	src\main.c: 194: GPIO_Setup();
      000083 CDr00r56         [ 4]  277 	call	_GPIO_Setup
                                    278 ;	src\main.c: 195: DS18X20_Setup();
      000086 CDr00r00         [ 4]  279 	call	_DS18X20_Setup
                                    280 ;	src\main.c: 196: I2C_Setup();
      000089 CDr00r00         [ 4]  281 	call	_I2C_Setup
                                    282 ;	src\main.c: 197: UART_Setup();
      00008C CDr00r67         [ 4]  283 	call	_UART_Setup
                                    284 ;	src\main.c: 199: BME280_Setup();
      00008F CDr00r00         [ 4]  285 	call	_BME280_Setup
                                    286 ;	src\main.c: 202: while (1) {
      000092                        287 00106$:
                                    288 ;	src\main.c: 215: LED_ON;
      000092 A6 20            [ 1]  289 	ld	a, #0x20
      000094 AE 50 14         [ 2]  290 	ldw	x, #0x5014
      000097 CDr00r00         [ 4]  291 	call	_GPIO_WriteLow
                                    292 ;	src\main.c: 218: DS18X20_Reset();
      00009A CDr00r00         [ 4]  293 	call	_DS18X20_Reset
                                    294 ;	src\main.c: 220: delay_ms(2000);
      00009D AE 07 D0         [ 2]  295 	ldw	x, #0x07d0
      0000A0 CDr00r00         [ 4]  296 	call	_delay_ms
                                    297 ;	src\main.c: 222: if (!DS18X20_Read_ID(iDS18X20RomID)) {
      0000A3 AEr00r00         [ 2]  298 	ldw	x, #(_iDS18X20RomID+0)
      0000A6 CDr00r00         [ 4]  299 	call	_DS18X20_Read_ID
      0000A9 4D               [ 1]  300 	tnz	a
      0000AA 26 0E            [ 1]  301 	jrne	00103$
                                    302 ;	src\main.c: 223: for (uint8_t i = 0; i < 8; i++) {
      0000AC 4F               [ 1]  303 	clr	a
      0000AD                        304 00109$:
      0000AD A1 08            [ 1]  305 	cp	a, #0x08
      0000AF 24 09            [ 1]  306 	jrnc	00103$
                                    307 ;	src\main.c: 224: iDS18X20RomID[i] = 0;
      0000B1 5F               [ 1]  308 	clrw	x
      0000B2 97               [ 1]  309 	ld	xl, a
      0000B3 1Cr00r00         [ 2]  310 	addw	x, #(_iDS18X20RomID+0)
      0000B6 7F               [ 1]  311 	clr	(x)
                                    312 ;	src\main.c: 223: for (uint8_t i = 0; i < 8; i++) {
      0000B7 4C               [ 1]  313 	inc	a
      0000B8 20 F3            [ 2]  314 	jra	00109$
      0000BA                        315 00103$:
                                    316 ;	src\main.c: 227: fDS18X20Temperature = DS18X20_Get_Temperature();
      0000BA CDr00r00         [ 4]  317 	call	_DS18X20_Get_Temperature
      0000BD CFu00u02         [ 2]  318 	ldw	_fDS18X20Temperature+2, x
      0000C0 90 CFu00u00      [ 2]  319 	ldw	_fDS18X20Temperature+0, y
                                    320 ;	src\main.c: 247: stringValue = (char*)malloc(sizeValueString * sizeof(char));
      0000C4 AE 00 05         [ 2]  321 	ldw	x, #0x0005
      0000C7 CDr00r00         [ 4]  322 	call	_malloc
      0000CA 1F 01            [ 2]  323 	ldw	(0x01, sp), x
                                    324 ;	src\main.c: 248: stringSendUART = (char*)malloc(sizeSendUARTString * sizeof(char));
      0000CC AE 00 39         [ 2]  325 	ldw	x, #0x0039
      0000CF CDr00r00         [ 4]  326 	call	_malloc
      0000D2 1F 03            [ 2]  327 	ldw	(0x03, sp), x
                                    328 ;	src\main.c: 250: FloatToStr(stringValue, fDS18X20Temperature, integer_bit, decimal_bit);
      0000D4 4B 02            [ 1]  329 	push	#0x02
      0000D6 4B 02            [ 1]  330 	push	#0x02
      0000D8 CEu00u02         [ 2]  331 	ldw	x, _fDS18X20Temperature+2
      0000DB 89               [ 2]  332 	pushw	x
      0000DC CEu00u00         [ 2]  333 	ldw	x, _fDS18X20Temperature+0
      0000DF 89               [ 2]  334 	pushw	x
      0000E0 1E 07            [ 2]  335 	ldw	x, (0x07, sp)
      0000E2 CDr02r00         [ 4]  336 	call	_FloatToStr
                                    337 ;	src\main.c: 252: sprintf(stringSendUART, placeholderDS18X20String, stringValue);
      0000E5 1E 01            [ 2]  338 	ldw	x, (0x01, sp)
      0000E7 89               [ 2]  339 	pushw	x
      0000E8 4Br0A            [ 1]  340 	push	#<(_main_placeholderDS18X20String_131072_214+0)
      0000EA 4Bs00            [ 1]  341 	push	#((_main_placeholderDS18X20String_131072_214+0) >> 8)
      0000EC 1E 07            [ 2]  342 	ldw	x, (0x07, sp)
      0000EE 89               [ 2]  343 	pushw	x
      0000EF CDr00r00         [ 4]  344 	call	_sprintf
      0000F2 5B 06            [ 2]  345 	addw	sp, #6
                                    346 ;	src\main.c: 253: putchar(0x00);
      0000F4 5F               [ 1]  347 	clrw	x
      0000F5 CDr03r74         [ 4]  348 	call	_putchar
                                    349 ;	src\main.c: 254: putchar(0x00);
      0000F8 5F               [ 1]  350 	clrw	x
      0000F9 CDr03r74         [ 4]  351 	call	_putchar
                                    352 ;	src\main.c: 255: putchar(0x18);
      0000FC AE 00 18         [ 2]  353 	ldw	x, #0x0018
      0000FF CDr03r74         [ 4]  354 	call	_putchar
                                    355 ;	src\main.c: 256: printf("%s\r\n", stringSendUART);
      000102 1E 03            [ 2]  356 	ldw	x, (0x03, sp)
      000104 89               [ 2]  357 	pushw	x
      000105 4BrA5            [ 1]  358 	push	#<(___str_3+0)
      000107 4Bs00            [ 1]  359 	push	#((___str_3+0) >> 8)
      000109 CDr00r00         [ 4]  360 	call	_printf
      00010C 5B 04            [ 2]  361 	addw	sp, #4
                                    362 ;	src\main.c: 258: free(stringSendUART);
      00010E 1E 03            [ 2]  363 	ldw	x, (0x03, sp)
      000110 CDr00r00         [ 4]  364 	call	_free
                                    365 ;	src\main.c: 259: free(stringValue);
      000113 1E 01            [ 2]  366 	ldw	x, (0x01, sp)
      000115 CDr00r00         [ 4]  367 	call	_free
                                    368 ;	src\main.c: 261: delay_ms(5000);
      000118 AE 13 88         [ 2]  369 	ldw	x, #0x1388
      00011B CDr00r00         [ 4]  370 	call	_delay_ms
                                    371 ;	src\main.c: 324: fBME280Temperature = BME280_ReadTemperature();
      00011E CDr00r00         [ 4]  372 	call	_BME280_ReadTemperature
      000121 CFu00u06         [ 2]  373 	ldw	_fBME280Temperature+2, x
      000124 90 CFu00u04      [ 2]  374 	ldw	_fBME280Temperature+0, y
                                    375 ;	src\main.c: 325: delay_ms(2000);
      000128 AE 07 D0         [ 2]  376 	ldw	x, #0x07d0
      00012B CDr00r00         [ 4]  377 	call	_delay_ms
                                    378 ;	src\main.c: 328: stringValue = (char*)malloc(sizeValueString * sizeof(char));
      00012E AE 00 06         [ 2]  379 	ldw	x, #0x0006
      000131 CDr00r00         [ 4]  380 	call	_malloc
      000134 1F 01            [ 2]  381 	ldw	(0x01, sp), x
                                    382 ;	src\main.c: 330: stringSendUART = (char*)malloc(sizeSendUARTString * sizeof(char));
      000136 AE 00 3B         [ 2]  383 	ldw	x, #0x003b
      000139 CDr00r00         [ 4]  384 	call	_malloc
      00013C 1F 03            [ 2]  385 	ldw	(0x03, sp), x
                                    386 ;	src\main.c: 332: FloatToStr(stringValue, fBME280Temperature, integer_bit, decimal_bit);
      00013E 4B 02            [ 1]  387 	push	#0x02
      000140 4B 03            [ 1]  388 	push	#0x03
      000142 CEu00u06         [ 2]  389 	ldw	x, _fBME280Temperature+2
      000145 89               [ 2]  390 	pushw	x
      000146 CEu00u04         [ 2]  391 	ldw	x, _fBME280Temperature+0
      000149 89               [ 2]  392 	pushw	x
      00014A 1E 07            [ 2]  393 	ldw	x, (0x07, sp)
      00014C CDr02r00         [ 4]  394 	call	_FloatToStr
                                    395 ;	src\main.c: 333: sprintf(stringSendUART, placeholderTemperatureBME280String, stringValue);
      00014F 1E 01            [ 2]  396 	ldw	x, (0x01, sp)
      000151 89               [ 2]  397 	pushw	x
      000152 4Br70            [ 1]  398 	push	#<(_main_placeholderTemperatureBME280String_131072_214+0)
      000154 4Bs00            [ 1]  399 	push	#((_main_placeholderTemperatureBME280String_131072_214+0) >> 8)
      000156 1E 07            [ 2]  400 	ldw	x, (0x07, sp)
      000158 89               [ 2]  401 	pushw	x
      000159 CDr00r00         [ 4]  402 	call	_sprintf
      00015C 5B 06            [ 2]  403 	addw	sp, #6
                                    404 ;	src\main.c: 334: putchar(0x00);
      00015E 5F               [ 1]  405 	clrw	x
      00015F CDr03r74         [ 4]  406 	call	_putchar
                                    407 ;	src\main.c: 335: putchar(0x00);
      000162 5F               [ 1]  408 	clrw	x
      000163 CDr03r74         [ 4]  409 	call	_putchar
                                    410 ;	src\main.c: 336: putchar(0x18);
      000166 AE 00 18         [ 2]  411 	ldw	x, #0x0018
      000169 CDr03r74         [ 4]  412 	call	_putchar
                                    413 ;	src\main.c: 337: printf("%s\r\n", stringSendUART);
      00016C 1E 03            [ 2]  414 	ldw	x, (0x03, sp)
      00016E 89               [ 2]  415 	pushw	x
      00016F 4BrA5            [ 1]  416 	push	#<(___str_3+0)
      000171 4Bs00            [ 1]  417 	push	#((___str_3+0) >> 8)
      000173 CDr00r00         [ 4]  418 	call	_printf
      000176 5B 04            [ 2]  419 	addw	sp, #4
                                    420 ;	src\main.c: 339: free(stringSendUART);
      000178 1E 03            [ 2]  421 	ldw	x, (0x03, sp)
      00017A CDr00r00         [ 4]  422 	call	_free
                                    423 ;	src\main.c: 340: free(stringValue);
      00017D 1E 01            [ 2]  424 	ldw	x, (0x01, sp)
      00017F CDr00r00         [ 4]  425 	call	_free
                                    426 ;	src\main.c: 345: fBME280Humidity = BME280_ReadHumidity();
      000182 CDr00r00         [ 4]  427 	call	_BME280_ReadHumidity
      000185 CFu00u0A         [ 2]  428 	ldw	_fBME280Humidity+2, x
      000188 90 CFu00u08      [ 2]  429 	ldw	_fBME280Humidity+0, y
                                    430 ;	src\main.c: 346: delay_ms(2000);
      00018C AE 07 D0         [ 2]  431 	ldw	x, #0x07d0
      00018F CDr00r00         [ 4]  432 	call	_delay_ms
                                    433 ;	src\main.c: 350: stringValue = (char*)malloc(sizeValueString * sizeof(char));
      000192 AE 00 05         [ 2]  434 	ldw	x, #0x0005
      000195 CDr00r00         [ 4]  435 	call	_malloc
      000198 1F 01            [ 2]  436 	ldw	(0x01, sp), x
                                    437 ;	src\main.c: 351: stringSendUART = (char*)malloc(sizeSendUARTString * sizeof(char));
      00019A AE 00 37         [ 2]  438 	ldw	x, #0x0037
      00019D CDr00r00         [ 4]  439 	call	_malloc
      0001A0 1F 03            [ 2]  440 	ldw	(0x03, sp), x
                                    441 ;	src\main.c: 353: FloatToStr(stringValue, fBME280Humidity, integer_bit, decimal_bit);
      0001A2 4B 02            [ 1]  442 	push	#0x02
      0001A4 4B 02            [ 1]  443 	push	#0x02
      0001A6 CEu00u0A         [ 2]  444 	ldw	x, _fBME280Humidity+2
      0001A9 89               [ 2]  445 	pushw	x
      0001AA CEu00u08         [ 2]  446 	ldw	x, _fBME280Humidity+0
      0001AD 89               [ 2]  447 	pushw	x
      0001AE 1E 07            [ 2]  448 	ldw	x, (0x07, sp)
      0001B0 CDr02r00         [ 4]  449 	call	_FloatToStr
                                    450 ;	src\main.c: 354: sprintf(stringSendUART, placeholderHumidityBME280String, stringValue);
      0001B3 1E 01            [ 2]  451 	ldw	x, (0x01, sp)
      0001B5 89               [ 2]  452 	pushw	x
      0001B6 4Br3E            [ 1]  453 	push	#<(_main_placeholderHumidityBME280String_131072_214+0)
      0001B8 4Bs00            [ 1]  454 	push	#((_main_placeholderHumidityBME280String_131072_214+0) >> 8)
      0001BA 1E 07            [ 2]  455 	ldw	x, (0x07, sp)
      0001BC 89               [ 2]  456 	pushw	x
      0001BD CDr00r00         [ 4]  457 	call	_sprintf
      0001C0 5B 06            [ 2]  458 	addw	sp, #6
                                    459 ;	src\main.c: 355: putchar(0x00);
      0001C2 5F               [ 1]  460 	clrw	x
      0001C3 CDr03r74         [ 4]  461 	call	_putchar
                                    462 ;	src\main.c: 356: putchar(0x00);
      0001C6 5F               [ 1]  463 	clrw	x
      0001C7 CDr03r74         [ 4]  464 	call	_putchar
                                    465 ;	src\main.c: 357: putchar(0x18);
      0001CA AE 00 18         [ 2]  466 	ldw	x, #0x0018
      0001CD CDr03r74         [ 4]  467 	call	_putchar
                                    468 ;	src\main.c: 358: printf("%s\r\n", stringSendUART);
      0001D0 1E 03            [ 2]  469 	ldw	x, (0x03, sp)
      0001D2 89               [ 2]  470 	pushw	x
      0001D3 4BrA5            [ 1]  471 	push	#<(___str_3+0)
      0001D5 4Bs00            [ 1]  472 	push	#((___str_3+0) >> 8)
      0001D7 CDr00r00         [ 4]  473 	call	_printf
      0001DA 5B 04            [ 2]  474 	addw	sp, #4
                                    475 ;	src\main.c: 360: free(stringSendUART);
      0001DC 1E 03            [ 2]  476 	ldw	x, (0x03, sp)
      0001DE CDr00r00         [ 4]  477 	call	_free
                                    478 ;	src\main.c: 361: free(stringValue);
      0001E1 1E 01            [ 2]  479 	ldw	x, (0x01, sp)
      0001E3 CDr00r00         [ 4]  480 	call	_free
                                    481 ;	src\main.c: 370: for (uint8_t i = 0; i < 9; i++) {
      0001E6 4F               [ 1]  482 	clr	a
      0001E7                        483 00112$:
      0001E7 A1 09            [ 1]  484 	cp	a, #0x09
      0001E9 24 0A            [ 1]  485 	jrnc	00104$
                                    486 ;	src\main.c: 371: delay_ms(65535);
      0001EB 88               [ 1]  487 	push	a
      0001EC 5F               [ 1]  488 	clrw	x
      0001ED 5A               [ 2]  489 	decw	x
      0001EE CDr00r00         [ 4]  490 	call	_delay_ms
      0001F1 84               [ 1]  491 	pop	a
                                    492 ;	src\main.c: 370: for (uint8_t i = 0; i < 9; i++) {
      0001F2 4C               [ 1]  493 	inc	a
      0001F3 20 F2            [ 2]  494 	jra	00112$
      0001F5                        495 00104$:
                                    496 ;	src\main.c: 375: LED_OFF;
      0001F5 A6 20            [ 1]  497 	ld	a, #0x20
      0001F7 AE 50 14         [ 2]  498 	ldw	x, #0x5014
      0001FA CDr00r00         [ 4]  499 	call	_GPIO_WriteHigh
                                    500 ;	src\main.c: 385: }
      0001FD CCr00r92         [ 2]  501 	jp	00106$
                                    502 ;	src\main.c: 387: void FloatToStr(char *str, float number, uint8_t integer_bit, uint8_t decimal_bit) {
                                    503 ;	-----------------------------------------
                                    504 ;	 function FloatToStr
                                    505 ;	-----------------------------------------
      000200                        506 _FloatToStr:
      000200 52 17            [ 2]  507 	sub	sp, #23
      000202 1F 15            [ 2]  508 	ldw	(0x15, sp), x
                                    509 ;	src\main.c: 389: uint8_t minus = 0;
      000204 0F 05            [ 1]  510 	clr	(0x05, sp)
                                    511 ;	src\main.c: 392: uint8_t trailing_zero_count = 0;
      000206 0F 06            [ 1]  512 	clr	(0x06, sp)
                                    513 ;	src\main.c: 394: if (number < 0) {
      000208 5F               [ 1]  514 	clrw	x
      000209 89               [ 2]  515 	pushw	x
      00020A 5F               [ 1]  516 	clrw	x
      00020B 89               [ 2]  517 	pushw	x
      00020C 1E 20            [ 2]  518 	ldw	x, (0x20, sp)
      00020E 89               [ 2]  519 	pushw	x
      00020F 1E 20            [ 2]  520 	ldw	x, (0x20, sp)
      000211 89               [ 2]  521 	pushw	x
      000212 CDr00r00         [ 4]  522 	call	___fslt
      000215 4D               [ 1]  523 	tnz	a
      000216 27 14            [ 1]  524 	jreq	00102$
                                    525 ;	src\main.c: 395: str[0] = 0x2D;
      000218 1E 15            [ 2]  526 	ldw	x, (0x15, sp)
      00021A A6 2D            [ 1]  527 	ld	a, #0x2d
      00021C F7               [ 1]  528 	ld	(x), a
                                    529 ;	src\main.c: 396: number *= -1;
      00021D 16 1C            [ 2]  530 	ldw	y, (0x1c, sp)
      00021F 1E 1A            [ 2]  531 	ldw	x, (0x1a, sp)
      000221 58               [ 2]  532 	sllw	x
      000222 8C               [ 1]  533 	ccf
      000223 56               [ 2]  534 	rrcw	x
      000224 17 1C            [ 2]  535 	ldw	(0x1c, sp), y
      000226 1F 1A            [ 2]  536 	ldw	(0x1a, sp), x
                                    537 ;	src\main.c: 397: minus = 1;
      000228 A6 01            [ 1]  538 	ld	a, #0x01
      00022A 6B 05            [ 1]  539 	ld	(0x05, sp), a
      00022C                        540 00102$:
                                    541 ;	src\main.c: 400: temp = (uint32_t)(number/1);
      00022C 16 1C            [ 2]  542 	ldw	y, (0x1c, sp)
      00022E 17 09            [ 2]  543 	ldw	(0x09, sp), y
      000230 16 1A            [ 2]  544 	ldw	y, (0x1a, sp)
      000232 17 07            [ 2]  545 	ldw	(0x07, sp), y
      000234 1E 09            [ 2]  546 	ldw	x, (0x09, sp)
      000236 89               [ 2]  547 	pushw	x
      000237 1E 09            [ 2]  548 	ldw	x, (0x09, sp)
      000239 89               [ 2]  549 	pushw	x
      00023A CDr00r00         [ 4]  550 	call	___fs2ulong
      00023D 5B 04            [ 2]  551 	addw	sp, #4
      00023F 1F 0F            [ 2]  552 	ldw	(0x0f, sp), x
                                    553 ;	src\main.c: 402: for (i = 1; i <= integer_bit; i++) {
      000241 A6 01            [ 1]  554 	ld	a, #0x01
      000243 6B 17            [ 1]  555 	ld	(0x17, sp), a
      000245                        556 00114$:
                                    557 ;	src\main.c: 404: str[integer_bit - i + minus] = table[0];
      000245 7B 1E            [ 1]  558 	ld	a, (0x1e, sp)
      000247 6B 12            [ 1]  559 	ld	(0x12, sp), a
      000249 0F 11            [ 1]  560 	clr	(0x11, sp)
      00024B 7B 05            [ 1]  561 	ld	a, (0x05, sp)
      00024D 6B 0C            [ 1]  562 	ld	(0x0c, sp), a
      00024F 0F 0B            [ 1]  563 	clr	(0x0b, sp)
                                    564 ;	src\main.c: 402: for (i = 1; i <= integer_bit; i++) {
      000251 7B 17            [ 1]  565 	ld	a, (0x17, sp)
      000253 11 1E            [ 1]  566 	cp	a, (0x1e, sp)
      000255 22 3E            [ 1]  567 	jrugt	00106$
                                    568 ;	src\main.c: 404: str[integer_bit - i + minus] = table[0];
      000257 5F               [ 1]  569 	clrw	x
      000258 7B 17            [ 1]  570 	ld	a, (0x17, sp)
      00025A 97               [ 1]  571 	ld	xl, a
                                    572 ;	src\main.c: 406: str[integer_bit - i + minus] = table[temp%10];
      00025B 16 0F            [ 2]  573 	ldw	y, (0x0f, sp)
      00025D 17 13            [ 2]  574 	ldw	(0x13, sp), y
                                    575 ;	src\main.c: 404: str[integer_bit - i + minus] = table[0];
      00025F 50               [ 2]  576 	negw	x
      000260 72 FB 11         [ 2]  577 	addw	x, (0x11, sp)
      000263 72 FB 0B         [ 2]  578 	addw	x, (0x0b, sp)
      000266 72 FB 15         [ 2]  579 	addw	x, (0x15, sp)
      000269 1F 11            [ 2]  580 	ldw	(0x11, sp), x
                                    581 ;	src\main.c: 403: if (temp == 0) {
      00026B 1E 0F            [ 2]  582 	ldw	x, (0x0f, sp)
      00026D 26 08            [ 1]  583 	jrne	00104$
                                    584 ;	src\main.c: 404: str[integer_bit - i + minus] = table[0];
      00026F C6u00u00         [ 1]  585 	ld	a, _table+0
      000272 1E 11            [ 2]  586 	ldw	x, (0x11, sp)
      000274 F7               [ 1]  587 	ld	(x), a
      000275 20 11            [ 2]  588 	jra	00105$
      000277                        589 00104$:
                                    590 ;	src\main.c: 406: str[integer_bit - i + minus] = table[temp%10];
      000277 1E 13            [ 2]  591 	ldw	x, (0x13, sp)
      000279 90 AE 00 0A      [ 2]  592 	ldw	y, #0x000a
      00027D 65               [ 2]  593 	divw	x, y
      00027E 93               [ 1]  594 	ldw	x, y
      00027F 90 9F            [ 1]  595 	ld	a, yl
      000281 97               [ 1]  596 	ld	xl, a
      000282 D6u00u00         [ 1]  597 	ld	a, (_table+0, x)
      000285 1E 11            [ 2]  598 	ldw	x, (0x11, sp)
      000287 F7               [ 1]  599 	ld	(x), a
      000288                        600 00105$:
                                    601 ;	src\main.c: 408: temp /= 10;
      000288 1E 13            [ 2]  602 	ldw	x, (0x13, sp)
      00028A 90 AE 00 0A      [ 2]  603 	ldw	y, #0x000a
      00028E 65               [ 2]  604 	divw	x, y
      00028F 1F 0F            [ 2]  605 	ldw	(0x0f, sp), x
                                    606 ;	src\main.c: 402: for (i = 1; i <= integer_bit; i++) {
      000291 0C 17            [ 1]  607 	inc	(0x17, sp)
      000293 20 B0            [ 2]  608 	jra	00114$
      000295                        609 00106$:
                                    610 ;	src\main.c: 411: for (i = 0; i < (integer_bit - 1); i++) {
      000295 0F 17            [ 1]  611 	clr	(0x17, sp)
      000297                        612 00117$:
      000297 16 11            [ 2]  613 	ldw	y, (0x11, sp)
      000299 17 0D            [ 2]  614 	ldw	(0x0d, sp), y
      00029B 1E 11            [ 2]  615 	ldw	x, (0x11, sp)
      00029D 5A               [ 2]  616 	decw	x
      00029E 1F 13            [ 2]  617 	ldw	(0x13, sp), x
      0002A0 5F               [ 1]  618 	clrw	x
      0002A1 7B 17            [ 1]  619 	ld	a, (0x17, sp)
      0002A3 97               [ 1]  620 	ld	xl, a
      0002A4 13 13            [ 2]  621 	cpw	x, (0x13, sp)
      0002A6 2E 11            [ 1]  622 	jrsge	00110$
                                    623 ;	src\main.c: 412: if (str[i + minus] == '0') {
      0002A8 72 FB 0B         [ 2]  624 	addw	x, (0x0b, sp)
      0002AB 72 FB 15         [ 2]  625 	addw	x, (0x15, sp)
      0002AE F6               [ 1]  626 	ld	a, (x)
      0002AF A1 30            [ 1]  627 	cp	a, #0x30
      0002B1 26 06            [ 1]  628 	jrne	00110$
                                    629 ;	src\main.c: 413: trailing_zero_count += 1;
      0002B3 0C 06            [ 1]  630 	inc	(0x06, sp)
                                    631 ;	src\main.c: 411: for (i = 0; i < (integer_bit - 1); i++) {
      0002B5 0C 17            [ 1]  632 	inc	(0x17, sp)
      0002B7 20 DE            [ 2]  633 	jra	00117$
      0002B9                        634 00110$:
                                    635 ;	src\main.c: 424: for (i = minus; i <= trailing_zero_count + minus; i++) {
      0002B9 7B 05            [ 1]  636 	ld	a, (0x05, sp)
      0002BB 6B 17            [ 1]  637 	ld	(0x17, sp), a
      0002BD                        638 00120$:
      0002BD 7B 06            [ 1]  639 	ld	a, (0x06, sp)
      0002BF 6B 10            [ 1]  640 	ld	(0x10, sp), a
      0002C1 0F 0F            [ 1]  641 	clr	(0x0f, sp)
      0002C3 16 0B            [ 2]  642 	ldw	y, (0x0b, sp)
      0002C5 17 11            [ 2]  643 	ldw	(0x11, sp), y
      0002C7 1E 0F            [ 2]  644 	ldw	x, (0x0f, sp)
      0002C9 72 FB 0B         [ 2]  645 	addw	x, (0x0b, sp)
      0002CC 7B 17            [ 1]  646 	ld	a, (0x17, sp)
      0002CE 6B 14            [ 1]  647 	ld	(0x14, sp), a
      0002D0 0F 13            [ 1]  648 	clr	(0x13, sp)
      0002D2 13 13            [ 2]  649 	cpw	x, (0x13, sp)
      0002D4 2F 16            [ 1]  650 	jrslt	00111$
                                    651 ;	src\main.c: 425: str[i] = str[i + trailing_zero_count];
      0002D6 5F               [ 1]  652 	clrw	x
      0002D7 7B 17            [ 1]  653 	ld	a, (0x17, sp)
      0002D9 97               [ 1]  654 	ld	xl, a
      0002DA 72 FB 15         [ 2]  655 	addw	x, (0x15, sp)
      0002DD 16 13            [ 2]  656 	ldw	y, (0x13, sp)
      0002DF 72 F9 0F         [ 2]  657 	addw	y, (0x0f, sp)
      0002E2 72 F9 15         [ 2]  658 	addw	y, (0x15, sp)
      0002E5 90 F6            [ 1]  659 	ld	a, (y)
      0002E7 F7               [ 1]  660 	ld	(x), a
                                    661 ;	src\main.c: 424: for (i = minus; i <= trailing_zero_count + minus; i++) {
      0002E8 0C 17            [ 1]  662 	inc	(0x17, sp)
      0002EA 20 D1            [ 2]  663 	jra	00120$
      0002EC                        664 00111$:
                                    665 ;	src\main.c: 428: *(str + integer_bit - trailing_zero_count + minus) = '.';
      0002EC 5F               [ 1]  666 	clrw	x
      0002ED 7B 1E            [ 1]  667 	ld	a, (0x1e, sp)
      0002EF 97               [ 1]  668 	ld	xl, a
      0002F0 72 FB 15         [ 2]  669 	addw	x, (0x15, sp)
      0002F3 1F 13            [ 2]  670 	ldw	(0x13, sp), x
      0002F5 72 F0 0F         [ 2]  671 	subw	x, (0x0f, sp)
      0002F8 9F               [ 1]  672 	ld	a, xl
      0002F9 1B 05            [ 1]  673 	add	a, (0x05, sp)
      0002FB 02               [ 1]  674 	rlwa	x
      0002FC A9 00            [ 1]  675 	adc	a, #0x00
      0002FE 95               [ 1]  676 	ld	xh, a
      0002FF A6 2E            [ 1]  677 	ld	a, #0x2e
      000301 F7               [ 1]  678 	ld	(x), a
                                    679 ;	src\main.c: 430: t2 = number;
      000302 16 09            [ 2]  680 	ldw	y, (0x09, sp)
      000304 17 03            [ 2]  681 	ldw	(0x03, sp), y
      000306 16 07            [ 2]  682 	ldw	y, (0x07, sp)
      000308 17 01            [ 2]  683 	ldw	(0x01, sp), y
                                    684 ;	src\main.c: 432: for (i = 1; i <= decimal_bit; i++) {
      00030A A6 01            [ 1]  685 	ld	a, #0x01
      00030C 6B 17            [ 1]  686 	ld	(0x17, sp), a
      00030E                        687 00123$:
      00030E 7B 17            [ 1]  688 	ld	a, (0x17, sp)
      000310 11 1F            [ 1]  689 	cp	a, (0x1f, sp)
      000312 22 46            [ 1]  690 	jrugt	00112$
                                    691 ;	src\main.c: 433: temp = t2 * 10;
      000314 1E 03            [ 2]  692 	ldw	x, (0x03, sp)
      000316 89               [ 2]  693 	pushw	x
      000317 1E 03            [ 2]  694 	ldw	x, (0x03, sp)
      000319 89               [ 2]  695 	pushw	x
      00031A 5F               [ 1]  696 	clrw	x
      00031B 89               [ 2]  697 	pushw	x
      00031C 4B 20            [ 1]  698 	push	#0x20
      00031E 4B 41            [ 1]  699 	push	#0x41
      000320 CDr00r00         [ 4]  700 	call	___fsmul
      000323 1F 0B            [ 2]  701 	ldw	(0x0b, sp), x
      000325 17 09            [ 2]  702 	ldw	(0x09, sp), y
      000327 1E 0B            [ 2]  703 	ldw	x, (0x0b, sp)
      000329 89               [ 2]  704 	pushw	x
      00032A 1E 0B            [ 2]  705 	ldw	x, (0x0b, sp)
      00032C 89               [ 2]  706 	pushw	x
      00032D CDr00r00         [ 4]  707 	call	___fs2uint
      000330 51               [ 1]  708 	exgw	x, y
                                    709 ;	src\main.c: 434: str[integer_bit + i - trailing_zero_count + minus] = table[temp%10];
      000331 7B 17            [ 1]  710 	ld	a, (0x17, sp)
      000333 5F               [ 1]  711 	clrw	x
      000334 97               [ 1]  712 	ld	xl, a
      000335 72 FB 0D         [ 2]  713 	addw	x, (0x0d, sp)
      000338 72 F0 0F         [ 2]  714 	subw	x, (0x0f, sp)
      00033B 72 FB 11         [ 2]  715 	addw	x, (0x11, sp)
      00033E 72 FB 15         [ 2]  716 	addw	x, (0x15, sp)
      000341 89               [ 2]  717 	pushw	x
      000342 93               [ 1]  718 	ldw	x, y
      000343 90 AE 00 0A      [ 2]  719 	ldw	y, #0x000a
      000347 65               [ 2]  720 	divw	x, y
      000348 85               [ 2]  721 	popw	x
      000349 90 D6u00u00      [ 1]  722 	ld	a, (_table+0, y)
      00034D F7               [ 1]  723 	ld	(x), a
                                    724 ;	src\main.c: 435: t2 *= 10;
      00034E 1E 0B            [ 2]  725 	ldw	x, (0x0b, sp)
      000350 16 09            [ 2]  726 	ldw	y, (0x09, sp)
      000352 1F 03            [ 2]  727 	ldw	(0x03, sp), x
      000354 17 01            [ 2]  728 	ldw	(0x01, sp), y
                                    729 ;	src\main.c: 432: for (i = 1; i <= decimal_bit; i++) {
      000356 0C 17            [ 1]  730 	inc	(0x17, sp)
      000358 20 B4            [ 2]  731 	jra	00123$
      00035A                        732 00112$:
                                    733 ;	src\main.c: 438: *(str + integer_bit + 1 + decimal_bit - trailing_zero_count + minus) = '\0';
      00035A 1E 13            [ 2]  734 	ldw	x, (0x13, sp)
      00035C 5C               [ 1]  735 	incw	x
      00035D 9F               [ 1]  736 	ld	a, xl
      00035E 1B 1F            [ 1]  737 	add	a, (0x1f, sp)
      000360 02               [ 1]  738 	rlwa	x
      000361 A9 00            [ 1]  739 	adc	a, #0x00
      000363 95               [ 1]  740 	ld	xh, a
      000364 72 F0 0F         [ 2]  741 	subw	x, (0x0f, sp)
      000367 9F               [ 1]  742 	ld	a, xl
      000368 1B 05            [ 1]  743 	add	a, (0x05, sp)
      00036A 02               [ 1]  744 	rlwa	x
      00036B A9 00            [ 1]  745 	adc	a, #0x00
      00036D 95               [ 1]  746 	ld	xh, a
      00036E 7F               [ 1]  747 	clr	(x)
                                    748 ;	src\main.c: 439: }
      00036F 1E 18            [ 2]  749 	ldw	x, (24, sp)
      000371 5B 1F            [ 2]  750 	addw	sp, #31
      000373 FC               [ 2]  751 	jp	(x)
                                    752 ;	src\main.c: 446: PUTCHAR_PROTOTYPE
                                    753 ;	-----------------------------------------
                                    754 ;	 function putchar
                                    755 ;	-----------------------------------------
      000374                        756 _putchar:
                                    757 ;	src\main.c: 449: UART_SENDDATA8(c);
      000374 9F               [ 1]  758 	ld	a, xl
      000375 89               [ 2]  759 	pushw	x
      000376 CDr00r00         [ 4]  760 	call	_UART2_SendData8
      000379 85               [ 2]  761 	popw	x
                                    762 ;	src\main.c: 451: while (UART_GETFLAGSTATUS(UART_FLAG_TXE) == RESET);
      00037A                        763 00101$:
      00037A 89               [ 2]  764 	pushw	x
      00037B AE 00 80         [ 2]  765 	ldw	x, #0x0080
      00037E CDr00r00         [ 4]  766 	call	_UART2_GetFlagStatus
      000381 85               [ 2]  767 	popw	x
      000382 4D               [ 1]  768 	tnz	a
      000383 27 F5            [ 1]  769 	jreq	00101$
                                    770 ;	src\main.c: 453: return (c);
                                    771 ;	src\main.c: 454: }
      000385 81               [ 4]  772 	ret
                                    773 ;	src\main.c: 461: GETCHAR_PROTOTYPE
                                    774 ;	-----------------------------------------
                                    775 ;	 function getchar
                                    776 ;	-----------------------------------------
      000386                        777 _getchar:
                                    778 ;	src\main.c: 469: while (UART_GETFLAGSTATUS(UART_FLAG_TXE) == RESET);
      000386                        779 00101$:
      000386 AE 00 80         [ 2]  780 	ldw	x, #0x0080
      000389 CDr00r00         [ 4]  781 	call	_UART2_GetFlagStatus
      00038C 4D               [ 1]  782 	tnz	a
      00038D 27 F7            [ 1]  783 	jreq	00101$
                                    784 ;	src\main.c: 470: c = UART_RECEIVEDATA8();
      00038F CDr00r00         [ 4]  785 	call	_UART2_ReceiveData8
      000392 5F               [ 1]  786 	clrw	x
                                    787 ;	src\main.c: 471: return (c);
      000393 97               [ 1]  788 	ld	xl, a
                                    789 ;	src\main.c: 472: }
      000394 81               [ 4]  790 	ret
                                    791 ;	src\main.c: 483: void assert_failed(uint8_t* file, uint32_t line)
                                    792 ;	-----------------------------------------
                                    793 ;	 function assert_failed
                                    794 ;	-----------------------------------------
      000395                        795 _assert_failed:
                                    796 ;	src\main.c: 490: while (1)
      000395                        797 00102$:
      000395 20 FE            [ 2]  798 	jra	00102$
                                    799 ;	src\main.c: 493: }
      000397 1E 01            [ 2]  800 	ldw	x, (1, sp)
      000399 5B 06            [ 2]  801 	addw	sp, #6
      00039B FC               [ 2]  802 	jp	(x)
                                    803 	.area CODE
                                    804 	.area CONST
      000000                        805 _table:
      000000 30                     806 	.db #0x30	; 48	'0'
      000001 31                     807 	.db #0x31	; 49	'1'
      000002 32                     808 	.db #0x32	; 50	'2'
      000003 33                     809 	.db #0x33	; 51	'3'
      000004 34                     810 	.db #0x34	; 52	'4'
      000005 35                     811 	.db #0x35	; 53	'5'
      000006 36                     812 	.db #0x36	; 54	'6'
      000007 37                     813 	.db #0x37	; 55	'7'
      000008 38                     814 	.db #0x38	; 56	'8'
      000009 39                     815 	.db #0x39	; 57	'9'
      00000A                        816 _main_placeholderDS18X20String_131072_214:
      00000A 7B                     817 	.ascii "{"
      00000B 22                     818 	.db 0x22
      00000C 74 6F 70 69 63         819 	.ascii "topic"
      000011 22                     820 	.db 0x22
      000012 20 3A 20               821 	.ascii " : "
      000015 22                     822 	.db 0x22
      000016 6D 71 74 74 2F 74 65   823 	.ascii "mqtt/temperature-room"
             6D 70 65 72 61 74 75
             72 65 2D 72 6F 6F 6D
      00002B 22                     824 	.db 0x22
      00002C 2C 20                  825 	.ascii ", "
      00002E 22                     826 	.db 0x22
      00002F 76 61 6C 75 65         827 	.ascii "value"
      000034 22                     828 	.db 0x22
      000035 20 3A 20               829 	.ascii " : "
      000038 22                     830 	.db 0x22
      000039 25 73                  831 	.ascii "%s"
      00003B 22                     832 	.db 0x22
      00003C 7D                     833 	.ascii "}"
      00003D 00                     834 	.db 0x00
      00003E                        835 _main_placeholderHumidityBME280String_131072_214:
      00003E 7B                     836 	.ascii "{"
      00003F 22                     837 	.db 0x22
      000040 74 6F 70 69 63         838 	.ascii "topic"
      000045 22                     839 	.db 0x22
      000046 20 3A 20               840 	.ascii " : "
      000049 22                     841 	.db 0x22
      00004A 6D 71 74 74 2F 68 75   842 	.ascii "mqtt/humidity-bme280"
             6D 69 64 69 74 79 2D
             62 6D 65 32 38 30
      00005E 22                     843 	.db 0x22
      00005F 2C 20                  844 	.ascii ", "
      000061 22                     845 	.db 0x22
      000062 76 61 6C 75 65         846 	.ascii "value"
      000067 22                     847 	.db 0x22
      000068 3A 20                  848 	.ascii ": "
      00006A 22                     849 	.db 0x22
      00006B 25 73                  850 	.ascii "%s"
      00006D 22                     851 	.db 0x22
      00006E 7D                     852 	.ascii "}"
      00006F 00                     853 	.db 0x00
      000070                        854 _main_placeholderTemperatureBME280String_131072_214:
      000070 7B                     855 	.ascii "{"
      000071 22                     856 	.db 0x22
      000072 74 6F 70 69 63         857 	.ascii "topic"
      000077 22                     858 	.db 0x22
      000078 20 3A 20               859 	.ascii " : "
      00007B 22                     860 	.db 0x22
      00007C 6D 71 74 74 2F 74 65   861 	.ascii "mqtt/temperature-bme280"
             6D 70 65 72 61 74 75
             72 65 2D 62 6D 65 32
             38 30
      000093 22                     862 	.db 0x22
      000094 2C 20                  863 	.ascii ", "
      000096 22                     864 	.db 0x22
      000097 76 61 6C 75 65         865 	.ascii "value"
      00009C 22                     866 	.db 0x22
      00009D 3A 20                  867 	.ascii ": "
      00009F 22                     868 	.db 0x22
      0000A0 25 73                  869 	.ascii "%s"
      0000A2 22                     870 	.db 0x22
      0000A3 7D                     871 	.ascii "}"
      0000A4 00                     872 	.db 0x00
                                    873 	.area CONST
      0000A5                        874 ___str_3:
      0000A5 25 73                  875 	.ascii "%s"
      0000A7 0D                     876 	.db 0x0d
      0000A8 0A                     877 	.db 0x0a
      0000A9 00                     878 	.db 0x00
                                    879 	.area CODE
                                    880 	.area INITIALIZER
      000000                        881 __xinit__fDS18X20Temperature:
      000000 C2 C8 00 00            882 	.byte #0xc2, #0xc8, #0x00, #0x00	; -1.000000e+02
      000004                        883 __xinit__fBME280Temperature:
      000004 00 00 00 00            884 	.byte #0x00, #0x00, #0x00, #0x00	;  0.000000e+00
      000008                        885 __xinit__fBME280Humidity:
      000008 00 00 00 00            886 	.byte #0x00, #0x00, #0x00, #0x00	;  0.000000e+00
                                    887 	.area CABS (ABS)
