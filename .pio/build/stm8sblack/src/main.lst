                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _UART_Setup
                                     13 	.globl _GPIO_Setup
                                     14 	.globl _Clock_Setup
                                     15 	.globl _floatToStr
                                     16 	.globl _BME280_ReadHumidity
                                     17 	.globl _BME280_ReadPressure
                                     18 	.globl _BME280_ReadTemperature
                                     19 	.globl _BME280_SetMode
                                     20 	.globl _BME280_ReadRegisters
                                     21 	.globl _BME280_Setup
                                     22 	.globl _DS18X20_Setup
                                     23 	.globl _DS18X20_Get_Temperature
                                     24 	.globl _DS18X20_Read_ID
                                     25 	.globl _DS18X20_Reset
                                     26 	.globl _I2C_Setup
                                     27 	.globl _delay_ms
                                     28 	.globl _free
                                     29 	.globl _malloc
                                     30 	.globl _sprintf
                                     31 	.globl _printf
                                     32 	.globl _UART2_GetFlagStatus
                                     33 	.globl _UART2_SendData8
                                     34 	.globl _UART2_ReceiveData8
                                     35 	.globl _UART2_Init
                                     36 	.globl _UART2_DeInit
                                     37 	.globl _GPIO_WriteLow
                                     38 	.globl _GPIO_WriteHigh
                                     39 	.globl _GPIO_Init
                                     40 	.globl _GPIO_DeInit
                                     41 	.globl _CLK_GetFlagStatus
                                     42 	.globl _CLK_SYSCLKConfig
                                     43 	.globl _CLK_HSIPrescalerConfig
                                     44 	.globl _CLK_ClockSwitchConfig
                                     45 	.globl _CLK_PeripheralClockConfig
                                     46 	.globl _CLK_ClockSwitchCmd
                                     47 	.globl _CLK_LSICmd
                                     48 	.globl _CLK_HSICmd
                                     49 	.globl _CLK_HSECmd
                                     50 	.globl _CLK_DeInit
                                     51 	.globl _sizeSendUARTString
                                     52 	.globl _sizeValueString
                                     53 	.globl _stringValue
                                     54 	.globl _stringSendUART
                                     55 	.globl _fBME280Pressure
                                     56 	.globl _fBME280Humidity
                                     57 	.globl _fBME280Temperature
                                     58 	.globl _fDS18X20Temperature
                                     59 	.globl _decimal_bit
                                     60 	.globl _integer_bit
                                     61 	.globl _str1
                                     62 	.globl _sString
                                     63 	.globl _iI2CRead
                                     64 	.globl _iI2CWrite
                                     65 	.globl _iDS18X20RomID
                                     66 	.globl _putchar
                                     67 	.globl _getchar
                                     68 	.globl _assert_failed
                                     69 ;--------------------------------------------------------
                                     70 ; ram data
                                     71 ;--------------------------------------------------------
                                     72 	.area DATA
      000000                         73 _iDS18X20RomID::
      000000                         74 	.ds 8
      000008                         75 _iI2CWrite::
      000008                         76 	.ds 3
      00000B                         77 _iI2CRead::
      00000B                         78 	.ds 7
      000012                         79 _sString::
      000012                         80 	.ds 128
      000092                         81 _str1::
      000092                         82 	.ds 128
      000112                         83 _integer_bit::
      000112                         84 	.ds 1
      000113                         85 _decimal_bit::
      000113                         86 	.ds 1
                                     87 ;--------------------------------------------------------
                                     88 ; ram data
                                     89 ;--------------------------------------------------------
                                     90 	.area INITIALIZED
      000000                         91 _fDS18X20Temperature::
      000000                         92 	.ds 4
      000004                         93 _fBME280Temperature::
      000004                         94 	.ds 4
      000008                         95 _fBME280Humidity::
      000008                         96 	.ds 4
      00000C                         97 _fBME280Pressure::
      00000C                         98 	.ds 4
      000010                         99 _stringSendUART::
      000010                        100 	.ds 2
      000012                        101 _stringValue::
      000012                        102 	.ds 2
      000014                        103 _sizeValueString::
      000014                        104 	.ds 1
      000015                        105 _sizeSendUARTString::
      000015                        106 	.ds 1
                                    107 ;--------------------------------------------------------
                                    108 ; Stack segment in internal ram
                                    109 ;--------------------------------------------------------
                                    110 	.area	SSEG
      000000                        111 __start__stack:
      000000                        112 	.ds	1
                                    113 
                                    114 ;--------------------------------------------------------
                                    115 ; absolute external ram data
                                    116 ;--------------------------------------------------------
                                    117 	.area DABS (ABS)
                                    118 
                                    119 ; default segment ordering for linker
                                    120 	.area HOME
                                    121 	.area GSINIT
                                    122 	.area GSFINAL
                                    123 	.area CONST
                                    124 	.area INITIALIZER
                                    125 	.area CODE
                                    126 
                                    127 ;--------------------------------------------------------
                                    128 ; interrupt vector
                                    129 ;--------------------------------------------------------
                                    130 	.area HOME
      000000                        131 __interrupt_vect:
      000000 82v00u00u00            132 	int s_GSINIT ; reset
      000004 82v00u00u00            133 	int _TRAP_IRQHandler ; trap
      000008 82v00u00u00            134 	int _TLI_IRQHandler ; int0
      00000C 82v00u00u00            135 	int _AWU_IRQHandler ; int1
      000010 82v00u00u00            136 	int _CLK_IRQHandler ; int2
      000014 82v00u00u00            137 	int _EXTI_PORTA_IRQHandler ; int3
      000018 82v00u00u00            138 	int _EXTI_PORTB_IRQHandler ; int4
      00001C 82v00u00u00            139 	int _EXTI_PORTC_IRQHandler ; int5
      000020 82v00u00u00            140 	int _EXTI_PORTD_IRQHandler ; int6
      000024 82v00u00u00            141 	int _EXTI_PORTE_IRQHandler ; int7
      000028 82 00 00 00            142 	int 0x000000 ; int8
      00002C 82 00 00 00            143 	int 0x000000 ; int9
      000030 82v00u00u00            144 	int _SPI_IRQHandler ; int10
      000034 82v00u00u00            145 	int _TIM1_UPD_OVF_TRG_BRK_IRQHandler ; int11
      000038 82v00u00u00            146 	int _TIM1_CAP_COM_IRQHandler ; int12
      00003C 82v00u00u00            147 	int _TIM2_UPD_OVF_BRK_IRQHandler ; int13
      000040 82v00u00u00            148 	int _TIM2_CAP_COM_IRQHandler ; int14
      000044 82v00u00u00            149 	int _TIM3_UPD_OVF_BRK_IRQHandler ; int15
      000048 82v00u00u00            150 	int _TIM3_CAP_COM_IRQHandler ; int16
      00004C 82 00 00 00            151 	int 0x000000 ; int17
      000050 82 00 00 00            152 	int 0x000000 ; int18
      000054 82v00u00u00            153 	int _I2C_IRQHandler ; int19
      000058 82v00u00u00            154 	int _UART2_TX_IRQHandler ; int20
      00005C 82v00u00u00            155 	int _UART2_RX_IRQHandler ; int21
      000060 82v00u00u00            156 	int _ADC1_IRQHandler ; int22
      000064 82v00u00u00            157 	int _TIM4_UPD_OVF_IRQHandler ; int23
      000068 82v00u00u00            158 	int _EEPROM_EEC_IRQHandler ; int24
                                    159 ;--------------------------------------------------------
                                    160 ; global & static initialisations
                                    161 ;--------------------------------------------------------
                                    162 	.area HOME
                                    163 	.area GSINIT
                                    164 	.area GSFINAL
                                    165 	.area GSINIT
      000000                        166 __sdcc_init_data:
                                    167 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]  168 	ldw x, #l_DATA
      000003 27 07            [ 1]  169 	jreq	00002$
      000005                        170 00001$:
      000005 72 4FuFFuFF      [ 1]  171 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  172 	decw x
      00000A 26 F9            [ 1]  173 	jrne	00001$
      00000C                        174 00002$:
      00000C AEr00r00         [ 2]  175 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  176 	jreq	00004$
      000011                        177 00003$:
      000011 D6uFFuFF         [ 1]  178 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  179 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  180 	decw	x
      000018 26 F7            [ 1]  181 	jrne	00003$
      00001A                        182 00004$:
                                    183 ; stm8_genXINIT() end
                                    184 	.area GSFINAL
      000000 CCr00r6C         [ 2]  185 	jp	__sdcc_program_startup
                                    186 ;--------------------------------------------------------
                                    187 ; Home
                                    188 ;--------------------------------------------------------
                                    189 	.area HOME
                                    190 	.area HOME
      00006C                        191 __sdcc_program_startup:
      00006C CCr00r7E         [ 2]  192 	jp	_main
                                    193 ;	return from main will return to caller
                                    194 ;--------------------------------------------------------
                                    195 ; code
                                    196 ;--------------------------------------------------------
                                    197 	.area CODE
                                    198 ;	src\main.c: 155: void Clock_Setup(void) {
                                    199 ;	-----------------------------------------
                                    200 ;	 function Clock_Setup
                                    201 ;	-----------------------------------------
      000000                        202 _Clock_Setup:
                                    203 ;	src\main.c: 156: CLK_DeInit();
      000000 CDr00r00         [ 4]  204 	call	_CLK_DeInit
                                    205 ;	src\main.c: 157: CLK_HSECmd(DISABLE);
      000003 4F               [ 1]  206 	clr	a
      000004 CDr00r00         [ 4]  207 	call	_CLK_HSECmd
                                    208 ;	src\main.c: 158: CLK_LSICmd(DISABLE);
      000007 4F               [ 1]  209 	clr	a
      000008 CDr00r00         [ 4]  210 	call	_CLK_LSICmd
                                    211 ;	src\main.c: 159: CLK_HSICmd(ENABLE);
      00000B A6 01            [ 1]  212 	ld	a, #0x01
      00000D CDr00r00         [ 4]  213 	call	_CLK_HSICmd
                                    214 ;	src\main.c: 160: while(CLK_GetFlagStatus(CLK_FLAG_HSIRDY) == FALSE);
      000010                        215 00101$:
      000010 AE 01 02         [ 2]  216 	ldw	x, #0x0102
      000013 CDr00r00         [ 4]  217 	call	_CLK_GetFlagStatus
      000016 4D               [ 1]  218 	tnz	a
      000017 27 F7            [ 1]  219 	jreq	00101$
                                    220 ;	src\main.c: 161: CLK_ClockSwitchCmd(ENABLE);
      000019 A6 01            [ 1]  221 	ld	a, #0x01
      00001B CDr00r00         [ 4]  222 	call	_CLK_ClockSwitchCmd
                                    223 ;	src\main.c: 162: CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
      00001E 4F               [ 1]  224 	clr	a
      00001F CDr00r00         [ 4]  225 	call	_CLK_HSIPrescalerConfig
                                    226 ;	src\main.c: 163: CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);
      000022 A6 80            [ 1]  227 	ld	a, #0x80
      000024 CDr00r00         [ 4]  228 	call	_CLK_SYSCLKConfig
                                    229 ;	src\main.c: 164: CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO, CLK_SOURCE_HSI, DISABLE, CLK_CURRENTCLOCKSTATE_ENABLE);
      000027 4B 01            [ 1]  230 	push	#0x01
      000029 4B 00            [ 1]  231 	push	#0x00
      00002B 4B E1            [ 1]  232 	push	#0xe1
      00002D A6 01            [ 1]  233 	ld	a, #0x01
      00002F CDr00r00         [ 4]  234 	call	_CLK_ClockSwitchConfig
                                    235 ;	src\main.c: 166: CLK_PeripheralClockConfig(CLK_PERIPHERAL_SPI, DISABLE);
      000032 4B 00            [ 1]  236 	push	#0x00
      000034 A6 01            [ 1]  237 	ld	a, #0x01
      000036 CDr00r00         [ 4]  238 	call	_CLK_PeripheralClockConfig
                                    239 ;	src\main.c: 167: CLK_PeripheralClockConfig(CLK_PERIPHERAL_AWU, DISABLE);
      000039 4B 00            [ 1]  240 	push	#0x00
      00003B A6 12            [ 1]  241 	ld	a, #0x12
      00003D CDr00r00         [ 4]  242 	call	_CLK_PeripheralClockConfig
                                    243 ;	src\main.c: 169: CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER1, DISABLE);
      000040 4B 00            [ 1]  244 	push	#0x00
      000042 A6 07            [ 1]  245 	ld	a, #0x07
      000044 CDr00r00         [ 4]  246 	call	_CLK_PeripheralClockConfig
                                    247 ;	src\main.c: 170: CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2, DISABLE);
      000047 4B 00            [ 1]  248 	push	#0x00
      000049 A6 05            [ 1]  249 	ld	a, #0x05
      00004B CDr00r00         [ 4]  250 	call	_CLK_PeripheralClockConfig
                                    251 ;	src\main.c: 171: CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER4, DISABLE);
      00004E 4B 00            [ 1]  252 	push	#0x00
      000050 A6 04            [ 1]  253 	ld	a, #0x04
      000052 CDr00r00         [ 4]  254 	call	_CLK_PeripheralClockConfig
                                    255 ;	src\main.c: 172: }
      000055 81               [ 4]  256 	ret
                                    257 ;	src\main.c: 174: void GPIO_Setup(void) {
                                    258 ;	-----------------------------------------
                                    259 ;	 function GPIO_Setup
                                    260 ;	-----------------------------------------
      000056                        261 _GPIO_Setup:
                                    262 ;	src\main.c: 179: GPIO_DeInit(GPIOE);
      000056 AE 50 14         [ 2]  263 	ldw	x, #0x5014
      000059 CDr00r00         [ 4]  264 	call	_GPIO_DeInit
                                    265 ;	src\main.c: 180: GPIO_Init(LED_PORT, LED_PIN, GPIO_MODE_OUT_PP_HIGH_FAST);
      00005C 4B F0            [ 1]  266 	push	#0xf0
      00005E A6 20            [ 1]  267 	ld	a, #0x20
      000060 AE 50 14         [ 2]  268 	ldw	x, #0x5014
      000063 CDr00r00         [ 4]  269 	call	_GPIO_Init
                                    270 ;	src\main.c: 181: }
      000066 81               [ 4]  271 	ret
                                    272 ;	src\main.c: 183: void UART_Setup() {
                                    273 ;	-----------------------------------------
                                    274 ;	 function UART_Setup
                                    275 ;	-----------------------------------------
      000067                        276 _UART_Setup:
                                    277 ;	src\main.c: 184: UART_DEINIT();
      000067 CDr00r00         [ 4]  278 	call	_UART2_DeInit
                                    279 ;	src\main.c: 194: UART_INIT((uint32_t)9600, UART_WORDLENGTH_8D, UART_STOPBITS_1, UART_PARITY_NO, UART_SYNCMODE_CLOCK_DISABLE, UART_MODE_TXRX_ENABLE);
      00006A 4B 0C            [ 1]  280 	push	#0x0c
      00006C 4B 80            [ 1]  281 	push	#0x80
      00006E 4B 00            [ 1]  282 	push	#0x00
      000070 4B 00            [ 1]  283 	push	#0x00
      000072 4B 00            [ 1]  284 	push	#0x00
      000074 4B 80            [ 1]  285 	push	#0x80
      000076 4B 25            [ 1]  286 	push	#0x25
      000078 5F               [ 1]  287 	clrw	x
      000079 89               [ 2]  288 	pushw	x
      00007A CDr00r00         [ 4]  289 	call	_UART2_Init
                                    290 ;	src\main.c: 195: }
      00007D 81               [ 4]  291 	ret
                                    292 ;	src\main.c: 205: void main(void) {
                                    293 ;	-----------------------------------------
                                    294 ;	 function main
                                    295 ;	-----------------------------------------
      00007E                        296 _main:
                                    297 ;	src\main.c: 206: Clock_Setup();
      00007E CDr00r00         [ 4]  298 	call	_Clock_Setup
                                    299 ;	src\main.c: 207: GPIO_Setup();
      000081 CDr00r56         [ 4]  300 	call	_GPIO_Setup
                                    301 ;	src\main.c: 208: DS18X20_Setup();
      000084 CDr00r00         [ 4]  302 	call	_DS18X20_Setup
                                    303 ;	src\main.c: 209: I2C_Setup();
      000087 CDr00r00         [ 4]  304 	call	_I2C_Setup
                                    305 ;	src\main.c: 210: UART_Setup();
      00008A CDr00r67         [ 4]  306 	call	_UART_Setup
                                    307 ;	src\main.c: 212: BME280_Setup();
      00008D CDr00r00         [ 4]  308 	call	_BME280_Setup
                                    309 ;	src\main.c: 228: LED_ON;
      000090 A6 20            [ 1]  310 	ld	a, #0x20
      000092 AE 50 14         [ 2]  311 	ldw	x, #0x5014
      000095 CDr00r00         [ 4]  312 	call	_GPIO_WriteLow
                                    313 ;	src\main.c: 230: while (1) {
      000098                        314 00106$:
                                    315 ;	src\main.c: 233: DS18X20_Reset();
      000098 CDr00r00         [ 4]  316 	call	_DS18X20_Reset
                                    317 ;	src\main.c: 235: delay_ms(2000);
      00009B AE 07 D0         [ 2]  318 	ldw	x, #0x07d0
      00009E CDr00r00         [ 4]  319 	call	_delay_ms
                                    320 ;	src\main.c: 237: if (!DS18X20_Read_ID(iDS18X20RomID)) {
      0000A1 AEr00r00         [ 2]  321 	ldw	x, #(_iDS18X20RomID+0)
      0000A4 CDr00r00         [ 4]  322 	call	_DS18X20_Read_ID
      0000A7 4D               [ 1]  323 	tnz	a
      0000A8 26 0E            [ 1]  324 	jrne	00103$
                                    325 ;	src\main.c: 238: for (uint8_t i = 0; i < 8; i++) {
      0000AA 4F               [ 1]  326 	clr	a
      0000AB                        327 00109$:
      0000AB A1 08            [ 1]  328 	cp	a, #0x08
      0000AD 24 09            [ 1]  329 	jrnc	00103$
                                    330 ;	src\main.c: 239: iDS18X20RomID[i] = 0;
      0000AF 5F               [ 1]  331 	clrw	x
      0000B0 97               [ 1]  332 	ld	xl, a
      0000B1 1Cr00r00         [ 2]  333 	addw	x, #(_iDS18X20RomID+0)
      0000B4 7F               [ 1]  334 	clr	(x)
                                    335 ;	src\main.c: 238: for (uint8_t i = 0; i < 8; i++) {
      0000B5 4C               [ 1]  336 	inc	a
      0000B6 20 F3            [ 2]  337 	jra	00109$
      0000B8                        338 00103$:
                                    339 ;	src\main.c: 243: fDS18X20Temperature = DS18X20_Get_Temperature();
      0000B8 CDr00r00         [ 4]  340 	call	_DS18X20_Get_Temperature
      0000BB CFu00u02         [ 2]  341 	ldw	_fDS18X20Temperature+2, x
      0000BE 90 CFu00u00      [ 2]  342 	ldw	_fDS18X20Temperature+0, y
                                    343 ;	src\main.c: 244: integer_bit = 2;
      0000C2 35 02u01u12      [ 1]  344 	mov	_integer_bit+0, #0x02
                                    345 ;	src\main.c: 245: decimal_bit = 2;
      0000C6 35 02u01u13      [ 1]  346 	mov	_decimal_bit+0, #0x02
                                    347 ;	src\main.c: 261: sizeValueString = integer_bit + decimal_bit + 1;
      0000CA 35 05u00u14      [ 1]  348 	mov	_sizeValueString+0, #0x05
                                    349 ;	src\main.c: 262: sizeSendUARTString = sizeof(placeholderDS18X20String) + sizeValueString;
      0000CE 35 39u00u15      [ 1]  350 	mov	_sizeSendUARTString+0, #0x39
                                    351 ;	src\main.c: 263: stringValue = (char*)malloc(sizeValueString * sizeof(char));
      0000D2 AE 00 05         [ 2]  352 	ldw	x, #0x0005
      0000D5 CDr00r00         [ 4]  353 	call	_malloc
      0000D8 CFu00u12         [ 2]  354 	ldw	_stringValue+0, x
                                    355 ;	src\main.c: 264: stringSendUART = (char*)malloc(sizeSendUARTString * sizeof(char));
      0000DB C6u00u15         [ 1]  356 	ld	a, _sizeSendUARTString+0
      0000DE 5F               [ 1]  357 	clrw	x
      0000DF 97               [ 1]  358 	ld	xl, a
      0000E0 CDr00r00         [ 4]  359 	call	_malloc
      0000E3 CFu00u10         [ 2]  360 	ldw	_stringSendUART+0, x
                                    361 ;	src\main.c: 266: floatToStr(stringValue, fDS18X20Temperature, integer_bit, decimal_bit);
      0000E6 3Bu01u13         [ 1]  362 	push	_decimal_bit+0
      0000E9 3Bu01u12         [ 1]  363 	push	_integer_bit+0
      0000EC CEu00u02         [ 2]  364 	ldw	x, _fDS18X20Temperature+2
      0000EF 89               [ 2]  365 	pushw	x
      0000F0 CEu00u00         [ 2]  366 	ldw	x, _fDS18X20Temperature+0
      0000F3 89               [ 2]  367 	pushw	x
      0000F4 CEu00u12         [ 2]  368 	ldw	x, _stringValue+0
      0000F7 CDr00r00         [ 4]  369 	call	_floatToStr
                                    370 ;	src\main.c: 268: sprintf(stringSendUART, placeholderDS18X20String, stringValue);
      0000FA CEu00u12         [ 2]  371 	ldw	x, _stringValue+0
      0000FD 89               [ 2]  372 	pushw	x
      0000FE 4Br00            [ 1]  373 	push	#<(_main_placeholderDS18X20String_65537_219+0)
      000100 4Bs00            [ 1]  374 	push	#((_main_placeholderDS18X20String_65537_219+0) >> 8)
      000102 CEu00u10         [ 2]  375 	ldw	x, _stringSendUART+0
      000105 89               [ 2]  376 	pushw	x
      000106 CDr00r00         [ 4]  377 	call	_sprintf
      000109 5B 06            [ 2]  378 	addw	sp, #6
                                    379 ;	src\main.c: 269: putchar(0x00);
      00010B 5F               [ 1]  380 	clrw	x
      00010C CDr03r02         [ 4]  381 	call	_putchar
                                    382 ;	src\main.c: 270: putchar(0x00);
      00010F 5F               [ 1]  383 	clrw	x
      000110 CDr03r02         [ 4]  384 	call	_putchar
                                    385 ;	src\main.c: 271: putchar(0x18);
      000113 AE 00 18         [ 2]  386 	ldw	x, #0x0018
      000116 CDr03r02         [ 4]  387 	call	_putchar
                                    388 ;	src\main.c: 272: printf("%s\r\n", stringSendUART);
      000119 CEu00u10         [ 2]  389 	ldw	x, _stringSendUART+0
      00011C 89               [ 2]  390 	pushw	x
      00011D 4BrCD            [ 1]  391 	push	#<(___str_4+0)
      00011F 4Bs00            [ 1]  392 	push	#((___str_4+0) >> 8)
      000121 CDr00r00         [ 4]  393 	call	_printf
      000124 5B 04            [ 2]  394 	addw	sp, #4
                                    395 ;	src\main.c: 274: free(stringSendUART);
      000126 CEu00u10         [ 2]  396 	ldw	x, _stringSendUART+0
      000129 CDr00r00         [ 4]  397 	call	_free
                                    398 ;	src\main.c: 275: free(stringValue);
      00012C CEu00u12         [ 2]  399 	ldw	x, _stringValue+0
      00012F CDr00r00         [ 4]  400 	call	_free
                                    401 ;	src\main.c: 277: delay_ms(5000);
      000132 AE 13 88         [ 2]  402 	ldw	x, #0x1388
      000135 CDr00r00         [ 4]  403 	call	_delay_ms
                                    404 ;	src\main.c: 336: integer_bit = 3;
      000138 35 03u01u12      [ 1]  405 	mov	_integer_bit+0, #0x03
                                    406 ;	src\main.c: 337: decimal_bit = 2;
      00013C 35 02u01u13      [ 1]  407 	mov	_decimal_bit+0, #0x02
                                    408 ;	src\main.c: 339: BME280_SetMode(BME280_MODE_FORCED);
      000140 A6 01            [ 1]  409 	ld	a, #0x01
      000142 CDr00r00         [ 4]  410 	call	_BME280_SetMode
                                    411 ;	src\main.c: 340: delay_ms(4000);
      000145 AE 0F A0         [ 2]  412 	ldw	x, #0x0fa0
      000148 CDr00r00         [ 4]  413 	call	_delay_ms
                                    414 ;	src\main.c: 342: BME280_ReadRegisters();
      00014B CDr00r00         [ 4]  415 	call	_BME280_ReadRegisters
                                    416 ;	src\main.c: 344: fBME280Temperature = BME280_ReadTemperature();
      00014E CDr00r00         [ 4]  417 	call	_BME280_ReadTemperature
      000151 CFu00u06         [ 2]  418 	ldw	_fBME280Temperature+2, x
      000154 90 CFu00u04      [ 2]  419 	ldw	_fBME280Temperature+0, y
                                    420 ;	src\main.c: 346: sizeValueString = integer_bit + decimal_bit + 1;
      000158 C6u01u12         [ 1]  421 	ld	a, _integer_bit+0
      00015B CBu01u13         [ 1]  422 	add	a, _decimal_bit+0
      00015E 4C               [ 1]  423 	inc	a
                                    424 ;	src\main.c: 347: stringValue = (char*)malloc(sizeValueString * sizeof(char));
      00015F C7u00u14         [ 1]  425 	ld	_sizeValueString+0, a
      000162 5F               [ 1]  426 	clrw	x
      000163 97               [ 1]  427 	ld	xl, a
      000164 CDr00r00         [ 4]  428 	call	_malloc
      000167 CFu00u12         [ 2]  429 	ldw	_stringValue+0, x
                                    430 ;	src\main.c: 348: sizeSendUARTString = sizeof(placeholderTemperatureBME280String) + sizeValueString;
      00016A C6u00u14         [ 1]  431 	ld	a, _sizeValueString+0
      00016D AB 35            [ 1]  432 	add	a, #0x35
                                    433 ;	src\main.c: 349: stringSendUART = (char*)malloc(sizeSendUARTString * sizeof(char));
      00016F C7u00u15         [ 1]  434 	ld	_sizeSendUARTString+0, a
      000172 5F               [ 1]  435 	clrw	x
      000173 97               [ 1]  436 	ld	xl, a
      000174 CDr00r00         [ 4]  437 	call	_malloc
      000177 CFu00u10         [ 2]  438 	ldw	_stringSendUART+0, x
                                    439 ;	src\main.c: 351: floatToStr(stringValue, fBME280Temperature, integer_bit, decimal_bit);
      00017A 3Bu01u13         [ 1]  440 	push	_decimal_bit+0
      00017D 3Bu01u12         [ 1]  441 	push	_integer_bit+0
      000180 CEu00u06         [ 2]  442 	ldw	x, _fBME280Temperature+2
      000183 89               [ 2]  443 	pushw	x
      000184 CEu00u04         [ 2]  444 	ldw	x, _fBME280Temperature+0
      000187 89               [ 2]  445 	pushw	x
      000188 CEu00u12         [ 2]  446 	ldw	x, _stringValue+0
      00018B CDr00r00         [ 4]  447 	call	_floatToStr
                                    448 ;	src\main.c: 352: sprintf(stringSendUART, placeholderTemperatureBME280String, stringValue);
      00018E CEu00u12         [ 2]  449 	ldw	x, _stringValue+0
      000191 89               [ 2]  450 	pushw	x
      000192 4Br34            [ 1]  451 	push	#<(_main_placeholderTemperatureBME280String_65537_219+0)
      000194 4Bs00            [ 1]  452 	push	#((_main_placeholderTemperatureBME280String_65537_219+0) >> 8)
      000196 CEu00u10         [ 2]  453 	ldw	x, _stringSendUART+0
      000199 89               [ 2]  454 	pushw	x
      00019A CDr00r00         [ 4]  455 	call	_sprintf
      00019D 5B 06            [ 2]  456 	addw	sp, #6
                                    457 ;	src\main.c: 353: putchar(0x00);
      00019F 5F               [ 1]  458 	clrw	x
      0001A0 CDr03r02         [ 4]  459 	call	_putchar
                                    460 ;	src\main.c: 354: putchar(0x00);
      0001A3 5F               [ 1]  461 	clrw	x
      0001A4 CDr03r02         [ 4]  462 	call	_putchar
                                    463 ;	src\main.c: 355: putchar(0x18);
      0001A7 AE 00 18         [ 2]  464 	ldw	x, #0x0018
      0001AA CDr03r02         [ 4]  465 	call	_putchar
                                    466 ;	src\main.c: 356: printf("%s\r\n", stringSendUART);
      0001AD CEu00u10         [ 2]  467 	ldw	x, _stringSendUART+0
      0001B0 89               [ 2]  468 	pushw	x
      0001B1 4BrCD            [ 1]  469 	push	#<(___str_4+0)
      0001B3 4Bs00            [ 1]  470 	push	#((___str_4+0) >> 8)
      0001B5 CDr00r00         [ 4]  471 	call	_printf
      0001B8 5B 04            [ 2]  472 	addw	sp, #4
                                    473 ;	src\main.c: 358: free(stringSendUART);
      0001BA CEu00u10         [ 2]  474 	ldw	x, _stringSendUART+0
      0001BD CDr00r00         [ 4]  475 	call	_free
                                    476 ;	src\main.c: 359: free(stringValue);
      0001C0 CEu00u12         [ 2]  477 	ldw	x, _stringValue+0
      0001C3 CDr00r00         [ 4]  478 	call	_free
                                    479 ;	src\main.c: 361: integer_bit = 2;
      0001C6 35 02u01u12      [ 1]  480 	mov	_integer_bit+0, #0x02
                                    481 ;	src\main.c: 362: decimal_bit = 2;
      0001CA 35 02u01u13      [ 1]  482 	mov	_decimal_bit+0, #0x02
                                    483 ;	src\main.c: 364: fBME280Humidity = BME280_ReadHumidity();
      0001CE CDr00r00         [ 4]  484 	call	_BME280_ReadHumidity
      0001D1 CFu00u0A         [ 2]  485 	ldw	_fBME280Humidity+2, x
      0001D4 90 CFu00u08      [ 2]  486 	ldw	_fBME280Humidity+0, y
                                    487 ;	src\main.c: 365: delay_ms(2000);
      0001D8 AE 07 D0         [ 2]  488 	ldw	x, #0x07d0
      0001DB CDr00r00         [ 4]  489 	call	_delay_ms
                                    490 ;	src\main.c: 367: sizeValueString = integer_bit + decimal_bit + 1;
      0001DE C6u01u12         [ 1]  491 	ld	a, _integer_bit+0
      0001E1 CBu01u13         [ 1]  492 	add	a, _decimal_bit+0
      0001E4 4C               [ 1]  493 	inc	a
                                    494 ;	src\main.c: 368: sizeSendUARTString = sizeof(placeholderHumidityBME280String) + sizeValueString;
      0001E5 C7u00u14         [ 1]  495 	ld	_sizeValueString+0, a
      0001E8 AB 32            [ 1]  496 	add	a, #0x32
      0001EA C7u00u15         [ 1]  497 	ld	_sizeSendUARTString+0, a
                                    498 ;	src\main.c: 369: stringValue = (char*)malloc(sizeValueString * sizeof(char));
      0001ED C6u00u14         [ 1]  499 	ld	a, _sizeValueString+0
      0001F0 5F               [ 1]  500 	clrw	x
      0001F1 97               [ 1]  501 	ld	xl, a
      0001F2 CDr00r00         [ 4]  502 	call	_malloc
      0001F5 CFu00u12         [ 2]  503 	ldw	_stringValue+0, x
                                    504 ;	src\main.c: 370: stringSendUART = (char*)malloc(sizeSendUARTString * sizeof(char));
      0001F8 C6u00u15         [ 1]  505 	ld	a, _sizeSendUARTString+0
      0001FB 5F               [ 1]  506 	clrw	x
      0001FC 97               [ 1]  507 	ld	xl, a
      0001FD CDr00r00         [ 4]  508 	call	_malloc
      000200 CFu00u10         [ 2]  509 	ldw	_stringSendUART+0, x
                                    510 ;	src\main.c: 372: floatToStr(stringValue, fBME280Humidity, integer_bit, decimal_bit);
      000203 3Bu01u13         [ 1]  511 	push	_decimal_bit+0
      000206 3Bu01u12         [ 1]  512 	push	_integer_bit+0
      000209 CEu00u0A         [ 2]  513 	ldw	x, _fBME280Humidity+2
      00020C 89               [ 2]  514 	pushw	x
      00020D CEu00u08         [ 2]  515 	ldw	x, _fBME280Humidity+0
      000210 89               [ 2]  516 	pushw	x
      000211 CEu00u12         [ 2]  517 	ldw	x, _stringValue+0
      000214 CDr00r00         [ 4]  518 	call	_floatToStr
                                    519 ;	src\main.c: 373: sprintf(stringSendUART, placeholderHumidityBME280String, stringValue);
      000217 CEu00u12         [ 2]  520 	ldw	x, _stringValue+0
      00021A 89               [ 2]  521 	pushw	x
      00021B 4Br69            [ 1]  522 	push	#<(_main_placeholderHumidityBME280String_65537_219+0)
      00021D 4Bs00            [ 1]  523 	push	#((_main_placeholderHumidityBME280String_65537_219+0) >> 8)
      00021F CEu00u10         [ 2]  524 	ldw	x, _stringSendUART+0
      000222 89               [ 2]  525 	pushw	x
      000223 CDr00r00         [ 4]  526 	call	_sprintf
      000226 5B 06            [ 2]  527 	addw	sp, #6
                                    528 ;	src\main.c: 378: putchar(0x00);
      000228 5F               [ 1]  529 	clrw	x
      000229 CDr03r02         [ 4]  530 	call	_putchar
                                    531 ;	src\main.c: 379: putchar(0x00);
      00022C 5F               [ 1]  532 	clrw	x
      00022D CDr03r02         [ 4]  533 	call	_putchar
                                    534 ;	src\main.c: 380: putchar(0x18);
      000230 AE 00 18         [ 2]  535 	ldw	x, #0x0018
      000233 CDr03r02         [ 4]  536 	call	_putchar
                                    537 ;	src\main.c: 381: printf("%s\r\n", stringSendUART);
      000236 CEu00u10         [ 2]  538 	ldw	x, _stringSendUART+0
      000239 89               [ 2]  539 	pushw	x
      00023A 4BrCD            [ 1]  540 	push	#<(___str_4+0)
      00023C 4Bs00            [ 1]  541 	push	#((___str_4+0) >> 8)
      00023E CDr00r00         [ 4]  542 	call	_printf
      000241 5B 04            [ 2]  543 	addw	sp, #4
                                    544 ;	src\main.c: 383: free(stringSendUART);
      000243 CEu00u10         [ 2]  545 	ldw	x, _stringSendUART+0
      000246 CDr00r00         [ 4]  546 	call	_free
                                    547 ;	src\main.c: 384: free(stringValue);
      000249 CEu00u12         [ 2]  548 	ldw	x, _stringValue+0
      00024C CDr00r00         [ 4]  549 	call	_free
                                    550 ;	src\main.c: 386: integer_bit = 5;
      00024F 35 05u01u12      [ 1]  551 	mov	_integer_bit+0, #0x05
                                    552 ;	src\main.c: 387: decimal_bit = 1;
      000253 35 01u01u13      [ 1]  553 	mov	_decimal_bit+0, #0x01
                                    554 ;	src\main.c: 389: fBME280Pressure = BME280_ReadPressure();
      000257 CDr00r00         [ 4]  555 	call	_BME280_ReadPressure
      00025A 89               [ 2]  556 	pushw	x
      00025B 90 89            [ 2]  557 	pushw	y
      00025D CDr00r00         [ 4]  558 	call	___fs2ulong
      000260 5B 04            [ 2]  559 	addw	sp, #4
      000262 CFu00u0E         [ 2]  560 	ldw	_fBME280Pressure+2, x
      000265 90 CFu00u0C      [ 2]  561 	ldw	_fBME280Pressure+0, y
                                    562 ;	src\main.c: 390: delay_ms(2000);
      000269 AE 07 D0         [ 2]  563 	ldw	x, #0x07d0
      00026C CDr00r00         [ 4]  564 	call	_delay_ms
                                    565 ;	src\main.c: 392: sizeValueString = integer_bit + decimal_bit + 1;
      00026F C6u01u12         [ 1]  566 	ld	a, _integer_bit+0
      000272 CBu01u13         [ 1]  567 	add	a, _decimal_bit+0
      000275 4C               [ 1]  568 	inc	a
                                    569 ;	src\main.c: 393: sizeSendUARTString = sizeof(placeholderPressureBME280String) + sizeValueString;
      000276 C7u00u14         [ 1]  570 	ld	_sizeValueString+0, a
      000279 AB 32            [ 1]  571 	add	a, #0x32
      00027B C7u00u15         [ 1]  572 	ld	_sizeSendUARTString+0, a
                                    573 ;	src\main.c: 394: stringValue = (char*)malloc(sizeValueString * sizeof(char));
      00027E 5F               [ 1]  574 	clrw	x
      00027F C6u00u14         [ 1]  575 	ld	a, _sizeValueString+0
      000282 97               [ 1]  576 	ld	xl, a
      000283 CDr00r00         [ 4]  577 	call	_malloc
      000286 CFu00u12         [ 2]  578 	ldw	_stringValue+0, x
                                    579 ;	src\main.c: 395: stringSendUART = (char*)malloc(sizeSendUARTString * sizeof(char));
      000289 C6u00u15         [ 1]  580 	ld	a, _sizeSendUARTString+0
      00028C 5F               [ 1]  581 	clrw	x
      00028D 97               [ 1]  582 	ld	xl, a
      00028E CDr00r00         [ 4]  583 	call	_malloc
      000291 CFu00u10         [ 2]  584 	ldw	_stringSendUART+0, x
                                    585 ;	src\main.c: 397: floatToStr(stringValue, (float)fBME280Pressure, integer_bit, decimal_bit);
      000294 CEu00u0E         [ 2]  586 	ldw	x, _fBME280Pressure+2
      000297 89               [ 2]  587 	pushw	x
      000298 CEu00u0C         [ 2]  588 	ldw	x, _fBME280Pressure+0
      00029B 89               [ 2]  589 	pushw	x
      00029C CDr00r00         [ 4]  590 	call	___ulong2fs
      00029F 5B 04            [ 2]  591 	addw	sp, #4
      0002A1 3Bu01u13         [ 1]  592 	push	_decimal_bit+0
      0002A4 3Bu01u12         [ 1]  593 	push	_integer_bit+0
      0002A7 89               [ 2]  594 	pushw	x
      0002A8 90 89            [ 2]  595 	pushw	y
      0002AA CEu00u12         [ 2]  596 	ldw	x, _stringValue+0
      0002AD CDr00r00         [ 4]  597 	call	_floatToStr
                                    598 ;	src\main.c: 398: sprintf(stringSendUART, placeholderPressureBME280String, stringValue);
      0002B0 CEu00u12         [ 2]  599 	ldw	x, _stringValue+0
      0002B3 89               [ 2]  600 	pushw	x
      0002B4 4Br9B            [ 1]  601 	push	#<(_main_placeholderPressureBME280String_65537_219+0)
      0002B6 4Bs00            [ 1]  602 	push	#((_main_placeholderPressureBME280String_65537_219+0) >> 8)
      0002B8 CEu00u10         [ 2]  603 	ldw	x, _stringSendUART+0
      0002BB 89               [ 2]  604 	pushw	x
      0002BC CDr00r00         [ 4]  605 	call	_sprintf
      0002BF 5B 06            [ 2]  606 	addw	sp, #6
                                    607 ;	src\main.c: 403: putchar(0x00);
      0002C1 5F               [ 1]  608 	clrw	x
      0002C2 CDr03r02         [ 4]  609 	call	_putchar
                                    610 ;	src\main.c: 404: putchar(0x00);
      0002C5 5F               [ 1]  611 	clrw	x
      0002C6 CDr03r02         [ 4]  612 	call	_putchar
                                    613 ;	src\main.c: 405: putchar(0x18);
      0002C9 AE 00 18         [ 2]  614 	ldw	x, #0x0018
      0002CC CDr03r02         [ 4]  615 	call	_putchar
                                    616 ;	src\main.c: 406: printf("%s\r\n", stringSendUART);
      0002CF CEu00u10         [ 2]  617 	ldw	x, _stringSendUART+0
      0002D2 89               [ 2]  618 	pushw	x
      0002D3 4BrCD            [ 1]  619 	push	#<(___str_4+0)
      0002D5 4Bs00            [ 1]  620 	push	#((___str_4+0) >> 8)
      0002D7 CDr00r00         [ 4]  621 	call	_printf
      0002DA 5B 04            [ 2]  622 	addw	sp, #4
                                    623 ;	src\main.c: 408: free(stringSendUART);
      0002DC CEu00u10         [ 2]  624 	ldw	x, _stringSendUART+0
      0002DF CDr00r00         [ 4]  625 	call	_free
                                    626 ;	src\main.c: 409: free(stringValue);
      0002E2 CEu00u12         [ 2]  627 	ldw	x, _stringValue+0
      0002E5 CDr00r00         [ 4]  628 	call	_free
                                    629 ;	src\main.c: 419: for (uint8_t i = 0; i < 9; i++) {
      0002E8 4F               [ 1]  630 	clr	a
      0002E9                        631 00112$:
      0002E9 A1 09            [ 1]  632 	cp	a, #0x09
      0002EB 24 0A            [ 1]  633 	jrnc	00104$
                                    634 ;	src\main.c: 420: delay_ms(65535);
      0002ED 88               [ 1]  635 	push	a
      0002EE 5F               [ 1]  636 	clrw	x
      0002EF 5A               [ 2]  637 	decw	x
      0002F0 CDr00r00         [ 4]  638 	call	_delay_ms
      0002F3 84               [ 1]  639 	pop	a
                                    640 ;	src\main.c: 419: for (uint8_t i = 0; i < 9; i++) {
      0002F4 4C               [ 1]  641 	inc	a
      0002F5 20 F2            [ 2]  642 	jra	00112$
      0002F7                        643 00104$:
                                    644 ;	src\main.c: 424: LED_OFF;
      0002F7 A6 20            [ 1]  645 	ld	a, #0x20
      0002F9 AE 50 14         [ 2]  646 	ldw	x, #0x5014
      0002FC CDr00r00         [ 4]  647 	call	_GPIO_WriteHigh
                                    648 ;	src\main.c: 434: }
      0002FF CCr00r98         [ 2]  649 	jp	00106$
                                    650 ;	src\main.c: 441: PUTCHAR_PROTOTYPE
                                    651 ;	-----------------------------------------
                                    652 ;	 function putchar
                                    653 ;	-----------------------------------------
      000302                        654 _putchar:
                                    655 ;	src\main.c: 444: UART_SENDDATA8(c);
      000302 9F               [ 1]  656 	ld	a, xl
      000303 89               [ 2]  657 	pushw	x
      000304 CDr00r00         [ 4]  658 	call	_UART2_SendData8
      000307 85               [ 2]  659 	popw	x
                                    660 ;	src\main.c: 446: while (UART_GETFLAGSTATUS(UART_FLAG_TXE) == RESET);
      000308                        661 00101$:
      000308 89               [ 2]  662 	pushw	x
      000309 AE 00 80         [ 2]  663 	ldw	x, #0x0080
      00030C CDr00r00         [ 4]  664 	call	_UART2_GetFlagStatus
      00030F 85               [ 2]  665 	popw	x
      000310 4D               [ 1]  666 	tnz	a
      000311 27 F5            [ 1]  667 	jreq	00101$
                                    668 ;	src\main.c: 448: return (c);
                                    669 ;	src\main.c: 449: }
      000313 81               [ 4]  670 	ret
                                    671 ;	src\main.c: 456: GETCHAR_PROTOTYPE
                                    672 ;	-----------------------------------------
                                    673 ;	 function getchar
                                    674 ;	-----------------------------------------
      000314                        675 _getchar:
                                    676 ;	src\main.c: 464: while (UART_GETFLAGSTATUS(UART_FLAG_TXE) == RESET);
      000314                        677 00101$:
      000314 AE 00 80         [ 2]  678 	ldw	x, #0x0080
      000317 CDr00r00         [ 4]  679 	call	_UART2_GetFlagStatus
      00031A 4D               [ 1]  680 	tnz	a
      00031B 27 F7            [ 1]  681 	jreq	00101$
                                    682 ;	src\main.c: 465: c = UART_RECEIVEDATA8();
      00031D CDr00r00         [ 4]  683 	call	_UART2_ReceiveData8
      000320 5F               [ 1]  684 	clrw	x
                                    685 ;	src\main.c: 466: return (c);
      000321 97               [ 1]  686 	ld	xl, a
                                    687 ;	src\main.c: 467: }
      000322 81               [ 4]  688 	ret
                                    689 ;	src\main.c: 478: void assert_failed(uint8_t* file, uint32_t line)
                                    690 ;	-----------------------------------------
                                    691 ;	 function assert_failed
                                    692 ;	-----------------------------------------
      000323                        693 _assert_failed:
                                    694 ;	src\main.c: 485: while (1)
      000323                        695 00102$:
      000323 20 FE            [ 2]  696 	jra	00102$
                                    697 ;	src\main.c: 488: }
      000325 1E 01            [ 2]  698 	ldw	x, (1, sp)
      000327 5B 06            [ 2]  699 	addw	sp, #6
      000329 FC               [ 2]  700 	jp	(x)
                                    701 	.area CODE
                                    702 	.area CONST
      000000                        703 _main_placeholderDS18X20String_65537_219:
      000000 7B                     704 	.ascii "{"
      000001 22                     705 	.db 0x22
      000002 74 6F 70 69 63         706 	.ascii "topic"
      000007 22                     707 	.db 0x22
      000008 20 3A 20               708 	.ascii " : "
      00000B 22                     709 	.db 0x22
      00000C 6D 71 74 74 2F 74 65   710 	.ascii "mqtt/temperature-room"
             6D 70 65 72 61 74 75
             72 65 2D 72 6F 6F 6D
      000021 22                     711 	.db 0x22
      000022 2C 20                  712 	.ascii ", "
      000024 22                     713 	.db 0x22
      000025 76 61 6C 75 65         714 	.ascii "value"
      00002A 22                     715 	.db 0x22
      00002B 20 3A 20               716 	.ascii " : "
      00002E 22                     717 	.db 0x22
      00002F 25 73                  718 	.ascii "%s"
      000031 22                     719 	.db 0x22
      000032 7D                     720 	.ascii "}"
      000033 00                     721 	.db 0x00
      000034                        722 _main_placeholderTemperatureBME280String_65537_219:
      000034 7B                     723 	.ascii "{"
      000035 22                     724 	.db 0x22
      000036 74 6F 70 69 63         725 	.ascii "topic"
      00003B 22                     726 	.db 0x22
      00003C 20 3A 20               727 	.ascii " : "
      00003F 22                     728 	.db 0x22
      000040 6D 71 74 74 2F 74 65   729 	.ascii "mqtt/temperature-bme280"
             6D 70 65 72 61 74 75
             72 65 2D 62 6D 65 32
             38 30
      000057 22                     730 	.db 0x22
      000058 2C 20                  731 	.ascii ", "
      00005A 22                     732 	.db 0x22
      00005B 76 61 6C 75 65         733 	.ascii "value"
      000060 22                     734 	.db 0x22
      000061 3A 20                  735 	.ascii ": "
      000063 22                     736 	.db 0x22
      000064 25 73                  737 	.ascii "%s"
      000066 22                     738 	.db 0x22
      000067 7D                     739 	.ascii "}"
      000068 00                     740 	.db 0x00
      000069                        741 _main_placeholderHumidityBME280String_65537_219:
      000069 7B                     742 	.ascii "{"
      00006A 22                     743 	.db 0x22
      00006B 74 6F 70 69 63         744 	.ascii "topic"
      000070 22                     745 	.db 0x22
      000071 20 3A 20               746 	.ascii " : "
      000074 22                     747 	.db 0x22
      000075 6D 71 74 74 2F 68 75   748 	.ascii "mqtt/humidity-bme280"
             6D 69 64 69 74 79 2D
             62 6D 65 32 38 30
      000089 22                     749 	.db 0x22
      00008A 2C 20                  750 	.ascii ", "
      00008C 22                     751 	.db 0x22
      00008D 76 61 6C 75 65         752 	.ascii "value"
      000092 22                     753 	.db 0x22
      000093 3A 20                  754 	.ascii ": "
      000095 22                     755 	.db 0x22
      000096 25 73                  756 	.ascii "%s"
      000098 22                     757 	.db 0x22
      000099 7D                     758 	.ascii "}"
      00009A 00                     759 	.db 0x00
      00009B                        760 _main_placeholderPressureBME280String_65537_219:
      00009B 7B                     761 	.ascii "{"
      00009C 22                     762 	.db 0x22
      00009D 74 6F 70 69 63         763 	.ascii "topic"
      0000A2 22                     764 	.db 0x22
      0000A3 20 3A 20               765 	.ascii " : "
      0000A6 22                     766 	.db 0x22
      0000A7 6D 71 74 74 2F 70 72   767 	.ascii "mqtt/pressure-bme280"
             65 73 73 75 72 65 2D
             62 6D 65 32 38 30
      0000BB 22                     768 	.db 0x22
      0000BC 2C 20                  769 	.ascii ", "
      0000BE 22                     770 	.db 0x22
      0000BF 76 61 6C 75 65         771 	.ascii "value"
      0000C4 22                     772 	.db 0x22
      0000C5 3A 20                  773 	.ascii ": "
      0000C7 22                     774 	.db 0x22
      0000C8 25 73                  775 	.ascii "%s"
      0000CA 22                     776 	.db 0x22
      0000CB 7D                     777 	.ascii "}"
      0000CC 00                     778 	.db 0x00
                                    779 	.area CONST
      0000CD                        780 ___str_4:
      0000CD 25 73                  781 	.ascii "%s"
      0000CF 0D                     782 	.db 0x0d
      0000D0 0A                     783 	.db 0x0a
      0000D1 00                     784 	.db 0x00
                                    785 	.area CODE
                                    786 	.area INITIALIZER
      000000                        787 __xinit__fDS18X20Temperature:
      000000 C2 C8 00 00            788 	.byte #0xc2, #0xc8, #0x00, #0x00	; -1.000000e+02
      000004                        789 __xinit__fBME280Temperature:
      000004 00 00 00 00            790 	.byte #0x00, #0x00, #0x00, #0x00	;  0.000000e+00
      000008                        791 __xinit__fBME280Humidity:
      000008 00 00 00 00            792 	.byte #0x00, #0x00, #0x00, #0x00	;  0.000000e+00
      00000C                        793 __xinit__fBME280Pressure:
      00000C 00 00 00 00            794 	.byte #0x00, #0x00, #0x00, #0x00	; 0
      000010                        795 __xinit__stringSendUART:
      000010 00 00                  796 	.dw #0x0000
      000012                        797 __xinit__stringValue:
      000012 00 00                  798 	.dw #0x0000
      000014                        799 __xinit__sizeValueString:
      000014 00                     800 	.db #0x00	; 0
      000015                        801 __xinit__sizeSendUARTString:
      000015 00                     802 	.db #0x00	; 0
                                    803 	.area CABS (ABS)
